{"version":3,"sources":["components/utils/config.js","components/utils/near.js","components/utils/Cover.js","components/Wallet.js","cover.png","components/utils/loader.js","components/utils/functions.js","components/storageconfig.js","components/Splitusers.js","components/admin.js","components/form.js","components/Direct.js","components/CreateAccount.js","components/AccountExists.js","App.js","reportWebVitals.js","index.js"],"names":["CONTRACT_NAME","process","environment","env","networkId","nodeUrl","contractName","walletUrl","helperUrl","explorerUrl","Error","nearEnv","a","connect","Object","assign","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","near","window","walletConnection","WalletConnection","accountId","getAccountId","contract","Contract","account","viewMethods","changeMethods","accountBalance","formatNearAmount","getAccountBalance","total","login","requestSignIn","logout","signOut","location","reload","Cover","name","coverImg","className","style","background","minHeight","maxWidth","src","alt","Button","onClick","variant","defaultProps","Wallet","address","amount","symbol","destroy","Badge","bg","text","Dropdown","Toggle","align","id","Spinner","animation","size","Menu","Item","href","target","Stack","direction","gap","Divider","as","Loader","role","GAS","verificationType","ID","verificationPerUser","accountID","checkAccount","accountExist","changeToPending","verifyAccount","Type","verification","getusersList","getUsers","app","initializeApp","apiKey","authDomain","projectId","databaseURL","storageBucket","messagingSenderId","appId","measurementId","storage","getStorage","db","getFirestore","colRef","collection","Splitusers","usersList","useState","pendingList","newList","rejectedList","verifiedList","spamList","IDofuser","setUserID","FrondID","setFrontID","BackID","setBackID","PicwithID","setPickWithID","List","setList","refresh","setRefresh","showPic","showpic","splitUsers","console","log","length","i","user","split","push","PicofID","getDocs","forEach","doc","data","FrontID","PicWithID","verifyUser","type","useEffect","display","flexDirection","width","map","height","backgroundColor","borderRadius","color","paddingLeft","paddingBottom","paddingTop","fontSize","placeholder","Admin","userList","setUsers","Form","userID","rejected","loading","setLoading","showform","setForm","Files","urls","addVerification","userId","upload","IDS","storageRef","ref","uploadTask","uploadBytesResumable","on","snapshot","err","getDownloadURL","then","url","submit","alert","setDoc","padding","onChange","e","Newfile","files","value","borderWidth","borderColor","alignItems","justifyContent","Direct","vType","SetVerificationType","Verification","abortController","AbortController","abort","Account","profileExist","createNewProfile","createProfile","CheckAccountStatus","profileStatus","setProfileStatus","CheckIfExist","App","balance","setBalance","adminList","getBalance","useCallback","backgroundPosition","backgroundSize","Container","fluid","Nav","isAdmin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","nearInitPromise","initializeContract","ReactDOM","render","StrictMode","document","getElementById","catch","error"],"mappings":"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","file":"static/js/main.1ed124b3.chunk.js","sourcesContent":["const CONTRACT_NAME = process.env.CONTRACT_NAME || 'verifiedprofiles.karimayman.testnet'; // line 1\r\n\r\nfunction environment(env) {\r\n  switch (env) {\r\n    case 'mainnet': // line 5\r\n      return {\r\n        networkId: 'mainnet',\r\n        nodeUrl: 'https://rpc.mainnet.near.org',\r\n        contractName: CONTRACT_NAME,\r\n        walletUrl: 'https://wallet.near.org',\r\n        helperUrl: 'https://helper.mainnet.near.org',\r\n        explorerUrl: 'https://explorer.mainnet.near.org',\r\n      };\r\n    case 'testnet': // line 14\r\n      return {\r\n        networkId: 'testnet',\r\n        nodeUrl: 'https://rpc.testnet.near.org',\r\n        contractName: CONTRACT_NAME,\r\n        walletUrl: 'https://wallet.testnet.near.org',\r\n        helperUrl: 'https://helper.testnet.near.org',\r\n        explorerUrl: 'https://explorer.testnet.near.org',\r\n      };\r\n    default:\r\n      throw Error(`Unknown environment '${env}'.`);\r\n  }\r\n}\r\n\r\nexport default environment;\r\n","import { Contract, WalletConnection, connect, keyStores } from 'near-api-js';\r\n\r\nimport environment from './config';\r\nimport { formatNearAmount } from 'near-api-js/lib/utils/format';\r\n\r\nconst nearEnv = environment('testnet');\r\n\r\nexport async function initializeContract() {\r\n  const near = await connect(\r\n    Object.assign(\r\n      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },\r\n      nearEnv\r\n    )\r\n  );\r\n  window.walletConnection = new WalletConnection(near);\r\n  window.accountId = window.walletConnection.getAccountId();\r\n  window.contract = new Contract(\r\n    window.walletConnection.account(),\r\n    nearEnv.contractName,\r\n    {\r\n      viewMethods: [\"accountExist\"],\r\n      changeMethods: [\"verifyAccount\", \"createProfile\",\"getUsers\",\"changeToPending\",\"verificationPerUser\"]\r\n    }\r\n  );\r\n}\r\n\r\nexport async function accountBalance() {\r\n  return formatNearAmount(\r\n    (await window.walletConnection.account().getAccountBalance()).total,\r\n    2\r\n  );\r\n}\r\n\r\nexport async function getAccountId() {\r\n  return window.walletConnection.getAccountId();\r\n}\r\n\r\nexport function login() {\r\n  window.walletConnection.requestSignIn(nearEnv.contractName);\r\n}\r\n\r\nexport function logout() {\r\n  window.walletConnection.signOut();\r\n  window.location.reload();\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst Cover = ({ name, login, coverImg }) => {\r\n  if ((name, login, coverImg)) {\r\n    return (\r\n      <div\r\n        className=\"d-flex justify-content-center flex-column text-center \"\r\n        style={{ background: \"#000\", minHeight: \"100vh\" }}\r\n      >\r\n        <div className=\"mt-auto text-light mb-5\">\r\n          <div\r\n            className=\" ratio ratio-1x1 mx-auto mb-2\"\r\n            style={{ maxWidth: \"320px\" }}\r\n          >\r\n            <img src={coverImg} alt=\"\" />\r\n          </div>\r\n          <h1>{name}</h1>\r\n          <p>Please connect your wallet to create a profile.</p>\r\n          <Button\r\n            onClick={login}\r\n            variant=\"outline-light\"\r\n            className=\"rounded-pill px-3 mt-3\"\r\n          >\r\n            Connect Wallet\r\n          </Button>\r\n        </div>\r\n        <p className=\"mt-auto text-secondary\">internship project</p>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nCover.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\n\r\nCover.defaultProps = {\r\n  name: \"\",\r\n};\r\n\r\nexport default Cover;","import { Badge, Dropdown, Spinner, Stack } from 'react-bootstrap';\r\n\r\nimport React from 'react';\r\n\r\nconst Wallet = ({ address, amount, symbol, destroy }) => {\r\n  if (address) {\r\n    return (\r\n      <>\r\n        <Badge className='me-3' bg='info' text='dark'>\r\n          {address}\r\n        </Badge>\r\n        <Dropdown>\r\n          <Dropdown.Toggle\r\n            variant='light'\r\n            align='end'\r\n            id='dropdown-basic'\r\n            className='d-flex align-items-center border rounded-pill py-1'>\r\n            {amount ? (\r\n              <>\r\n                {amount} <span className='ms-1'> {symbol}</span>\r\n              </>\r\n            ) : (\r\n              <Spinner animation='border' size='sm' className='opacity-25' />\r\n            )}\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu className='shadow-lg border-0'>\r\n            <Dropdown.Item\r\n              href={`https://explorer.testnet.near.org/accounts/${address}`}\r\n              target='_blank'>\r\n              <Stack direction='horizontal' gap={1}>\r\n                <i className='bi bi-person-circle fs-4' />\r\n                <span className='font-monospace'>{address}</span>\r\n              </Stack>\r\n            </Dropdown.Item>\r\n\r\n            <Dropdown.Divider />\r\n            <Dropdown.Item\r\n              as='button'\r\n              className='d-flex align-items-center'\r\n              onClick={() => {\r\n                destroy();\r\n              }}>\r\n              <i className='bi bi-box-arrow-right me-2 fs-4' />\r\n              Disconnect\r\n            </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Wallet;","export default __webpack_public_path__ + \"static/media/cover.c2b96abe.png\";","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n  <div className=\"d-flex justify-content-center\">\r\n    <Spinner  animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n      <span  className=\"visually-hidden\">Loading...</span>\r\n    </Spinner>\r\n  </div>\r\n);\r\nexport default Loader;","import {parseNearAmount} from \"near-api-js/lib/utils/format\";\r\nconst GAS = 100000000000000;\r\n\r\nexport function isAccountVerified(ID) {\r\n  return window.contract.isAccountVerified({ accountID :  ID} ,GAS , parseNearAmount(\"1\"));\r\n}\r\n\r\nexport  function createProfile() {\r\n  return window.contract.createProfile();\r\n}\r\n\r\nexport  function verificationType(ID) {\r\n  return window.contract.verificationPerUser({ accountID :  ID});\r\n}\r\n\r\nexport  function checkAccount(ID) {\r\n  return window.contract.accountExist({ accountID :  ID});\r\n}\r\n\r\nexport async function changeToPending(ID){\r\n  await window.contract.changeToPending({accountID : ID} ,GAS); \r\n}\r\n\r\nexport async function verifyAccount(ID,Type){\r\n  await window.contract.verifyAccount({accountID : ID, verification : Type } ,GAS); \r\n}\r\n\r\nexport async function getusersList(){\r\n  return window.contract.getUsers(); \r\n}","import { initializeApp } from \"firebase/app\";\r\nimport { getStorage } from \"firebase/storage\";\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { collection } from \"firebase/firestore\";\r\n// Initialize Firebase\r\nconst firebaseConfig = {\r\n\r\n    apiKey: \"AIzaSyBvcOeJbT0Sn6a40Aj2xTfzJRhDt5GnWek\",\r\n  \r\n    authDomain: \"verified-profile.firebaseapp.com\",\r\n  \r\n    projectId: \"verified-profile\",\r\n\r\n    databaseURL:\"gs://verified-profile.appspot.com\",\r\n  \r\n    storageBucket: \"verified-profile.appspot.com\",\r\n  \r\n    messagingSenderId: \"811507154375\",\r\n  \r\n    appId: \"1:811507154375:web:a99a1d71c063273cc96de2\",\r\n  \r\n    measurementId: \"G-MKT1969NCS\"\r\n  \r\n  };\r\n \r\n\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Firebase storage reference\r\nconst storage = getStorage(app);\r\nconst db = getFirestore(app);\r\nexport const colRef = collection(db, \"Profiles\");\r\n\r\n\r\nexport default storage;","import React, { useState, useEffect } from \"react\";\r\nimport Loader from \"./utils/loader\";\r\nimport { getDocs } from \"firebase/firestore\";\r\nimport Admin from \"./admin\";\r\nimport { colRef } from \"./storageconfig\";\r\nimport { verifyAccount } from \"./utils/functions\";\r\nconst Splitusers = ({ usersList }) => {\r\n  var [pendingList] = useState([]);\r\n  var [newList] = useState([]);\r\n  var [rejectedList] = useState([]);\r\n  var [verifiedList] = useState([]);\r\n  var [spamList] = useState([]);\r\n\r\n  const [IDofuser, setUserID] = useState(\"\");\r\n\r\n  const [FrondID, setFrontID] = useState(\"\");\r\n  const [BackID, setBackID] = useState(\"\");\r\n  const [PicwithID, setPickWithID] = useState(\"\");\r\n\r\n  const [List, setList] = useState(false);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [showPic, showpic] = useState(false);\r\n\r\n  const splitUsers = async () => {\r\n    console.log(usersList);\r\n    if (usersList.length !== 0) {\r\n      for (let i = 0; i < usersList.length; i++) {\r\n        var user = usersList[i].split(\",\");\r\n        if (user[1] === \"Verified\") {\r\n          verifiedList.push(user[0]);\r\n        } else if (user[1] === \"Pending\") {\r\n          pendingList.push(user[0]);\r\n        } else if (user[1] === \"New\") {\r\n          newList.push(user[0]);\r\n        } else if (user[1] === \"Rejected\") {\r\n          rejectedList.push(user[0]);\r\n        } else if (user[1] === \"Spam\") {\r\n          spamList.push(user[0]);\r\n        }\r\n      }\r\n      setList(true);\r\n    }\r\n  };\r\n\r\n  const PicofID = async (ID) => {\r\n    setUserID(ID);\r\n    try {\r\n      const docsSnap = await getDocs(colRef);\r\n      docsSnap.forEach((doc) => {\r\n        if (doc.id == ID) {\r\n          setFrontID(doc.data().FrontID);\r\n          setBackID(doc.data().BackID);\r\n          setPickWithID(doc.data().PicWithID);\r\n          showpic(true);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n    }\r\n  };\r\n\r\n  const verifyUser = async (ID, type) => {\r\n    try {\r\n      setList(false);\r\n      await verifyAccount(ID, type);\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      setList(true);\r\n      setRefresh(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    splitUsers();\r\n  }, []);\r\n  if (List === false) {\r\n    return (\r\n      <>\r\n        <Loader />\r\n      </>\r\n    );\r\n  }\r\n  if (refresh === true) {\r\n    return (\r\n      <>\r\n        <Admin />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{ background: \"#000\", display: \"flex\", flexDirection: \"row\" }}\r\n      >\r\n        {/* Left Half*/}\r\n\r\n        <div style={{ width: \"60%\" }}>\r\n          <h1>New</h1>\r\n          {/* New Users Part*/}\r\n          {newList.length === 0 ? (\r\n            <p>No User Found</p>\r\n          ) : (\r\n            <div>\r\n              <ol>\r\n                {newList.map((newList) => (\r\n                  <li>{newList}</li>\r\n                ))}\r\n              </ol>\r\n            </div>\r\n          )}\r\n\r\n          {/* Verified Users Part*/}\r\n          <h1>Verified</h1>\r\n          {verifiedList.length === 0 ? (\r\n            <p>No User Found</p>\r\n          ) : (\r\n            <div>\r\n              <ol>\r\n                {verifiedList.map((verifiedList) => (\r\n                  <li>\r\n                    {verifiedList}{\" \"}\r\n                    <button\r\n                      style={{\r\n                        width: 150,\r\n                        height: 30,\r\n                        backgroundColor: \"#fff\",\r\n                        borderRadius: 50,\r\n                      }}\r\n                      onClick={() => verifyUser(verifiedList, 0)}\r\n                    >\r\n                      Change to New\r\n                    </button>\r\n                    <button\r\n                      style={{\r\n                        width: 100,\r\n                        height: 30,\r\n                        backgroundColor: \"#fff\",\r\n                        borderRadius: 50,\r\n                      }}\r\n                      onClick={() => verifyUser(verifiedList, 2)}\r\n                    >\r\n                      Reject\r\n                    </button>\r\n                    <button\r\n                      style={{\r\n                        width: 100,\r\n                        height: 30,\r\n                        backgroundColor: \"#fff\",\r\n                        borderRadius: 50,\r\n                      }}\r\n                      onClick={() => verifyUser(verifiedList, 4)}\r\n                    >\r\n                      Spam\r\n                    </button>\r\n                    {!showPic ? (\r\n                      <button\r\n                        style={{\r\n                          width: 120,\r\n                          height: 30,\r\n                          backgroundColor: \"#fff\",\r\n                          borderRadius: 50,\r\n                        }}\r\n                        onClick={() => PicofID(verifiedList)}\r\n                      >\r\n                        Show pictures\r\n                      </button>\r\n                    ) : (\r\n                      <button\r\n                        style={{\r\n                          width: 120,\r\n                          height: 30,\r\n                          backgroundColor: \"#fff\",\r\n                          borderRadius: 50,\r\n                        }}\r\n                        onClick={() => showpic(false)}\r\n                      >\r\n                        Hide pictures\r\n                      </button>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ol>\r\n            </div>\r\n          )}\r\n\r\n          {/* Spam Users Part*/}\r\n          <h1>Spam</h1>\r\n          {spamList.length === 0 ? (\r\n            <p>No User Found</p>\r\n          ) : (\r\n            <div>\r\n              <ol>\r\n                {spamList.map((spamList) => (\r\n                  <li>\r\n                    {spamList}{\" \"}\r\n                    <button\r\n                      style={{\r\n                        width: 150,\r\n                        height: 30,\r\n                        backgroundColor: \"#fff\",\r\n                        borderRadius: 50,\r\n                      }}\r\n                      onClick={() => verifyUser(spamList, 0)}\r\n                    >\r\n                      Change to New\r\n                    </button>\r\n                    <button\r\n                      style={{\r\n                        width: 100,\r\n                        height: 30,\r\n                        backgroundColor: \"#fff\",\r\n                        borderRadius: 50,\r\n                      }}\r\n                      onClick={() => verifyUser(spamList, 3)}\r\n                    >\r\n                      Verify\r\n                    </button>\r\n                    <button\r\n                      style={{\r\n                        width: 100,\r\n                        height: 30,\r\n                        backgroundColor: \"#fff\",\r\n                        borderRadius: 50,\r\n                      }}\r\n                      onClick={() => verifyUser(spamList, 2)}\r\n                    >\r\n                      Reject\r\n                    </button>\r\n                    {!showPic ? (\r\n                      <button\r\n                        style={{\r\n                          width: 120,\r\n                          height: 30,\r\n                          backgroundColor: \"#fff\",\r\n                          borderRadius: 50,\r\n                        }}\r\n                        onClick={() => PicofID(spamList)}\r\n                      >\r\n                        Show pictures\r\n                      </button>\r\n                    ) : (\r\n                      <button\r\n                        style={{\r\n                          width: 120,\r\n                          height: 30,\r\n                          backgroundColor: \"#fff\",\r\n                          borderRadius: 50,\r\n                        }}\r\n                        onClick={() => showpic(false)}\r\n                      >\r\n                        Hide pictures\r\n                      </button>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ol>\r\n            </div>\r\n          )}\r\n\r\n          {/* Pending Users Part*/}\r\n          <h1>Pending</h1>\r\n          {pendingList.length === 0 ? (\r\n            <p>No User Found</p>\r\n          ) : (\r\n            <div>\r\n              <ol>\r\n                {pendingList.map((pendingList) => (\r\n                  <li>\r\n                    {pendingList}{\" \"}\r\n                    <button\r\n                      style={{\r\n                        width: 100,\r\n                        height: 30,\r\n                        backgroundColor: \"#fff\",\r\n                        borderRadius: 50,\r\n                      }}\r\n                      onClick={() => verifyUser(pendingList, 3)}\r\n                    >\r\n                      Verify\r\n                    </button>\r\n                    <button\r\n                      style={{\r\n                        width: 100,\r\n                        height: 30,\r\n                        backgroundColor: \"#fff\",\r\n                        borderRadius: 50,\r\n                      }}\r\n                      onClick={() => verifyUser(pendingList, 2)}\r\n                    >\r\n                      Reject\r\n                    </button>\r\n                    <button\r\n                      style={{\r\n                        width: 100,\r\n                        height: 30,\r\n                        backgroundColor: \"#fff\",\r\n                        borderRadius: 50,\r\n                      }}\r\n                      onClick={() => verifyUser(pendingList, 4)}\r\n                    >\r\n                      Spam\r\n                    </button>\r\n                    {!showPic ? (\r\n                      <button\r\n                        style={{\r\n                          width: 120,\r\n                          height: 30,\r\n                          backgroundColor: \"#fff\",\r\n                          borderRadius: 50,\r\n                        }}\r\n                        onClick={() => PicofID(pendingList)}\r\n                      >\r\n                        Show pictures\r\n                      </button>\r\n                    ) : (\r\n                      <button\r\n                        style={{\r\n                          width: 120,\r\n                          height: 30,\r\n                          backgroundColor: \"#fff\",\r\n                          borderRadius: 50,\r\n                        }}\r\n                        onClick={() => showpic(false)}\r\n                      >\r\n                        Hide pictures\r\n                      </button>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ol>\r\n            </div>\r\n          )}\r\n\r\n          {/* Rejected Users Part*/}\r\n          <h1>Rejected</h1>\r\n          {rejectedList.length === 0 ? (\r\n            <p>No User Found</p>\r\n          ) : (\r\n            <div>\r\n              <ol>\r\n                {rejectedList.map((rejectedList) => (\r\n                  <li>\r\n                    {rejectedList}{\" \"}\r\n                    <button\r\n                      style={{\r\n                        width: 100,\r\n                        height: 30,\r\n                        backgroundColor: \"#fff\",\r\n                        borderRadius: 50,\r\n                      }}\r\n                      onClick={() => verifyUser(rejectedList, 3)}\r\n                    >\r\n                      Verify\r\n                    </button>\r\n                    <button\r\n                      style={{\r\n                        width: 100,\r\n                        height: 30,\r\n                        backgroundColor: \"#fff\",\r\n                        borderRadius: 50,\r\n                      }}\r\n                      onClick={() => verifyUser(rejectedList, 4)}\r\n                    >\r\n                      Spam\r\n                    </button>\r\n                    {!showPic ? (\r\n                      <button\r\n                        style={{\r\n                          width: 120,\r\n                          height: 30,\r\n                          backgroundColor: \"#fff\",\r\n                          borderRadius: 50,\r\n                        }}\r\n                        onClick={() => PicofID(rejectedList)}\r\n                      >\r\n                        Show pictures\r\n                      </button>\r\n                    ) : (\r\n                      <button\r\n                        style={{\r\n                          width: 120,\r\n                          height: 30,\r\n                          backgroundColor: \"#fff\",\r\n                          borderRadius: 50,\r\n                        }}\r\n                        onClick={() => showpic(false)}\r\n                      >\r\n                        Hide pictures\r\n                      </button>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ol>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Right Side*/}\r\n\r\n        <div style={{ width: \"40%\", color: \"black\" }}>\r\n          {showPic ? (\r\n            <div\r\n              style={{\r\n                backgroundColor: \"#98AFC7\t\",\r\n                paddingLeft: 120,\r\n                paddingBottom: 50,\r\n                paddingTop: 50,\r\n              }}\r\n            >\r\n              <h1 style={{ paddingLeft: \"2vw\" }}>Pictures of {IDofuser}</h1>\r\n              <div style={{ paddingTop: \"3vh\", paddingBottom: \"5vh\" }}>\r\n                <h1 style={{ fontSize: 25 }}>Picture of the ID's front</h1>\r\n                <img\r\n                  src={FrondID}\r\n                  style={{ width: 300, height: 300 }}\r\n                  placeholder=\"blur\"\r\n                  alt=\"Front ID\"\r\n                />\r\n              </div>\r\n              <div style={{ paddingTop: \"3vh\", paddingBottom: \"5vh\" }}>\r\n                <h1 style={{ fontSize: 25 }}>Picture of the ID's back</h1>\r\n                <img\r\n                  src={BackID}\r\n                  style={{ width: 300, height: 300 }}\r\n                  alt=\"Back ID\"\r\n                />\r\n              </div>\r\n              <div style={{ paddingTop: \"3vh\", paddingBottom: \"5vh\" }}>\r\n                <h1 style={{ fontSize: 25 }}>Picture with the ID</h1>\r\n                <img\r\n                  src={PicwithID}\r\n                  style={{ width: 300, height: 300 }}\r\n                  alt=\"Picture With ID\"\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <h1></h1>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Splitusers;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Loader from \"./utils/loader\";\r\nimport { getusersList, verifyAccount } from \"./utils/functions\";\r\nimport Splitusers from \"./Splitusers\"\r\nconst Admin = () => {\r\n\r\n  var [userList, setUsers] = useState([]);\r\n  \r\n  const getUsers = async () => {\r\n    try {\r\n      console.log(\"setting users\");\r\n      setUsers(await getusersList());\r\n      console.log(\" done\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n    }\r\n  };\r\n\r\n  useEffect(async() => {\r\n    await getUsers();    \r\n  }, []);\r\n\r\n  if(userList.length === 0)\r\n  {\r\n    return(<Loader/>)\r\n  }\r\n\r\n  return (\r\n    <>\r\n       <Splitusers usersList={userList}  />\r\n    </>\r\n  );\r\n};\r\nexport default Admin;\r\n","import React, {useState } from \"react\";\r\nimport Direct from \"./Direct\";\r\nimport Loader from \"./utils/loader\";\r\nimport { colRef } from \"./storageconfig\";\r\nimport storage from \"./storageconfig\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { changeToPending } from \"./utils/functions\";\r\n\r\nconst Form = ({ userID , rejected}) => {\r\n  const [ID] = useState(userID);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showform, setForm] = useState(true);\r\n  var [Files] = useState([]);\r\n\r\n  var [urls] = useState([]);\r\n\r\n  const addVerification = async (userId) => {\r\n    try {\r\n      setLoading(true);\r\n      await changeToPending(userId);\r\n      setForm(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  function handleFrontID(e) {\r\n    const Newfile = e.target.files[0];\r\n    if(Newfile.size / 1024 > 5000 )\r\n    {\r\n      alert(\"File size is too big\\nPlease Choose Another File\")\r\n      e.target.value = null;\r\n    }\r\n    else \r\n    {\r\n      Files[0] = Newfile\r\n  }\r\n}\r\n  function handleBackID(e) {\r\n    const Newfile = e.target.files[0];\r\n    if(Newfile.size / 1024 > 10240 )\r\n    {\r\n      alert(\"File size is too big\\nPlease Choose Another File\")\r\n      e.target.value = null;\r\n    }\r\n    else \r\n    {\r\n      Files[1]= Newfile\r\n  }\r\n}\r\n  function handlePicWithID(e) {\r\n    const Newfile = e.target.files[0];\r\n    if(Newfile.size / 1024 > 10240 )\r\n    {\r\n      alert(\"File size is too big\\nPlease Choose Another File\")\r\n      e.target.value = null;\r\n    }\r\n    else \r\n    {\r\n      Files[2]=Newfile\r\n    }\r\n  }\r\n\r\n  const upload = async () => {\r\n    for(let i = 0 ; i < Files.length;i++)\r\n    {\r\n    var IDS = \"\"\r\n    if(i===0){IDS = \"Front ID\"}else if(i===1){IDS = \"Back ID\"}else if(i===2){IDS=\"Pic With ID\"}\r\n    const storageRef = ref(storage, `/files/${userID} ` + IDS);\r\n    const uploadTask = uploadBytesResumable(storageRef, Files[i]);\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      (snapshot) => {},\r\n      (err) => console.log(err),\r\n      () => {\r\n        getDownloadURL(uploadTask.snapshot.ref).then((url) => {\r\n          console.log(url);\r\n          urls[i] = url;\r\n        });\r\n      }\r\n    );\r\n    }\r\n  }\r\n\r\n\r\n  const submit = async () => {\r\n    if(Files.length !== 3)\r\n    {\r\n      alert(\"You Must Upload 3 Pictures\")\r\n    }\r\n    else{\r\n    await upload()\r\n    console.log(urls);\r\n    if(urls.length === 3)\r\n    {\r\n      await setDoc(doc(colRef, ID), {\r\n        FrontID: urls[0],\r\n        BackID: urls[1],\r\n        PicWithID: urls[2],\r\n      });\r\n      addVerification(ID);\r\n    }\r\n    else{\r\n      alert(\"Please Wait \\n Files are being uploaded\")\r\n    }\r\n  }\r\n  };\r\n  const style = {\r\n    padding: \"10px\",\r\n    fontSize: \"24px\",\r\n  };\r\n  return (\r\n    <>\r\n      {!loading ? (\r\n        <div\r\n          style={{\r\n            padding: \"10px\",\r\n            fontSize: \"30px\",\r\n          }}\r\n        >\r\n          {showform ? (\r\n            <div  align=\"middle\" >\r\n              {rejected ? (\r\n                <h1>{ID} Has Been Rejected</h1>\r\n              ) : (<div></div>)}\r\n              <div style={{fontSize: \"35px\"}}>\r\n                <p>To be verified successfully Please upload 3 Pictures</p>\r\n              </div>\r\n              <div style={style}>1 - Picture of the ID front :</div>\r\n              <input\r\n                type=\"file\"\r\n                name=\"FrontID\"\r\n                onChange={handleFrontID}\r\n                style={{\r\n                  fontSize: \"15px\",\r\n                  paddingBottom: 25,\r\n                }}\r\n              />\r\n              <div style={style}>2 - Picture of the ID back :</div>\r\n              <input\r\n                type=\"file\"\r\n                onChange={handleBackID}\r\n                style={{\r\n                  fontSize: \"15px\",\r\n                  paddingBottom: 25,\r\n                }}\r\n              />\r\n              <div style={style} >3 - Picture of you with the ID :</div>\r\n              <input\r\n                type=\"file\"\r\n                onChange={handlePicWithID}\r\n                  style={{\r\n                  fontSize: \"15px\",\r\n                  paddingBottom: 35,\r\n                }}\r\n              />\r\n              <div>\r\n                <button\r\n                  onClick={submit}\r\n                  style={{\r\n                    borderWidth: 2,\r\n                    borderColor: \"rgba(0,0,0,0.2)\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    width: 500,\r\n                    height: 100,\r\n                    backgroundColor: \"#fff\",\r\n                    borderRadius: 50,\r\n                  }}\r\n                >\r\n                  Submit Form\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <Direct ID={ID} />\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Form;\r\n","import React, {useState, useEffect} from \"react\";\r\nimport Loader from \"./utils/loader\";\r\nimport Form from \"./form\"\r\nimport { Checkmark } from \"react-checkmark\";\r\nimport {\r\n  verificationType,\r\n} from \"./utils/functions\";\r\n\r\nconst Direct = ({ID}) => {\r\n  const [vType, SetVerificationType] = useState(\" Verification Type Not Found\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const Verification = async (userId) => {\r\n    try {\r\n      setLoading(true);\r\n      SetVerificationType(await verificationType(userId));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }finally{\r\n      setLoading(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    let abortController = new AbortController();  \r\n    Verification(ID)\r\n    return () => {  \r\n    abortController.abort();  \r\n    }\r\n  }, []);\r\n  if(!loading){\r\n    if(vType === \"New\" )\r\n  {\r\n    return (\r\n        <>\r\n        <Form userID = {ID} rejected = {false}/>\r\n        </>\r\n      );\r\n  }\r\n  else if(vType === \"Spam\")\r\n  {\r\n    return (\r\n      <>\r\n      <h1 align=\"middle\" style={{height:\"100vh\"}}> {ID} is marked as a spam account</h1>\r\n      </>\r\n    );\r\n  }\r\n  else if(vType === \"Pending\")\r\n  {\r\n    return (\r\n      <>\r\n      <h1 align=\"middle\" style={{height:\"100vh\"}}> {ID} is Pending Verification</h1>\r\n      </>\r\n    );\r\n  }\r\n  else if(vType === \"Verified\")\r\n  {\r\n    return (\r\n      <>\r\n      <h1 align=\"middle\" style={{height:\"100vh\"}}> {ID} is verified successfully</h1> <Checkmark size={'large'} />\r\n      </>\r\n    );\r\n  }\r\n  else if(vType === \"Rejected\")\r\n  {\r\n    return (\r\n      <>\r\n      <Form userID = {ID} rejected = {true}/>\r\n      </>\r\n    );\r\n  }\r\n  }\r\n  else{\r\n    <Loader/>\r\n  }\r\n  return <Loader/>\r\n};\r\nexport default Direct;","import React, {useState, useEffect} from \"react\";\r\nimport Loader from \"./utils/loader\";\r\nimport Direct from \"./Direct\"\r\nimport {\r\n  createProfile,\r\n} from \"./utils/functions\";\r\n\r\nconst Account = ({profileExist}) => {\r\n  const [userId] = useState(window.walletConnection.account().accountId);\r\n  const [loading, setLoading] = useState(false);\r\n  const createNewProfile = async()=> {\r\n    try {\r\n      setLoading(true);\r\n      if(profileExist == false)\r\n      {\r\n        await (createProfile());\r\n        console.log(\"Creating Profile\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }  \r\n};\r\n  useEffect(() => {\r\n    let abortController = new AbortController();  \r\n    createNewProfile()\r\n    return () => {  \r\n    abortController.abort();  \r\n    }\r\n  }, []);\r\n\r\nreturn (\r\n  <>\r\n    {!loading ? (\r\n      <>\r\n      <Direct ID = {userId}/>\r\n      </>\r\n\r\n    ) : (\r\n      <Loader />\r\n    )}\r\n  </>\r\n);\r\n};\r\n\r\nexport default Account;","import {\r\n    checkAccount,\r\n  } from \"./utils/functions\";\r\n  import Loader from \"./utils/loader\";\r\n  import Account from \"./CreateAccount\"\r\n  import React, { useState, useEffect } from \"react\";\r\n\r\nconst CheckAccountStatus = ({ID}) => {\r\n  const [profileStatus,setProfileStatus] =useState(true)\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const CheckIfExist = async()=> {\r\n    try {\r\n      setLoading(true);\r\n      setProfileStatus(await checkAccount(ID));\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }  \r\n  }\r\n  useEffect(async() => {\r\n    await CheckIfExist()\r\n  }, []);\r\n  return (\r\n    <>\r\n      {!loading ? (\r\n        <>\r\n        <Account profileExist = {profileStatus}/>\r\n        </>\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n    </>\r\n  )\r\n      }\r\nexport default CheckAccountStatus;","import React, { useEffect, useCallback, useState } from \"react\";\r\nimport { Container, Nav } from \"react-bootstrap\";\r\nimport { login, logout as destroy, accountBalance } from \"./components/utils/near\";\r\nimport Cover from \"./components/utils/Cover\";\r\nimport Wallet from \"./components/Wallet\";\r\nimport coverImg from \"./cover.png\";\r\nimport \"./App.css\";\r\nimport Admin from \"./components/admin\"\r\nimport CheckAccountStatus from \"./components/AccountExists\"\r\n\r\nconst App = function AppWrapper() {\r\n  const account = window.walletConnection.account();\r\n  const [balance, setBalance] = useState(\"0\");\r\n  const [adminList] = useState([\"aliabdallah9.testnet\", \"mhassanist.testnet\",\"karimayman.testnet\",\"hamzatest.testnet\"]);\r\n\r\n  \r\n\r\n  function isAdmin(){\r\n    for(let i = 0; i<adminList.length;i++){\r\n      if(account.accountId === adminList[i]){\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  const getBalance = useCallback(async () => {\r\n    if (account.accountId) {\r\n      setBalance(await accountBalance());\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    getBalance();\r\n  }, [getBalance]);\r\n\r\n  return (\r\n    <>\r\n    <div style={{    \r\n      minHeight:\"100vh\",\r\n      backgroundColor: \"black\",\r\n      backgroundPosition: 'center',\r\n      backgroundSize: 'cover',\r\n      color:\"white\" }}>\r\n      {account.accountId ? (\r\n        <Container fluid=\"md\">\r\n          <Nav className=\"justify-content-end pt-3 pb-3\">\r\n            <Nav.Item>\r\n              <Wallet\r\n                address={account.accountId}\r\n                amount={balance}\r\n                symbol=\"NEAR\"\r\n                destroy={destroy}\r\n              />\r\n            </Nav.Item>\r\n          </Nav>\r\n          <div> <h1>VProfile</h1></div>\r\n          <main>\r\n          {isAdmin()? (\r\n            <Admin/>\r\n          ): \r\n            (\r\n              <CheckAccountStatus ID = {account.accountId}/>\r\n            )\r\n          }\r\n          </main>\r\n        </Container> \r\n      ) : (\r\n        <Cover name=\"Verified Accounts\" login={login} coverImg={coverImg}/>\r\n      )}\r\n      </div>\r\n    </>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { initializeContract } from \"./components/utils/near\";\r\n\r\nimport \"bootstrap\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nwindow.nearInitPromise = initializeContract()\r\n  .then(() => {\r\n    ReactDOM.render(\r\n      <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>,\r\n      document.getElementById(\"root\")\r\n    );\r\n  })\r\n  .catch(console.error);\r\n\r\nreportWebVitals();"],"sourceRoot":""}