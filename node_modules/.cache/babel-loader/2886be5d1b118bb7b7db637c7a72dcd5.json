{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InMemoryKeyStore = void 0;\n\nvar keystore_1 = require(\"./keystore\");\n\nvar key_pair_1 = require(\"../utils/key_pair\");\n/**\n * Simple in-memory keystore for mainly for testing purposes.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores, utils } from 'near-api-js';\n *\n * const privateKey = '.......';\n * const keyPair = utils.KeyPair.fromString(privateKey);\n *\n * const keyStore = new keyStores.InMemoryKeyStore();\n * keyStore.setKey('testnet', 'example-account.testnet', keyPair);\n *\n * const config = {\n *   keyStore, // instance of InMemoryKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\n\n\nvar InMemoryKeyStore = /*#__PURE__*/function (_keystore_1$KeyStore) {\n  _inherits(InMemoryKeyStore, _keystore_1$KeyStore);\n\n  var _super = _createSuper(InMemoryKeyStore);\n\n  function InMemoryKeyStore() {\n    var _this;\n\n    _classCallCheck(this, InMemoryKeyStore);\n\n    _this = _super.call(this);\n    _this.keys = {};\n    return _this;\n  }\n  /**\n   * Stores a {@KeyPair} in in-memory storage item\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n\n\n  _createClass(InMemoryKeyStore, [{\n    key: \"setKey\",\n    value: function () {\n      var _setKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(networkId, accountId, keyPair) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.keys[\"\".concat(accountId, \":\").concat(networkId)] = keyPair.toString();\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setKey(_x, _x2, _x3) {\n        return _setKey.apply(this, arguments);\n      }\n\n      return setKey;\n    }()\n    /**\n     * Gets a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n\n  }, {\n    key: \"getKey\",\n    value: function () {\n      var _getKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(networkId, accountId) {\n        var value;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                value = this.keys[\"\".concat(accountId, \":\").concat(networkId)];\n\n                if (value) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", null);\n\n              case 3:\n                return _context2.abrupt(\"return\", key_pair_1.KeyPair.fromString(value));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getKey(_x4, _x5) {\n        return _getKey.apply(this, arguments);\n      }\n\n      return getKey;\n    }()\n    /**\n     * Removes a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n\n  }, {\n    key: \"removeKey\",\n    value: function () {\n      var _removeKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(networkId, accountId) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                delete this.keys[\"\".concat(accountId, \":\").concat(networkId)];\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function removeKey(_x6, _x7) {\n        return _removeKey.apply(this, arguments);\n      }\n\n      return removeKey;\n    }()\n    /**\n     * Removes all {@link KeyPairs} from in-memory storage\n     */\n\n  }, {\n    key: \"clear\",\n    value: function () {\n      var _clear = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.keys = {};\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function clear() {\n        return _clear.apply(this, arguments);\n      }\n\n      return clear;\n    }()\n    /**\n     * Get the network(s) from in-memory storage\n     * @returns {Promise<string[]>}\n     */\n\n  }, {\n    key: \"getNetworks\",\n    value: function () {\n      var _getNetworks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                result = new Set();\n                Object.keys(this.keys).forEach(function (key) {\n                  var parts = key.split(':');\n                  result.add(parts[1]);\n                });\n                return _context5.abrupt(\"return\", Array.from(result.values()));\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getNetworks() {\n        return _getNetworks.apply(this, arguments);\n      }\n\n      return getNetworks;\n    }()\n    /**\n     * Gets the account(s) from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n\n  }, {\n    key: \"getAccounts\",\n    value: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(networkId) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                result = new Array();\n                Object.keys(this.keys).forEach(function (key) {\n                  var parts = key.split(':');\n\n                  if (parts[parts.length - 1] === networkId) {\n                    result.push(parts.slice(0, parts.length - 1).join(':'));\n                  }\n                });\n                return _context6.abrupt(\"return\", result);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getAccounts(_x8) {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }()\n    /** @hidden */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return 'InMemoryKeyStore';\n    }\n  }]);\n\n  return InMemoryKeyStore;\n}(keystore_1.KeyStore);\n\nexports.InMemoryKeyStore = InMemoryKeyStore;","map":{"version":3,"names":["Object","defineProperty","exports","value","InMemoryKeyStore","keystore_1","require","key_pair_1","keys","networkId","accountId","keyPair","toString","KeyPair","fromString","result","Set","forEach","key","parts","split","add","Array","from","values","length","push","slice","join","KeyStore"],"sources":["D:/Projects/verifiedprofilev2/node_modules/near-api-js/lib/key_stores/in_memory_key_store.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InMemoryKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nconst key_pair_1 = require(\"../utils/key_pair\");\n/**\n * Simple in-memory keystore for mainly for testing purposes.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores, utils } from 'near-api-js';\n *\n * const privateKey = '.......';\n * const keyPair = utils.KeyPair.fromString(privateKey);\n *\n * const keyStore = new keyStores.InMemoryKeyStore();\n * keyStore.setKey('testnet', 'example-account.testnet', keyPair);\n *\n * const config = {\n *   keyStore, // instance of InMemoryKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\nclass InMemoryKeyStore extends keystore_1.KeyStore {\n    constructor() {\n        super();\n        this.keys = {};\n    }\n    /**\n     * Stores a {@KeyPair} in in-memory storage item\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    async setKey(networkId, accountId, keyPair) {\n        this.keys[`${accountId}:${networkId}`] = keyPair.toString();\n    }\n    /**\n     * Gets a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    async getKey(networkId, accountId) {\n        const value = this.keys[`${accountId}:${networkId}`];\n        if (!value) {\n            return null;\n        }\n        return key_pair_1.KeyPair.fromString(value);\n    }\n    /**\n     * Removes a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    async removeKey(networkId, accountId) {\n        delete this.keys[`${accountId}:${networkId}`];\n    }\n    /**\n     * Removes all {@link KeyPairs} from in-memory storage\n     */\n    async clear() {\n        this.keys = {};\n    }\n    /**\n     * Get the network(s) from in-memory storage\n     * @returns {Promise<string[]>}\n     */\n    async getNetworks() {\n        const result = new Set();\n        Object.keys(this.keys).forEach((key) => {\n            const parts = key.split(':');\n            result.add(parts[1]);\n        });\n        return Array.from(result.values());\n    }\n    /**\n     * Gets the account(s) from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    async getAccounts(networkId) {\n        const result = new Array();\n        Object.keys(this.keys).forEach((key) => {\n            const parts = key.split(':');\n            if (parts[parts.length - 1] === networkId) {\n                result.push(parts.slice(0, parts.length - 1).join(':'));\n            }\n        });\n        return result;\n    }\n    /** @hidden */\n    toString() {\n        return 'InMemoryKeyStore';\n    }\n}\nexports.InMemoryKeyStore = InMemoryKeyStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}