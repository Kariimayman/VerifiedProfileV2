{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\verifiedprofilev2\\\\src\\\\components\\\\Direct.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Form from \"./form\";\nimport getVerification from \"./Functions\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Direct = _ref => {\n  _s();\n\n  let {\n    ID\n  } = _ref;\n  const [vType, SetVerificationType] = useState(\"type\");\n\n  const getVerification = async userId => {\n    try {\n      setLoading(true);\n      SetVerificationType(await isAccountVerified(userId));\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(async () => {\n    await getVerification(ID);\n  }, []);\n\n  if (vType === \"New\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        userID: ID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else if (vType === \"Spam\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", ID, \" is marked as a spam account\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  } else if (vType === \"Pending\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", ID, \" is Pending verification\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  } else if (vType === \"Verified\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", ID, \" is verified successfully\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  } else if (vType === \"Rejected\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", ID, \" verification rejected\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [\" Error : \", vType]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Direct, \"ZJ5bCQWvICaX+/O1QcOkWKpKcw0=\");\n\n_c = Direct;\nexport default Direct;\n\nvar _c;\n\n$RefreshReg$(_c, \"Direct\");","map":{"version":3,"names":["React","Form","getVerification","useEffect","Direct","ID","vType","SetVerificationType","useState","userId","setLoading","isAccountVerified","error","console","log"],"sources":["D:/Projects/verifiedprofilev2/src/components/Direct.js"],"sourcesContent":["import React from \"react\";\r\nimport Form from \"./form\" \r\nimport getVerification from \"./Functions\"\r\nimport { useEffect} from \"react\";\r\n\r\n\r\nconst Direct = ({ID}) => {\r\n  const [vType, SetVerificationType] = useState(\"type\");\r\n  const getVerification = async (userId) => {\r\n    try {\r\n      setLoading(true);\r\n      SetVerificationType(await isAccountVerified(userId));\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  useEffect(async() => {\r\n    await getVerification(ID)\r\n  }, []);\r\n  if(vType === \"New\")\r\n  {\r\n    return (\r\n        <>\r\n        <Form userID = {ID}/>\r\n        </>\r\n      );\r\n  }\r\n  else if(vType === \"Spam\")\r\n  {\r\n    return (\r\n      <>\r\n      <h1> {ID} is marked as a spam account</h1>\r\n      </>\r\n    );\r\n  }\r\n  else if(vType === \"Pending\")\r\n  {\r\n    return (\r\n      <>\r\n      <h1> {ID} is Pending verification</h1>\r\n      </>\r\n    );\r\n  }\r\n  else if(vType === \"Verified\")\r\n  {\r\n    return (\r\n      <>\r\n      <h1> {ID} is verified successfully</h1>\r\n      </>\r\n    );\r\n  }\r\n  else if(vType === \"Rejected\")\r\n  {\r\n    return (\r\n      <>\r\n      <h1> {ID} verification rejected</h1>\r\n      </>\r\n    );\r\n  }\r\n  return <h1> Error : {vType}</h1>;\r\n};\r\nexport default Direct;"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,SAAT,QAAyB,OAAzB;;;;AAGA,MAAMC,MAAM,GAAG,QAAU;EAAA;;EAAA,IAAT;IAACC;EAAD,CAAS;EACvB,MAAM,CAACC,KAAD,EAAQC,mBAAR,IAA+BC,QAAQ,CAAC,MAAD,CAA7C;;EACA,MAAMN,eAAe,GAAG,MAAOO,MAAP,IAAkB;IACxC,IAAI;MACFC,UAAU,CAAC,IAAD,CAAV;MACAH,mBAAmB,CAAC,MAAMI,iBAAiB,CAACF,MAAD,CAAxB,CAAnB;IACD,CAHD,CAGE,OAAOG,KAAP,EAAc;MACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD,CALD,SAKU;MACRF,UAAU,CAAC,KAAD,CAAV;IACD;EACF,CATD;;EAUAP,SAAS,CAAC,YAAW;IACnB,MAAMD,eAAe,CAACG,EAAD,CAArB;EACD,CAFQ,EAEN,EAFM,CAAT;;EAGA,IAAGC,KAAK,KAAK,KAAb,EACA;IACE,oBACI;MAAA,uBACA,QAAC,IAAD;QAAM,MAAM,EAAID;MAAhB;QAAA;QAAA;QAAA;MAAA;IADA,iBADJ;EAKD,CAPD,MAQK,IAAGC,KAAK,KAAK,MAAb,EACL;IACE,oBACE;MAAA,uBACA;QAAA,gBAAMD,EAAN;MAAA;QAAA;QAAA;QAAA;MAAA;IADA,iBADF;EAKD,CAPI,MAQA,IAAGC,KAAK,KAAK,SAAb,EACL;IACE,oBACE;MAAA,uBACA;QAAA,gBAAMD,EAAN;MAAA;QAAA;QAAA;QAAA;MAAA;IADA,iBADF;EAKD,CAPI,MAQA,IAAGC,KAAK,KAAK,UAAb,EACL;IACE,oBACE;MAAA,uBACA;QAAA,gBAAMD,EAAN;MAAA;QAAA;QAAA;QAAA;MAAA;IADA,iBADF;EAKD,CAPI,MAQA,IAAGC,KAAK,KAAK,UAAb,EACL;IACE,oBACE;MAAA,uBACA;QAAA,gBAAMD,EAAN;MAAA;QAAA;QAAA;QAAA;MAAA;IADA,iBADF;EAKD;;EACD,oBAAO;IAAA,wBAAcC,KAAd;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAxDD;;GAAMF,M;;KAAAA,M;AAyDN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}