{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst depd_1 = __importDefault(require(\"depd\"));\n\nconst transaction_1 = require(\"./transaction\");\n\nconst providers_1 = require(\"./providers\");\n\nconst borsh_1 = require(\"borsh\");\n\nconst key_pair_1 = require(\"./utils/key_pair\");\n\nconst errors_1 = require(\"./utils/errors\");\n\nconst rpc_errors_1 = require(\"./utils/rpc_errors\");\n\nconst constants_1 = require(\"./constants\");\n\nconst exponential_backoff_1 = __importDefault(require(\"./utils/exponential-backoff\")); // Default number of retries with different nonce before giving up on a transaction.\n\n\nconst TX_NONCE_RETRY_NUMBER = 12; // Default wait until next retry in millis.\n\nconst TX_NONCE_RETRY_WAIT = 500; // Exponential back off for waiting to retry.\n\nconst TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;\n\nfunction parseJsonFromRawResponse(response) {\n  return JSON.parse(Buffer.from(response).toString());\n}\n\nfunction bytesJsonStringify(input) {\n  return Buffer.from(JSON.stringify(input));\n}\n/**\n * This class provides common account related RPC calls including signing transactions with a {@link KeyPair}.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#account}\n * @hint Use {@link WalletConnection} in the browser to redirect to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for Account/key management using the {@link BrowserLocalStorageKeyStore}.\n * @see {@link https://nomicon.io/DataStructures/Account.html | Account Spec}\n */\n\n\nclass Account {\n  constructor(connection, accountId) {\n    /** @hidden */\n    this.accessKeyByPublicKeyCache = {};\n    this.connection = connection;\n    this.accountId = accountId;\n  }\n  /** @hidden */\n\n\n  get ready() {\n    const deprecate = depd_1.default('Account.ready()');\n    deprecate('not needed anymore, always ready');\n    return Promise.resolve();\n  }\n\n  async fetchState() {\n    const deprecate = depd_1.default('Account.fetchState()');\n    deprecate('use `Account.state()` instead');\n  }\n  /**\n   * Returns basic NEAR account information via the `view_account` RPC query method\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-account}\n   */\n\n\n  async state() {\n    return this.connection.provider.query({\n      request_type: 'view_account',\n      account_id: this.accountId,\n      finality: 'optimistic'\n    });\n  }\n  /** @hidden */\n\n\n  printLogsAndFailures(contractId, results) {\n    if (!process.env[\"NEAR_NO_LOGS\"]) {\n      for (const result of results) {\n        console.log(`Receipt${result.receiptIds.length > 1 ? 's' : ''}: ${result.receiptIds.join(', ')}`);\n        this.printLogs(contractId, result.logs, '\\t');\n\n        if (result.failure) {\n          console.warn(`\\tFailure [${contractId}]: ${result.failure}`);\n        }\n      }\n    }\n  }\n  /** @hidden */\n\n\n  printLogs(contractId, logs) {\n    let prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n    if (!process.env[\"NEAR_NO_LOGS\"]) {\n      for (const log of logs) {\n        console.log(`${prefix}Log [${contractId}]: ${log}`);\n      }\n    }\n  }\n  /**\n   * Create a signed transaction which can be broadcast to the network\n   * @param receiverId NEAR account receiving the transaction\n   * @param actions list of actions to perform as part of the transaction\n   * @see {@link JsonRpcProvider.sendTransaction}\n   */\n\n\n  async signTransaction(receiverId, actions) {\n    const accessKeyInfo = await this.findAccessKey(receiverId, actions);\n\n    if (!accessKeyInfo) {\n      throw new providers_1.TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair found in ${this.connection.signer}.`, 'KeyNotFound');\n    }\n\n    const {\n      accessKey\n    } = accessKeyInfo;\n    const block = await this.connection.provider.block({\n      finality: 'final'\n    });\n    const blockHash = block.header.hash;\n    const nonce = ++accessKey.nonce;\n    return await transaction_1.signTransaction(receiverId, nonce, actions, borsh_1.baseDecode(blockHash), this.connection.signer, this.accountId, this.connection.networkId);\n  }\n\n  signAndSendTransaction() {\n    if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n      return this.signAndSendTransactionV1(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);\n    } else {\n      return this.signAndSendTransactionV2(arguments.length <= 0 ? undefined : arguments[0]);\n    }\n  }\n\n  signAndSendTransactionV1(receiverId, actions) {\n    const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n    deprecate('use `Account.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n    return this.signAndSendTransactionV2({\n      receiverId,\n      actions\n    });\n  }\n\n  async signAndSendTransactionV2(_ref) {\n    let {\n      receiverId,\n      actions\n    } = _ref;\n    let txHash, signedTx; // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)\n\n    const result = await exponential_backoff_1.default(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, async () => {\n      [txHash, signedTx] = await this.signTransaction(receiverId, actions);\n      const publicKey = signedTx.transaction.publicKey;\n\n      try {\n        return await this.connection.provider.sendTransaction(signedTx);\n      } catch (error) {\n        if (error.type === 'InvalidNonce') {\n          errors_1.logWarning(`Retrying transaction ${receiverId}:${borsh_1.baseEncode(txHash)} with new nonce.`);\n          delete this.accessKeyByPublicKeyCache[publicKey.toString()];\n          return null;\n        }\n\n        if (error.type === 'Expired') {\n          errors_1.logWarning(`Retrying transaction ${receiverId}:${borsh_1.baseEncode(txHash)} due to expired block hash`);\n          return null;\n        }\n\n        error.context = new providers_1.ErrorContext(borsh_1.baseEncode(txHash));\n        throw error;\n      }\n    });\n\n    if (!result) {\n      // TODO: This should have different code actually, as means \"transaction not submitted for sure\"\n      throw new providers_1.TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');\n    }\n\n    const flatLogs = [result.transaction_outcome, ...result.receipts_outcome].reduce((acc, it) => {\n      if (it.outcome.logs.length || typeof it.outcome.status === 'object' && typeof it.outcome.status.Failure === 'object') {\n        return acc.concat({\n          'receiptIds': it.outcome.receipt_ids,\n          'logs': it.outcome.logs,\n          'failure': typeof it.outcome.status.Failure != 'undefined' ? rpc_errors_1.parseRpcError(it.outcome.status.Failure) : null\n        });\n      } else return acc;\n    }, []);\n    this.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);\n\n    if (typeof result.status === 'object' && typeof result.status.Failure === 'object') {\n      // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n      if (result.status.Failure.error_message && result.status.Failure.error_type) {\n        throw new providers_1.TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);\n      } else {\n        throw rpc_errors_1.parseResultError(result);\n      }\n    } // TODO: if Tx is Unknown or Started.\n\n\n    return result;\n  }\n  /**\n   * Finds the {@link AccessKeyView} associated with the accounts {@link PublicKey} stored in the {@link KeyStore}.\n   *\n   * @todo Find matching access key based on transaction (i.e. receiverId and actions)\n   *\n   * @param receiverId currently unused (see todo)\n   * @param actions currently unused (see todo)\n   * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`\n   */\n\n\n  async findAccessKey(receiverId, actions) {\n    // TODO: Find matching access key based on transaction (i.e. receiverId and actions)\n    const publicKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n\n    if (!publicKey) {\n      return null;\n    }\n\n    const cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];\n\n    if (cachedAccessKey !== undefined) {\n      return {\n        publicKey,\n        accessKey: cachedAccessKey\n      };\n    }\n\n    try {\n      const accessKey = await this.connection.provider.query({\n        request_type: 'view_access_key',\n        account_id: this.accountId,\n        public_key: publicKey.toString(),\n        finality: 'optimistic'\n      }); // this function can be called multiple times and retrieve the same access key\n      // this checks to see if the access key was already retrieved and cached while\n      // the above network call was in flight. To keep nonce values in line, we return\n      // the cached access key.\n\n      if (this.accessKeyByPublicKeyCache[publicKey.toString()]) {\n        return {\n          publicKey,\n          accessKey: this.accessKeyByPublicKeyCache[publicKey.toString()]\n        };\n      }\n\n      this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;\n      return {\n        publicKey,\n        accessKey\n      };\n    } catch (e) {\n      if (e.type == 'AccessKeyDoesNotExist') {\n        return null;\n      }\n\n      throw e;\n    }\n  }\n  /**\n   * Create a new account and deploy a contract to it\n   *\n   * @param contractId NEAR account where the contract is deployed\n   * @param publicKey The public key to add to the created contract account\n   * @param data The compiled contract code\n   * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking\n   */\n\n\n  async createAndDeployContract(contractId, publicKey, data, amount) {\n    const accessKey = transaction_1.fullAccessKey();\n    await this.signAndSendTransaction({\n      receiverId: contractId,\n      actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey), transaction_1.deployContract(data)]\n    });\n    const contractAccount = new Account(this.connection, contractId);\n    return contractAccount;\n  }\n  /**\n   * @param receiverId NEAR account receiving Ⓝ\n   * @param amount Amount to send in yoctoⓃ\n   */\n\n\n  async sendMoney(receiverId, amount) {\n    return this.signAndSendTransaction({\n      receiverId,\n      actions: [transaction_1.transfer(amount)]\n    });\n  }\n  /**\n   * @param newAccountId NEAR account name to be created\n   * @param publicKey A public key created from the masterAccount\n   */\n\n\n  async createAccount(newAccountId, publicKey, amount) {\n    const accessKey = transaction_1.fullAccessKey();\n    return this.signAndSendTransaction({\n      receiverId: newAccountId,\n      actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n    });\n  }\n  /**\n   * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted\n   */\n\n\n  async deleteAccount(beneficiaryId) {\n    return this.signAndSendTransaction({\n      receiverId: this.accountId,\n      actions: [transaction_1.deleteAccount(beneficiaryId)]\n    });\n  }\n  /**\n   * @param data The compiled contract code\n   */\n\n\n  async deployContract(data) {\n    return this.signAndSendTransaction({\n      receiverId: this.accountId,\n      actions: [transaction_1.deployContract(data)]\n    });\n  }\n\n  async functionCall() {\n    if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n      return this.functionCallV1(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2], arguments.length <= 3 ? undefined : arguments[3], arguments.length <= 4 ? undefined : arguments[4]);\n    } else {\n      return this.functionCallV2(arguments.length <= 0 ? undefined : arguments[0]);\n    }\n  }\n\n  functionCallV1(contractId, methodName, args, gas, amount) {\n    const deprecate = depd_1.default('Account.functionCall(contractId, methodName, args, gas, amount)');\n    deprecate('use `Account.functionCall(FunctionCallOptions)` instead');\n    args = args || {};\n    this.validateArgs(args);\n    return this.signAndSendTransaction({\n      receiverId: contractId,\n      actions: [transaction_1.functionCall(methodName, args, gas || constants_1.DEFAULT_FUNCTION_CALL_GAS, amount)]\n    });\n  }\n\n  functionCallV2(_ref2) {\n    let {\n      contractId,\n      methodName,\n      args = {},\n      gas = constants_1.DEFAULT_FUNCTION_CALL_GAS,\n      attachedDeposit,\n      walletMeta,\n      walletCallbackUrl,\n      stringify\n    } = _ref2;\n    this.validateArgs(args);\n    const stringifyArg = stringify === undefined ? transaction_1.stringifyJsonOrBytes : stringify;\n    return this.signAndSendTransaction({\n      receiverId: contractId,\n      actions: [transaction_1.functionCall(methodName, args, gas, attachedDeposit, stringifyArg)],\n      walletMeta,\n      walletCallbackUrl\n    });\n  }\n  /**\n   * @see {@link https://docs.near.org/docs/concepts/account#access-keys}\n   * @todo expand this API to support more options.\n   * @param publicKey A public key to be associated with the contract\n   * @param contractId NEAR account where the contract is deployed\n   * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.\n   * @param amount Payment in yoctoⓃ that is sent to the contract during this function call\n   */\n\n\n  async addKey(publicKey, contractId, methodNames, amount) {\n    if (!methodNames) {\n      methodNames = [];\n    }\n\n    if (!Array.isArray(methodNames)) {\n      methodNames = [methodNames];\n    }\n\n    let accessKey;\n\n    if (!contractId) {\n      accessKey = transaction_1.fullAccessKey();\n    } else {\n      accessKey = transaction_1.functionCallAccessKey(contractId, methodNames, amount);\n    }\n\n    return this.signAndSendTransaction({\n      receiverId: this.accountId,\n      actions: [transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n    });\n  }\n  /**\n   * @param publicKey The public key to be deleted\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n\n\n  async deleteKey(publicKey) {\n    return this.signAndSendTransaction({\n      receiverId: this.accountId,\n      actions: [transaction_1.deleteKey(key_pair_1.PublicKey.from(publicKey))]\n    });\n  }\n  /**\n   * @see {@link https://docs.near.org/docs/validator/staking-overview}\n   *\n   * @param publicKey The public key for the account that's staking\n   * @param amount The account to stake in yoctoⓃ\n   */\n\n\n  async stake(publicKey, amount) {\n    return this.signAndSendTransaction({\n      receiverId: this.accountId,\n      actions: [transaction_1.stake(amount, key_pair_1.PublicKey.from(publicKey))]\n    });\n  }\n  /** @hidden */\n\n\n  validateArgs(args) {\n    const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n\n    if (isUint8Array) {\n      return;\n    }\n\n    if (Array.isArray(args) || typeof args !== 'object') {\n      throw new errors_1.PositionalArgsError();\n    }\n  }\n  /**\n   * Invoke a contract view function using the RPC API.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}\n   *\n   * @param contractId NEAR account where the contract is deployed\n   * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n   * @param args Any arguments to the view contract method, wrapped in JSON\n   * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.\n   * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.\n   * @returns {Promise<any>}\n   */\n\n\n  async viewFunction(contractId, methodName) {\n    let args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let {\n      parse = parseJsonFromRawResponse,\n      stringify = bytesJsonStringify\n    } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    this.validateArgs(args);\n    const serializedArgs = stringify(args).toString('base64');\n    const result = await this.connection.provider.query({\n      request_type: 'call_function',\n      account_id: contractId,\n      method_name: methodName,\n      args_base64: serializedArgs,\n      finality: 'optimistic'\n    });\n\n    if (result.logs) {\n      this.printLogs(contractId, result.logs);\n    }\n\n    return result.result && result.result.length > 0 && parse(Buffer.from(result.result));\n  }\n  /**\n   * Returns the state (key value pairs) of this account's contract based on the key prefix.\n   * Pass an empty string for prefix if you would like to return the entire state.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-contract-state}\n   *\n   * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.\n   * @param blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n   */\n\n\n  async viewState(prefix) {\n    let blockQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      finality: 'optimistic'\n    };\n    const {\n      values\n    } = await this.connection.provider.query({\n      request_type: 'view_state',\n      ...blockQuery,\n      account_id: this.accountId,\n      prefix_base64: Buffer.from(prefix).toString('base64')\n    });\n    return values.map(_ref3 => {\n      let {\n        key,\n        value\n      } = _ref3;\n      return {\n        key: Buffer.from(key, 'base64'),\n        value: Buffer.from(value, 'base64')\n      };\n    });\n  }\n  /**\n   * Get all access keys for the account\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-access-key-list}\n   */\n\n\n  async getAccessKeys() {\n    const response = await this.connection.provider.query({\n      request_type: 'view_access_key_list',\n      account_id: this.accountId,\n      finality: 'optimistic'\n    }); // A breaking API change introduced extra information into the\n    // response, so it now returns an object with a `keys` field instead\n    // of an array: https://github.com/nearprotocol/nearcore/pull/1789\n\n    if (Array.isArray(response)) {\n      return response;\n    }\n\n    return response.keys;\n  }\n  /**\n   * Returns a list of authorized apps\n   * @todo update the response value to return all the different keys, not just app keys.\n   */\n\n\n  async getAccountDetails() {\n    // TODO: update the response value to return all the different keys, not just app keys.\n    // Also if we need this function, or getAccessKeys is good enough.\n    const accessKeys = await this.getAccessKeys();\n    const authorizedApps = accessKeys.filter(item => item.access_key.permission !== 'FullAccess').map(item => {\n      const perm = item.access_key.permission;\n      return {\n        contractId: perm.FunctionCall.receiver_id,\n        amount: perm.FunctionCall.allowance,\n        publicKey: item.public_key\n      };\n    });\n    return {\n      authorizedApps\n    };\n  }\n  /**\n   * Returns calculated account balance\n   */\n\n\n  async getAccountBalance() {\n    const protocolConfig = await this.connection.provider.experimental_protocolConfig({\n      finality: 'final'\n    });\n    const state = await this.state();\n    const costPerByte = new bn_js_1.default(protocolConfig.runtime_config.storage_amount_per_byte);\n    const stateStaked = new bn_js_1.default(state.storage_usage).mul(costPerByte);\n    const staked = new bn_js_1.default(state.locked);\n    const totalBalance = new bn_js_1.default(state.amount).add(staked);\n    const availableBalance = totalBalance.sub(bn_js_1.default.max(staked, stateStaked));\n    return {\n      total: totalBalance.toString(),\n      stateStaked: stateStaked.toString(),\n      staked: staked.toString(),\n      available: availableBalance.toString()\n    };\n  }\n\n}\n\nexports.Account = Account;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Account","bn_js_1","require","depd_1","transaction_1","providers_1","borsh_1","key_pair_1","errors_1","rpc_errors_1","constants_1","exponential_backoff_1","TX_NONCE_RETRY_NUMBER","TX_NONCE_RETRY_WAIT","TX_NONCE_RETRY_WAIT_BACKOFF","parseJsonFromRawResponse","response","JSON","parse","Buffer","from","toString","bytesJsonStringify","input","stringify","constructor","connection","accountId","accessKeyByPublicKeyCache","ready","deprecate","default","Promise","resolve","fetchState","state","provider","query","request_type","account_id","finality","printLogsAndFailures","contractId","results","process","env","result","console","log","receiptIds","length","join","printLogs","logs","failure","warn","prefix","signTransaction","receiverId","actions","accessKeyInfo","findAccessKey","TypedError","networkId","signer","accessKey","block","blockHash","header","hash","nonce","baseDecode","signAndSendTransaction","signAndSendTransactionV1","signAndSendTransactionV2","txHash","signedTx","publicKey","transaction","sendTransaction","error","type","logWarning","baseEncode","context","ErrorContext","flatLogs","transaction_outcome","receipts_outcome","reduce","acc","it","outcome","status","Failure","concat","receipt_ids","parseRpcError","error_message","error_type","id","parseResultError","getPublicKey","cachedAccessKey","undefined","public_key","e","createAndDeployContract","data","amount","fullAccessKey","createAccount","transfer","addKey","PublicKey","deployContract","contractAccount","sendMoney","newAccountId","deleteAccount","beneficiaryId","functionCall","functionCallV1","functionCallV2","methodName","args","gas","validateArgs","DEFAULT_FUNCTION_CALL_GAS","attachedDeposit","walletMeta","walletCallbackUrl","stringifyArg","stringifyJsonOrBytes","methodNames","Array","isArray","functionCallAccessKey","deleteKey","stake","isUint8Array","byteLength","PositionalArgsError","viewFunction","serializedArgs","method_name","args_base64","viewState","blockQuery","values","prefix_base64","map","key","getAccessKeys","keys","getAccountDetails","accessKeys","authorizedApps","filter","item","access_key","permission","perm","FunctionCall","receiver_id","allowance","getAccountBalance","protocolConfig","experimental_protocolConfig","costPerByte","runtime_config","storage_amount_per_byte","stateStaked","storage_usage","mul","staked","locked","totalBalance","add","availableBalance","sub","max","total","available"],"sources":["D:/Projects/verifiedprofilev3/node_modules/near-api-js/lib/account.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst depd_1 = __importDefault(require(\"depd\"));\nconst transaction_1 = require(\"./transaction\");\nconst providers_1 = require(\"./providers\");\nconst borsh_1 = require(\"borsh\");\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst errors_1 = require(\"./utils/errors\");\nconst rpc_errors_1 = require(\"./utils/rpc_errors\");\nconst constants_1 = require(\"./constants\");\nconst exponential_backoff_1 = __importDefault(require(\"./utils/exponential-backoff\"));\n// Default number of retries with different nonce before giving up on a transaction.\nconst TX_NONCE_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst TX_NONCE_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;\nfunction parseJsonFromRawResponse(response) {\n    return JSON.parse(Buffer.from(response).toString());\n}\nfunction bytesJsonStringify(input) {\n    return Buffer.from(JSON.stringify(input));\n}\n/**\n * This class provides common account related RPC calls including signing transactions with a {@link KeyPair}.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#account}\n * @hint Use {@link WalletConnection} in the browser to redirect to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for Account/key management using the {@link BrowserLocalStorageKeyStore}.\n * @see {@link https://nomicon.io/DataStructures/Account.html | Account Spec}\n */\nclass Account {\n    constructor(connection, accountId) {\n        /** @hidden */\n        this.accessKeyByPublicKeyCache = {};\n        this.connection = connection;\n        this.accountId = accountId;\n    }\n    /** @hidden */\n    get ready() {\n        const deprecate = depd_1.default('Account.ready()');\n        deprecate('not needed anymore, always ready');\n        return Promise.resolve();\n    }\n    async fetchState() {\n        const deprecate = depd_1.default('Account.fetchState()');\n        deprecate('use `Account.state()` instead');\n    }\n    /**\n     * Returns basic NEAR account information via the `view_account` RPC query method\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-account}\n     */\n    async state() {\n        return this.connection.provider.query({\n            request_type: 'view_account',\n            account_id: this.accountId,\n            finality: 'optimistic'\n        });\n    }\n    /** @hidden */\n    printLogsAndFailures(contractId, results) {\n        if (!process.env[\"NEAR_NO_LOGS\"]) {\n            for (const result of results) {\n                console.log(`Receipt${result.receiptIds.length > 1 ? 's' : ''}: ${result.receiptIds.join(', ')}`);\n                this.printLogs(contractId, result.logs, '\\t');\n                if (result.failure) {\n                    console.warn(`\\tFailure [${contractId}]: ${result.failure}`);\n                }\n            }\n        }\n    }\n    /** @hidden */\n    printLogs(contractId, logs, prefix = '') {\n        if (!process.env[\"NEAR_NO_LOGS\"]) {\n            for (const log of logs) {\n                console.log(`${prefix}Log [${contractId}]: ${log}`);\n            }\n        }\n    }\n    /**\n     * Create a signed transaction which can be broadcast to the network\n     * @param receiverId NEAR account receiving the transaction\n     * @param actions list of actions to perform as part of the transaction\n     * @see {@link JsonRpcProvider.sendTransaction}\n     */\n    async signTransaction(receiverId, actions) {\n        const accessKeyInfo = await this.findAccessKey(receiverId, actions);\n        if (!accessKeyInfo) {\n            throw new providers_1.TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair found in ${this.connection.signer}.`, 'KeyNotFound');\n        }\n        const { accessKey } = accessKeyInfo;\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockHash = block.header.hash;\n        const nonce = ++accessKey.nonce;\n        return await transaction_1.signTransaction(receiverId, nonce, actions, borsh_1.baseDecode(blockHash), this.connection.signer, this.accountId, this.connection.networkId);\n    }\n    signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            return this.signAndSendTransactionV1(args[0], args[1]);\n        }\n        else {\n            return this.signAndSendTransactionV2(args[0]);\n        }\n    }\n    signAndSendTransactionV1(receiverId, actions) {\n        const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n        deprecate('use `Account.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n        return this.signAndSendTransactionV2({ receiverId, actions });\n    }\n    async signAndSendTransactionV2({ receiverId, actions }) {\n        let txHash, signedTx;\n        // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)\n        const result = await exponential_backoff_1.default(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, async () => {\n            [txHash, signedTx] = await this.signTransaction(receiverId, actions);\n            const publicKey = signedTx.transaction.publicKey;\n            try {\n                return await this.connection.provider.sendTransaction(signedTx);\n            }\n            catch (error) {\n                if (error.type === 'InvalidNonce') {\n                    errors_1.logWarning(`Retrying transaction ${receiverId}:${borsh_1.baseEncode(txHash)} with new nonce.`);\n                    delete this.accessKeyByPublicKeyCache[publicKey.toString()];\n                    return null;\n                }\n                if (error.type === 'Expired') {\n                    errors_1.logWarning(`Retrying transaction ${receiverId}:${borsh_1.baseEncode(txHash)} due to expired block hash`);\n                    return null;\n                }\n                error.context = new providers_1.ErrorContext(borsh_1.baseEncode(txHash));\n                throw error;\n            }\n        });\n        if (!result) {\n            // TODO: This should have different code actually, as means \"transaction not submitted for sure\"\n            throw new providers_1.TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');\n        }\n        const flatLogs = [result.transaction_outcome, ...result.receipts_outcome].reduce((acc, it) => {\n            if (it.outcome.logs.length ||\n                (typeof it.outcome.status === 'object' && typeof it.outcome.status.Failure === 'object')) {\n                return acc.concat({\n                    'receiptIds': it.outcome.receipt_ids,\n                    'logs': it.outcome.logs,\n                    'failure': typeof it.outcome.status.Failure != 'undefined' ? rpc_errors_1.parseRpcError(it.outcome.status.Failure) : null\n                });\n            }\n            else\n                return acc;\n        }, []);\n        this.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);\n        if (typeof result.status === 'object' && typeof result.status.Failure === 'object') {\n            // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n            if (result.status.Failure.error_message && result.status.Failure.error_type) {\n                throw new providers_1.TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);\n            }\n            else {\n                throw rpc_errors_1.parseResultError(result);\n            }\n        }\n        // TODO: if Tx is Unknown or Started.\n        return result;\n    }\n    /**\n     * Finds the {@link AccessKeyView} associated with the accounts {@link PublicKey} stored in the {@link KeyStore}.\n     *\n     * @todo Find matching access key based on transaction (i.e. receiverId and actions)\n     *\n     * @param receiverId currently unused (see todo)\n     * @param actions currently unused (see todo)\n     * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`\n     */\n    async findAccessKey(receiverId, actions) {\n        // TODO: Find matching access key based on transaction (i.e. receiverId and actions)\n        const publicKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n        if (!publicKey) {\n            return null;\n        }\n        const cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];\n        if (cachedAccessKey !== undefined) {\n            return { publicKey, accessKey: cachedAccessKey };\n        }\n        try {\n            const accessKey = await this.connection.provider.query({\n                request_type: 'view_access_key',\n                account_id: this.accountId,\n                public_key: publicKey.toString(),\n                finality: 'optimistic'\n            });\n            // this function can be called multiple times and retrieve the same access key\n            // this checks to see if the access key was already retrieved and cached while\n            // the above network call was in flight. To keep nonce values in line, we return\n            // the cached access key.\n            if (this.accessKeyByPublicKeyCache[publicKey.toString()]) {\n                return { publicKey, accessKey: this.accessKeyByPublicKeyCache[publicKey.toString()] };\n            }\n            this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;\n            return { publicKey, accessKey };\n        }\n        catch (e) {\n            if (e.type == 'AccessKeyDoesNotExist') {\n                return null;\n            }\n            throw e;\n        }\n    }\n    /**\n     * Create a new account and deploy a contract to it\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param publicKey The public key to add to the created contract account\n     * @param data The compiled contract code\n     * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking\n     */\n    async createAndDeployContract(contractId, publicKey, data, amount) {\n        const accessKey = transaction_1.fullAccessKey();\n        await this.signAndSendTransaction({\n            receiverId: contractId,\n            actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey), transaction_1.deployContract(data)]\n        });\n        const contractAccount = new Account(this.connection, contractId);\n        return contractAccount;\n    }\n    /**\n     * @param receiverId NEAR account receiving Ⓝ\n     * @param amount Amount to send in yoctoⓃ\n     */\n    async sendMoney(receiverId, amount) {\n        return this.signAndSendTransaction({\n            receiverId,\n            actions: [transaction_1.transfer(amount)]\n        });\n    }\n    /**\n     * @param newAccountId NEAR account name to be created\n     * @param publicKey A public key created from the masterAccount\n     */\n    async createAccount(newAccountId, publicKey, amount) {\n        const accessKey = transaction_1.fullAccessKey();\n        return this.signAndSendTransaction({\n            receiverId: newAccountId,\n            actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n        });\n    }\n    /**\n     * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted\n     */\n    async deleteAccount(beneficiaryId) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.deleteAccount(beneficiaryId)]\n        });\n    }\n    /**\n     * @param data The compiled contract code\n     */\n    async deployContract(data) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.deployContract(data)]\n        });\n    }\n    async functionCall(...args) {\n        if (typeof args[0] === 'string') {\n            return this.functionCallV1(args[0], args[1], args[2], args[3], args[4]);\n        }\n        else {\n            return this.functionCallV2(args[0]);\n        }\n    }\n    functionCallV1(contractId, methodName, args, gas, amount) {\n        const deprecate = depd_1.default('Account.functionCall(contractId, methodName, args, gas, amount)');\n        deprecate('use `Account.functionCall(FunctionCallOptions)` instead');\n        args = args || {};\n        this.validateArgs(args);\n        return this.signAndSendTransaction({\n            receiverId: contractId,\n            actions: [transaction_1.functionCall(methodName, args, gas || constants_1.DEFAULT_FUNCTION_CALL_GAS, amount)]\n        });\n    }\n    functionCallV2({ contractId, methodName, args = {}, gas = constants_1.DEFAULT_FUNCTION_CALL_GAS, attachedDeposit, walletMeta, walletCallbackUrl, stringify }) {\n        this.validateArgs(args);\n        const stringifyArg = stringify === undefined ? transaction_1.stringifyJsonOrBytes : stringify;\n        return this.signAndSendTransaction({\n            receiverId: contractId,\n            actions: [transaction_1.functionCall(methodName, args, gas, attachedDeposit, stringifyArg)],\n            walletMeta,\n            walletCallbackUrl\n        });\n    }\n    /**\n     * @see {@link https://docs.near.org/docs/concepts/account#access-keys}\n     * @todo expand this API to support more options.\n     * @param publicKey A public key to be associated with the contract\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.\n     * @param amount Payment in yoctoⓃ that is sent to the contract during this function call\n     */\n    async addKey(publicKey, contractId, methodNames, amount) {\n        if (!methodNames) {\n            methodNames = [];\n        }\n        if (!Array.isArray(methodNames)) {\n            methodNames = [methodNames];\n        }\n        let accessKey;\n        if (!contractId) {\n            accessKey = transaction_1.fullAccessKey();\n        }\n        else {\n            accessKey = transaction_1.functionCallAccessKey(contractId, methodNames, amount);\n        }\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n        });\n    }\n    /**\n     * @param publicKey The public key to be deleted\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async deleteKey(publicKey) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.deleteKey(key_pair_1.PublicKey.from(publicKey))]\n        });\n    }\n    /**\n     * @see {@link https://docs.near.org/docs/validator/staking-overview}\n     *\n     * @param publicKey The public key for the account that's staking\n     * @param amount The account to stake in yoctoⓃ\n     */\n    async stake(publicKey, amount) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.stake(amount, key_pair_1.PublicKey.from(publicKey))]\n        });\n    }\n    /** @hidden */\n    validateArgs(args) {\n        const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n        if (isUint8Array) {\n            return;\n        }\n        if (Array.isArray(args) || typeof args !== 'object') {\n            throw new errors_1.PositionalArgsError();\n        }\n    }\n    /**\n     * Invoke a contract view function using the RPC API.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n     * @param args Any arguments to the view contract method, wrapped in JSON\n     * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.\n     * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.\n     * @returns {Promise<any>}\n     */\n    async viewFunction(contractId, methodName, args = {}, { parse = parseJsonFromRawResponse, stringify = bytesJsonStringify } = {}) {\n        this.validateArgs(args);\n        const serializedArgs = stringify(args).toString('base64');\n        const result = await this.connection.provider.query({\n            request_type: 'call_function',\n            account_id: contractId,\n            method_name: methodName,\n            args_base64: serializedArgs,\n            finality: 'optimistic'\n        });\n        if (result.logs) {\n            this.printLogs(contractId, result.logs);\n        }\n        return result.result && result.result.length > 0 && parse(Buffer.from(result.result));\n    }\n    /**\n     * Returns the state (key value pairs) of this account's contract based on the key prefix.\n     * Pass an empty string for prefix if you would like to return the entire state.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-contract-state}\n     *\n     * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.\n     * @param blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n     */\n    async viewState(prefix, blockQuery = { finality: 'optimistic' }) {\n        const { values } = await this.connection.provider.query({\n            request_type: 'view_state',\n            ...blockQuery,\n            account_id: this.accountId,\n            prefix_base64: Buffer.from(prefix).toString('base64')\n        });\n        return values.map(({ key, value }) => ({\n            key: Buffer.from(key, 'base64'),\n            value: Buffer.from(value, 'base64')\n        }));\n    }\n    /**\n     * Get all access keys for the account\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-access-key-list}\n     */\n    async getAccessKeys() {\n        const response = await this.connection.provider.query({\n            request_type: 'view_access_key_list',\n            account_id: this.accountId,\n            finality: 'optimistic'\n        });\n        // A breaking API change introduced extra information into the\n        // response, so it now returns an object with a `keys` field instead\n        // of an array: https://github.com/nearprotocol/nearcore/pull/1789\n        if (Array.isArray(response)) {\n            return response;\n        }\n        return response.keys;\n    }\n    /**\n     * Returns a list of authorized apps\n     * @todo update the response value to return all the different keys, not just app keys.\n     */\n    async getAccountDetails() {\n        // TODO: update the response value to return all the different keys, not just app keys.\n        // Also if we need this function, or getAccessKeys is good enough.\n        const accessKeys = await this.getAccessKeys();\n        const authorizedApps = accessKeys\n            .filter(item => item.access_key.permission !== 'FullAccess')\n            .map(item => {\n            const perm = item.access_key.permission;\n            return {\n                contractId: perm.FunctionCall.receiver_id,\n                amount: perm.FunctionCall.allowance,\n                publicKey: item.public_key,\n            };\n        });\n        return { authorizedApps };\n    }\n    /**\n     * Returns calculated account balance\n     */\n    async getAccountBalance() {\n        const protocolConfig = await this.connection.provider.experimental_protocolConfig({ finality: 'final' });\n        const state = await this.state();\n        const costPerByte = new bn_js_1.default(protocolConfig.runtime_config.storage_amount_per_byte);\n        const stateStaked = new bn_js_1.default(state.storage_usage).mul(costPerByte);\n        const staked = new bn_js_1.default(state.locked);\n        const totalBalance = new bn_js_1.default(state.amount).add(staked);\n        const availableBalance = totalBalance.sub(bn_js_1.default.max(staked, stateStaked));\n        return {\n            total: totalBalance.toString(),\n            stateStaked: stateStaked.toString(),\n            staked: staked.toString(),\n            available: availableBalance.toString()\n        };\n    }\n}\nexports.Account = Account;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}