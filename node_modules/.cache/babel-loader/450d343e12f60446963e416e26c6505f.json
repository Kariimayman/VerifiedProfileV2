{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MergeKeyStore = void 0;\n\nvar keystore_1 = require(\"./keystore\");\n\nvar MergeKeyStore = /*#__PURE__*/function (_keystore_1$KeyStore) {\n  _inherits(MergeKeyStore, _keystore_1$KeyStore);\n\n  var _super = _createSuper(MergeKeyStore);\n\n  /**\n   * @param keyStores read calls are attempted from start to end of array\n   * @param options.writeKeyStoreIndex the keystore index that will receive all write calls\n   */\n  function MergeKeyStore(keyStores) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      writeKeyStoreIndex: 0\n    };\n\n    _classCallCheck(this, MergeKeyStore);\n\n    _this = _super.call(this);\n    _this.options = options;\n    _this.keyStores = keyStores;\n    return _this;\n  }\n  /**\n   * Store a {@link KeyPain} to the first index of a key store array\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n\n\n  _createClass(MergeKeyStore, [{\n    key: \"setKey\",\n    value: function () {\n      var _setKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(networkId, accountId, keyPair) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.keyStores[this.options.writeKeyStoreIndex].setKey(networkId, accountId, keyPair);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setKey(_x, _x2, _x3) {\n        return _setKey.apply(this, arguments);\n      }\n\n      return setKey;\n    }()\n    /**\n     * Gets a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n\n  }, {\n    key: \"getKey\",\n    value: function () {\n      var _getKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(networkId, accountId) {\n        var _iterator, _step, keyStore, keyPair;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(this.keyStores);\n                _context2.prev = 1;\n\n                _iterator.s();\n\n              case 3:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                keyStore = _step.value;\n                _context2.next = 7;\n                return keyStore.getKey(networkId, accountId);\n\n              case 7:\n                keyPair = _context2.sent;\n\n                if (!keyPair) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", keyPair);\n\n              case 10:\n                _context2.next = 3;\n                break;\n\n              case 12:\n                _context2.next = 17;\n                break;\n\n              case 14:\n                _context2.prev = 14;\n                _context2.t0 = _context2[\"catch\"](1);\n\n                _iterator.e(_context2.t0);\n\n              case 17:\n                _context2.prev = 17;\n\n                _iterator.f();\n\n                return _context2.finish(17);\n\n              case 20:\n                return _context2.abrupt(\"return\", null);\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 14, 17, 20]]);\n      }));\n\n      function getKey(_x4, _x5) {\n        return _getKey.apply(this, arguments);\n      }\n\n      return getKey;\n    }()\n    /**\n     * Removes a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n\n  }, {\n    key: \"removeKey\",\n    value: function () {\n      var _removeKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(networkId, accountId) {\n        var _iterator2, _step2, keyStore;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _iterator2 = _createForOfIteratorHelper(this.keyStores);\n                _context3.prev = 1;\n\n                _iterator2.s();\n\n              case 3:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                keyStore = _step2.value;\n                _context3.next = 7;\n                return keyStore.removeKey(networkId, accountId);\n\n              case 7:\n                _context3.next = 3;\n                break;\n\n              case 9:\n                _context3.next = 14;\n                break;\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](1);\n\n                _iterator2.e(_context3.t0);\n\n              case 14:\n                _context3.prev = 14;\n\n                _iterator2.f();\n\n                return _context3.finish(14);\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 11, 14, 17]]);\n      }));\n\n      function removeKey(_x6, _x7) {\n        return _removeKey.apply(this, arguments);\n      }\n\n      return removeKey;\n    }()\n    /**\n     * Removes all items from each key store\n     */\n\n  }, {\n    key: \"clear\",\n    value: function () {\n      var _clear = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _iterator3, _step3, keyStore;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _iterator3 = _createForOfIteratorHelper(this.keyStores);\n                _context4.prev = 1;\n\n                _iterator3.s();\n\n              case 3:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                keyStore = _step3.value;\n                _context4.next = 7;\n                return keyStore.clear();\n\n              case 7:\n                _context4.next = 3;\n                break;\n\n              case 9:\n                _context4.next = 14;\n                break;\n\n              case 11:\n                _context4.prev = 11;\n                _context4.t0 = _context4[\"catch\"](1);\n\n                _iterator3.e(_context4.t0);\n\n              case 14:\n                _context4.prev = 14;\n\n                _iterator3.f();\n\n                return _context4.finish(14);\n\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 11, 14, 17]]);\n      }));\n\n      function clear() {\n        return _clear.apply(this, arguments);\n      }\n\n      return clear;\n    }()\n    /**\n     * Get the network(s) from the array of key stores\n     * @returns {Promise<string[]>}\n     */\n\n  }, {\n    key: \"getNetworks\",\n    value: function () {\n      var _getNetworks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var result, _iterator4, _step4, keyStore, _iterator5, _step5, network;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                result = new Set();\n                _iterator4 = _createForOfIteratorHelper(this.keyStores);\n                _context5.prev = 2;\n\n                _iterator4.s();\n\n              case 4:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                keyStore = _step4.value;\n                _context5.t0 = _createForOfIteratorHelper;\n                _context5.next = 9;\n                return keyStore.getNetworks();\n\n              case 9:\n                _context5.t1 = _context5.sent;\n                _iterator5 = (0, _context5.t0)(_context5.t1);\n\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    network = _step5.value;\n                    result.add(network);\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n\n              case 12:\n                _context5.next = 4;\n                break;\n\n              case 14:\n                _context5.next = 19;\n                break;\n\n              case 16:\n                _context5.prev = 16;\n                _context5.t2 = _context5[\"catch\"](2);\n\n                _iterator4.e(_context5.t2);\n\n              case 19:\n                _context5.prev = 19;\n\n                _iterator4.f();\n\n                return _context5.finish(19);\n\n              case 22:\n                return _context5.abrupt(\"return\", Array.from(result));\n\n              case 23:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[2, 16, 19, 22]]);\n      }));\n\n      function getNetworks() {\n        return _getNetworks.apply(this, arguments);\n      }\n\n      return getNetworks;\n    }()\n    /**\n     * Gets the account(s) from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n\n  }, {\n    key: \"getAccounts\",\n    value: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(networkId) {\n        var result, _iterator6, _step6, keyStore, _iterator7, _step7, account;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                result = new Set();\n                _iterator6 = _createForOfIteratorHelper(this.keyStores);\n                _context6.prev = 2;\n\n                _iterator6.s();\n\n              case 4:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context6.next = 14;\n                  break;\n                }\n\n                keyStore = _step6.value;\n                _context6.t0 = _createForOfIteratorHelper;\n                _context6.next = 9;\n                return keyStore.getAccounts(networkId);\n\n              case 9:\n                _context6.t1 = _context6.sent;\n                _iterator7 = (0, _context6.t0)(_context6.t1);\n\n                try {\n                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                    account = _step7.value;\n                    result.add(account);\n                  }\n                } catch (err) {\n                  _iterator7.e(err);\n                } finally {\n                  _iterator7.f();\n                }\n\n              case 12:\n                _context6.next = 4;\n                break;\n\n              case 14:\n                _context6.next = 19;\n                break;\n\n              case 16:\n                _context6.prev = 16;\n                _context6.t2 = _context6[\"catch\"](2);\n\n                _iterator6.e(_context6.t2);\n\n              case 19:\n                _context6.prev = 19;\n\n                _iterator6.f();\n\n                return _context6.finish(19);\n\n              case 22:\n                return _context6.abrupt(\"return\", Array.from(result));\n\n              case 23:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[2, 16, 19, 22]]);\n      }));\n\n      function getAccounts(_x8) {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }()\n    /** @hidden */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"MergeKeyStore(\".concat(this.keyStores.join(', '), \")\");\n    }\n  }]);\n\n  return MergeKeyStore;\n}(keystore_1.KeyStore);\n\nexports.MergeKeyStore = MergeKeyStore;","map":{"version":3,"names":["Object","defineProperty","exports","value","MergeKeyStore","keystore_1","require","keyStores","options","writeKeyStoreIndex","networkId","accountId","keyPair","setKey","keyStore","getKey","removeKey","clear","result","Set","getNetworks","network","add","Array","from","getAccounts","account","join","KeyStore"],"sources":["D:/Projects/verifiedprofilev2/node_modules/near-api-js/lib/key_stores/merge_key_store.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MergeKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nclass MergeKeyStore extends keystore_1.KeyStore {\n    /**\n     * @param keyStores read calls are attempted from start to end of array\n     * @param options.writeKeyStoreIndex the keystore index that will receive all write calls\n     */\n    constructor(keyStores, options = { writeKeyStoreIndex: 0 }) {\n        super();\n        this.options = options;\n        this.keyStores = keyStores;\n    }\n    /**\n     * Store a {@link KeyPain} to the first index of a key store array\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    async setKey(networkId, accountId, keyPair) {\n        await this.keyStores[this.options.writeKeyStoreIndex].setKey(networkId, accountId, keyPair);\n    }\n    /**\n     * Gets a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    async getKey(networkId, accountId) {\n        for (const keyStore of this.keyStores) {\n            const keyPair = await keyStore.getKey(networkId, accountId);\n            if (keyPair) {\n                return keyPair;\n            }\n        }\n        return null;\n    }\n    /**\n     * Removes a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    async removeKey(networkId, accountId) {\n        for (const keyStore of this.keyStores) {\n            await keyStore.removeKey(networkId, accountId);\n        }\n    }\n    /**\n     * Removes all items from each key store\n     */\n    async clear() {\n        for (const keyStore of this.keyStores) {\n            await keyStore.clear();\n        }\n    }\n    /**\n     * Get the network(s) from the array of key stores\n     * @returns {Promise<string[]>}\n     */\n    async getNetworks() {\n        const result = new Set();\n        for (const keyStore of this.keyStores) {\n            for (const network of await keyStore.getNetworks()) {\n                result.add(network);\n            }\n        }\n        return Array.from(result);\n    }\n    /**\n     * Gets the account(s) from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    async getAccounts(networkId) {\n        const result = new Set();\n        for (const keyStore of this.keyStores) {\n            for (const account of await keyStore.getAccounts(networkId)) {\n                result.add(account);\n            }\n        }\n        return Array.from(result);\n    }\n    /** @hidden */\n    toString() {\n        return `MergeKeyStore(${this.keyStores.join(', ')})`;\n    }\n}\nexports.MergeKeyStore = MergeKeyStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}