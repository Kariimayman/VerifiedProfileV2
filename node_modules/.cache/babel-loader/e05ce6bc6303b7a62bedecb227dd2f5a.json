{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _toConsumableArray = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = void 0;\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar depd_1 = __importDefault(require(\"depd\"));\n\nvar transaction_1 = require(\"./transaction\");\n\nvar providers_1 = require(\"./providers\");\n\nvar borsh_1 = require(\"borsh\");\n\nvar key_pair_1 = require(\"./utils/key_pair\");\n\nvar errors_1 = require(\"./utils/errors\");\n\nvar rpc_errors_1 = require(\"./utils/rpc_errors\");\n\nvar constants_1 = require(\"./constants\");\n\nvar exponential_backoff_1 = __importDefault(require(\"./utils/exponential-backoff\")); // Default number of retries with different nonce before giving up on a transaction.\n\n\nvar TX_NONCE_RETRY_NUMBER = 12; // Default wait until next retry in millis.\n\nvar TX_NONCE_RETRY_WAIT = 500; // Exponential back off for waiting to retry.\n\nvar TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;\n\nfunction parseJsonFromRawResponse(response) {\n  return JSON.parse(Buffer.from(response).toString());\n}\n\nfunction bytesJsonStringify(input) {\n  return Buffer.from(JSON.stringify(input));\n}\n/**\n * This class provides common account related RPC calls including signing transactions with a {@link KeyPair}.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#account}\n * @hint Use {@link WalletConnection} in the browser to redirect to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for Account/key management using the {@link BrowserLocalStorageKeyStore}.\n * @see {@link https://nomicon.io/DataStructures/Account.html | Account Spec}\n */\n\n\nvar Account = /*#__PURE__*/function () {\n  function Account(connection, accountId) {\n    _classCallCheck(this, Account);\n\n    /** @hidden */\n    this.accessKeyByPublicKeyCache = {};\n    this.connection = connection;\n    this.accountId = accountId;\n  }\n  /** @hidden */\n\n\n  _createClass(Account, [{\n    key: \"ready\",\n    get: function get() {\n      var deprecate = depd_1.default('Account.ready()');\n      deprecate('not needed anymore, always ready');\n      return Promise.resolve();\n    }\n  }, {\n    key: \"fetchState\",\n    value: function () {\n      var _fetchState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var deprecate;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                deprecate = depd_1.default('Account.fetchState()');\n                deprecate('use `Account.state()` instead');\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function fetchState() {\n        return _fetchState.apply(this, arguments);\n      }\n\n      return fetchState;\n    }()\n    /**\n     * Returns basic NEAR account information via the `view_account` RPC query method\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-account}\n     */\n\n  }, {\n    key: \"state\",\n    value: function () {\n      var _state = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.connection.provider.query({\n                  request_type: 'view_account',\n                  account_id: this.accountId,\n                  finality: 'optimistic'\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function state() {\n        return _state.apply(this, arguments);\n      }\n\n      return state;\n    }()\n    /** @hidden */\n\n  }, {\n    key: \"printLogsAndFailures\",\n    value: function printLogsAndFailures(contractId, results) {\n      if (!process.env[\"NEAR_NO_LOGS\"]) {\n        var _iterator = _createForOfIteratorHelper(results),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var result = _step.value;\n            console.log(\"Receipt\".concat(result.receiptIds.length > 1 ? 's' : '', \": \").concat(result.receiptIds.join(', ')));\n            this.printLogs(contractId, result.logs, '\\t');\n\n            if (result.failure) {\n              console.warn(\"\\tFailure [\".concat(contractId, \"]: \").concat(result.failure));\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n    /** @hidden */\n\n  }, {\n    key: \"printLogs\",\n    value: function printLogs(contractId, logs) {\n      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n      if (!process.env[\"NEAR_NO_LOGS\"]) {\n        var _iterator2 = _createForOfIteratorHelper(logs),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var log = _step2.value;\n            console.log(\"\".concat(prefix, \"Log [\").concat(contractId, \"]: \").concat(log));\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n    /**\n     * Create a signed transaction which can be broadcast to the network\n     * @param receiverId NEAR account receiving the transaction\n     * @param actions list of actions to perform as part of the transaction\n     * @see {@link JsonRpcProvider.sendTransaction}\n     */\n\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(receiverId, actions) {\n        var accessKeyInfo, accessKey, block, blockHash, nonce;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.findAccessKey(receiverId, actions);\n\n              case 2:\n                accessKeyInfo = _context3.sent;\n\n                if (accessKeyInfo) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new providers_1.TypedError(\"Can not sign transactions for account \".concat(this.accountId, \" on network \").concat(this.connection.networkId, \", no matching key pair found in \").concat(this.connection.signer, \".\"), 'KeyNotFound');\n\n              case 5:\n                accessKey = accessKeyInfo.accessKey;\n                _context3.next = 8;\n                return this.connection.provider.block({\n                  finality: 'final'\n                });\n\n              case 8:\n                block = _context3.sent;\n                blockHash = block.header.hash;\n                nonce = ++accessKey.nonce;\n                _context3.next = 13;\n                return transaction_1.signTransaction(receiverId, nonce, actions, borsh_1.baseDecode(blockHash), this.connection.signer, this.accountId, this.connection.networkId);\n\n              case 13:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function signTransaction(_x, _x2) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }()\n  }, {\n    key: \"signAndSendTransaction\",\n    value: function signAndSendTransaction() {\n      if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n        return this.signAndSendTransactionV1(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);\n      } else {\n        return this.signAndSendTransactionV2(arguments.length <= 0 ? undefined : arguments[0]);\n      }\n    }\n  }, {\n    key: \"signAndSendTransactionV1\",\n    value: function signAndSendTransactionV1(receiverId, actions) {\n      var deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n      deprecate('use `Account.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n      return this.signAndSendTransactionV2({\n        receiverId: receiverId,\n        actions: actions\n      });\n    }\n  }, {\n    key: \"signAndSendTransactionV2\",\n    value: function () {\n      var _signAndSendTransactionV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref) {\n        var _this = this;\n\n        var receiverId, actions, txHash, signedTx, result, flatLogs;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                receiverId = _ref.receiverId, actions = _ref.actions;\n                _context5.next = 3;\n                return exponential_backoff_1.default(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                  var _yield$_this$signTran, _yield$_this$signTran2, publicKey;\n\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return _this.signTransaction(receiverId, actions);\n\n                        case 2:\n                          _yield$_this$signTran = _context4.sent;\n                          _yield$_this$signTran2 = _slicedToArray(_yield$_this$signTran, 2);\n                          txHash = _yield$_this$signTran2[0];\n                          signedTx = _yield$_this$signTran2[1];\n                          publicKey = signedTx.transaction.publicKey;\n                          _context4.prev = 7;\n                          _context4.next = 10;\n                          return _this.connection.provider.sendTransaction(signedTx);\n\n                        case 10:\n                          return _context4.abrupt(\"return\", _context4.sent);\n\n                        case 13:\n                          _context4.prev = 13;\n                          _context4.t0 = _context4[\"catch\"](7);\n\n                          if (!(_context4.t0.type === 'InvalidNonce')) {\n                            _context4.next = 19;\n                            break;\n                          }\n\n                          errors_1.logWarning(\"Retrying transaction \".concat(receiverId, \":\").concat(borsh_1.baseEncode(txHash), \" with new nonce.\"));\n                          delete _this.accessKeyByPublicKeyCache[publicKey.toString()];\n                          return _context4.abrupt(\"return\", null);\n\n                        case 19:\n                          if (!(_context4.t0.type === 'Expired')) {\n                            _context4.next = 22;\n                            break;\n                          }\n\n                          errors_1.logWarning(\"Retrying transaction \".concat(receiverId, \":\").concat(borsh_1.baseEncode(txHash), \" due to expired block hash\"));\n                          return _context4.abrupt(\"return\", null);\n\n                        case 22:\n                          _context4.t0.context = new providers_1.ErrorContext(borsh_1.baseEncode(txHash));\n                          throw _context4.t0;\n\n                        case 24:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4, null, [[7, 13]]);\n                })));\n\n              case 3:\n                result = _context5.sent;\n\n                if (result) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                throw new providers_1.TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');\n\n              case 6:\n                flatLogs = [result.transaction_outcome].concat(_toConsumableArray(result.receipts_outcome)).reduce(function (acc, it) {\n                  if (it.outcome.logs.length || typeof it.outcome.status === 'object' && typeof it.outcome.status.Failure === 'object') {\n                    return acc.concat({\n                      'receiptIds': it.outcome.receipt_ids,\n                      'logs': it.outcome.logs,\n                      'failure': typeof it.outcome.status.Failure != 'undefined' ? rpc_errors_1.parseRpcError(it.outcome.status.Failure) : null\n                    });\n                  } else return acc;\n                }, []);\n                this.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);\n\n                if (!(typeof result.status === 'object' && typeof result.status.Failure === 'object')) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                if (!(result.status.Failure.error_message && result.status.Failure.error_type)) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                throw new providers_1.TypedError(\"Transaction \".concat(result.transaction_outcome.id, \" failed. \").concat(result.status.Failure.error_message), result.status.Failure.error_type);\n\n              case 13:\n                throw rpc_errors_1.parseResultError(result);\n\n              case 14:\n                return _context5.abrupt(\"return\", result);\n\n              case 15:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function signAndSendTransactionV2(_x3) {\n        return _signAndSendTransactionV.apply(this, arguments);\n      }\n\n      return signAndSendTransactionV2;\n    }()\n    /**\n     * Finds the {@link AccessKeyView} associated with the accounts {@link PublicKey} stored in the {@link KeyStore}.\n     *\n     * @todo Find matching access key based on transaction (i.e. receiverId and actions)\n     *\n     * @param receiverId currently unused (see todo)\n     * @param actions currently unused (see todo)\n     * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`\n     */\n\n  }, {\n    key: \"findAccessKey\",\n    value: function () {\n      var _findAccessKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(receiverId, actions) {\n        var publicKey, cachedAccessKey, accessKey;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n\n              case 2:\n                publicKey = _context6.sent;\n\n                if (publicKey) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", null);\n\n              case 5:\n                cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];\n\n                if (!(cachedAccessKey !== undefined)) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", {\n                  publicKey: publicKey,\n                  accessKey: cachedAccessKey\n                });\n\n              case 8:\n                _context6.prev = 8;\n                _context6.next = 11;\n                return this.connection.provider.query({\n                  request_type: 'view_access_key',\n                  account_id: this.accountId,\n                  public_key: publicKey.toString(),\n                  finality: 'optimistic'\n                });\n\n              case 11:\n                accessKey = _context6.sent;\n\n                if (!this.accessKeyByPublicKeyCache[publicKey.toString()]) {\n                  _context6.next = 14;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", {\n                  publicKey: publicKey,\n                  accessKey: this.accessKeyByPublicKeyCache[publicKey.toString()]\n                });\n\n              case 14:\n                this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;\n                return _context6.abrupt(\"return\", {\n                  publicKey: publicKey,\n                  accessKey: accessKey\n                });\n\n              case 18:\n                _context6.prev = 18;\n                _context6.t0 = _context6[\"catch\"](8);\n\n                if (!(_context6.t0.type == 'AccessKeyDoesNotExist')) {\n                  _context6.next = 22;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", null);\n\n              case 22:\n                throw _context6.t0;\n\n              case 23:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[8, 18]]);\n      }));\n\n      function findAccessKey(_x4, _x5) {\n        return _findAccessKey.apply(this, arguments);\n      }\n\n      return findAccessKey;\n    }()\n    /**\n     * Create a new account and deploy a contract to it\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param publicKey The public key to add to the created contract account\n     * @param data The compiled contract code\n     * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking\n     */\n\n  }, {\n    key: \"createAndDeployContract\",\n    value: function () {\n      var _createAndDeployContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(contractId, publicKey, data, amount) {\n        var accessKey, contractAccount;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                accessKey = transaction_1.fullAccessKey();\n                _context7.next = 3;\n                return this.signAndSendTransaction({\n                  receiverId: contractId,\n                  actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey), transaction_1.deployContract(data)]\n                });\n\n              case 3:\n                contractAccount = new Account(this.connection, contractId);\n                return _context7.abrupt(\"return\", contractAccount);\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function createAndDeployContract(_x6, _x7, _x8, _x9) {\n        return _createAndDeployContract.apply(this, arguments);\n      }\n\n      return createAndDeployContract;\n    }()\n    /**\n     * @param receiverId NEAR account receiving Ⓝ\n     * @param amount Amount to send in yoctoⓃ\n     */\n\n  }, {\n    key: \"sendMoney\",\n    value: function () {\n      var _sendMoney = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(receiverId, amount) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: receiverId,\n                  actions: [transaction_1.transfer(amount)]\n                }));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function sendMoney(_x10, _x11) {\n        return _sendMoney.apply(this, arguments);\n      }\n\n      return sendMoney;\n    }()\n    /**\n     * @param newAccountId NEAR account name to be created\n     * @param publicKey A public key created from the masterAccount\n     */\n\n  }, {\n    key: \"createAccount\",\n    value: function () {\n      var _createAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(newAccountId, publicKey, amount) {\n        var accessKey;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                accessKey = transaction_1.fullAccessKey();\n                return _context9.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: newAccountId,\n                  actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n                }));\n\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function createAccount(_x12, _x13, _x14) {\n        return _createAccount.apply(this, arguments);\n      }\n\n      return createAccount;\n    }()\n    /**\n     * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted\n     */\n\n  }, {\n    key: \"deleteAccount\",\n    value: function () {\n      var _deleteAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(beneficiaryId) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: this.accountId,\n                  actions: [transaction_1.deleteAccount(beneficiaryId)]\n                }));\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function deleteAccount(_x15) {\n        return _deleteAccount.apply(this, arguments);\n      }\n\n      return deleteAccount;\n    }()\n    /**\n     * @param data The compiled contract code\n     */\n\n  }, {\n    key: \"deployContract\",\n    value: function () {\n      var _deployContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(data) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: this.accountId,\n                  actions: [transaction_1.deployContract(data)]\n                }));\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function deployContract(_x16) {\n        return _deployContract.apply(this, arguments);\n      }\n\n      return deployContract;\n    }()\n  }, {\n    key: \"functionCall\",\n    value: function () {\n      var _functionCall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var _args12 = arguments;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (!(typeof (_args12.length <= 0 ? undefined : _args12[0]) === 'string')) {\n                  _context12.next = 4;\n                  break;\n                }\n\n                return _context12.abrupt(\"return\", this.functionCallV1(_args12.length <= 0 ? undefined : _args12[0], _args12.length <= 1 ? undefined : _args12[1], _args12.length <= 2 ? undefined : _args12[2], _args12.length <= 3 ? undefined : _args12[3], _args12.length <= 4 ? undefined : _args12[4]));\n\n              case 4:\n                return _context12.abrupt(\"return\", this.functionCallV2(_args12.length <= 0 ? undefined : _args12[0]));\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function functionCall() {\n        return _functionCall.apply(this, arguments);\n      }\n\n      return functionCall;\n    }()\n  }, {\n    key: \"functionCallV1\",\n    value: function functionCallV1(contractId, methodName, args, gas, amount) {\n      var deprecate = depd_1.default('Account.functionCall(contractId, methodName, args, gas, amount)');\n      deprecate('use `Account.functionCall(FunctionCallOptions)` instead');\n      args = args || {};\n      this.validateArgs(args);\n      return this.signAndSendTransaction({\n        receiverId: contractId,\n        actions: [transaction_1.functionCall(methodName, args, gas || constants_1.DEFAULT_FUNCTION_CALL_GAS, amount)]\n      });\n    }\n  }, {\n    key: \"functionCallV2\",\n    value: function functionCallV2(_ref3) {\n      var contractId = _ref3.contractId,\n          methodName = _ref3.methodName,\n          _ref3$args = _ref3.args,\n          args = _ref3$args === void 0 ? {} : _ref3$args,\n          _ref3$gas = _ref3.gas,\n          gas = _ref3$gas === void 0 ? constants_1.DEFAULT_FUNCTION_CALL_GAS : _ref3$gas,\n          attachedDeposit = _ref3.attachedDeposit,\n          walletMeta = _ref3.walletMeta,\n          walletCallbackUrl = _ref3.walletCallbackUrl,\n          stringify = _ref3.stringify;\n      this.validateArgs(args);\n      var stringifyArg = stringify === undefined ? transaction_1.stringifyJsonOrBytes : stringify;\n      return this.signAndSendTransaction({\n        receiverId: contractId,\n        actions: [transaction_1.functionCall(methodName, args, gas, attachedDeposit, stringifyArg)],\n        walletMeta: walletMeta,\n        walletCallbackUrl: walletCallbackUrl\n      });\n    }\n    /**\n     * @see {@link https://docs.near.org/docs/concepts/account#access-keys}\n     * @todo expand this API to support more options.\n     * @param publicKey A public key to be associated with the contract\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.\n     * @param amount Payment in yoctoⓃ that is sent to the contract during this function call\n     */\n\n  }, {\n    key: \"addKey\",\n    value: function () {\n      var _addKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(publicKey, contractId, methodNames, amount) {\n        var accessKey;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (!methodNames) {\n                  methodNames = [];\n                }\n\n                if (!Array.isArray(methodNames)) {\n                  methodNames = [methodNames];\n                }\n\n                if (!contractId) {\n                  accessKey = transaction_1.fullAccessKey();\n                } else {\n                  accessKey = transaction_1.functionCallAccessKey(contractId, methodNames, amount);\n                }\n\n                return _context13.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: this.accountId,\n                  actions: [transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n                }));\n\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function addKey(_x17, _x18, _x19, _x20) {\n        return _addKey.apply(this, arguments);\n      }\n\n      return addKey;\n    }()\n    /**\n     * @param publicKey The public key to be deleted\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n\n  }, {\n    key: \"deleteKey\",\n    value: function () {\n      var _deleteKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(publicKey) {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                return _context14.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: this.accountId,\n                  actions: [transaction_1.deleteKey(key_pair_1.PublicKey.from(publicKey))]\n                }));\n\n              case 1:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function deleteKey(_x21) {\n        return _deleteKey.apply(this, arguments);\n      }\n\n      return deleteKey;\n    }()\n    /**\n     * @see {@link https://docs.near.org/docs/validator/staking-overview}\n     *\n     * @param publicKey The public key for the account that's staking\n     * @param amount The account to stake in yoctoⓃ\n     */\n\n  }, {\n    key: \"stake\",\n    value: function () {\n      var _stake = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(publicKey, amount) {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                return _context15.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: this.accountId,\n                  actions: [transaction_1.stake(amount, key_pair_1.PublicKey.from(publicKey))]\n                }));\n\n              case 1:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function stake(_x22, _x23) {\n        return _stake.apply(this, arguments);\n      }\n\n      return stake;\n    }()\n    /** @hidden */\n\n  }, {\n    key: \"validateArgs\",\n    value: function validateArgs(args) {\n      var isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n\n      if (isUint8Array) {\n        return;\n      }\n\n      if (Array.isArray(args) || typeof args !== 'object') {\n        throw new errors_1.PositionalArgsError();\n      }\n    }\n    /**\n     * Invoke a contract view function using the RPC API.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n     * @param args Any arguments to the view contract method, wrapped in JSON\n     * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.\n     * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.\n     * @returns {Promise<any>}\n     */\n\n  }, {\n    key: \"viewFunction\",\n    value: function () {\n      var _viewFunction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(contractId, methodName) {\n        var args,\n            _ref4,\n            _ref4$parse,\n            parse,\n            _ref4$stringify,\n            stringify,\n            serializedArgs,\n            result,\n            _args16 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                args = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : {};\n                _ref4 = _args16.length > 3 && _args16[3] !== undefined ? _args16[3] : {}, _ref4$parse = _ref4.parse, parse = _ref4$parse === void 0 ? parseJsonFromRawResponse : _ref4$parse, _ref4$stringify = _ref4.stringify, stringify = _ref4$stringify === void 0 ? bytesJsonStringify : _ref4$stringify;\n                this.validateArgs(args);\n                serializedArgs = stringify(args).toString('base64');\n                _context16.next = 6;\n                return this.connection.provider.query({\n                  request_type: 'call_function',\n                  account_id: contractId,\n                  method_name: methodName,\n                  args_base64: serializedArgs,\n                  finality: 'optimistic'\n                });\n\n              case 6:\n                result = _context16.sent;\n\n                if (result.logs) {\n                  this.printLogs(contractId, result.logs);\n                }\n\n                return _context16.abrupt(\"return\", result.result && result.result.length > 0 && parse(Buffer.from(result.result)));\n\n              case 9:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function viewFunction(_x24, _x25) {\n        return _viewFunction.apply(this, arguments);\n      }\n\n      return viewFunction;\n    }()\n    /**\n     * Returns the state (key value pairs) of this account's contract based on the key prefix.\n     * Pass an empty string for prefix if you would like to return the entire state.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-contract-state}\n     *\n     * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.\n     * @param blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n     */\n\n  }, {\n    key: \"viewState\",\n    value: function () {\n      var _viewState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(prefix) {\n        var blockQuery,\n            _yield$this$connectio,\n            values,\n            _args17 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                blockQuery = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {\n                  finality: 'optimistic'\n                };\n                _context17.next = 3;\n                return this.connection.provider.query(_objectSpread(_objectSpread({\n                  request_type: 'view_state'\n                }, blockQuery), {}, {\n                  account_id: this.accountId,\n                  prefix_base64: Buffer.from(prefix).toString('base64')\n                }));\n\n              case 3:\n                _yield$this$connectio = _context17.sent;\n                values = _yield$this$connectio.values;\n                return _context17.abrupt(\"return\", values.map(function (_ref5) {\n                  var key = _ref5.key,\n                      value = _ref5.value;\n                  return {\n                    key: Buffer.from(key, 'base64'),\n                    value: Buffer.from(value, 'base64')\n                  };\n                }));\n\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function viewState(_x26) {\n        return _viewState.apply(this, arguments);\n      }\n\n      return viewState;\n    }()\n    /**\n     * Get all access keys for the account\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-access-key-list}\n     */\n\n  }, {\n    key: \"getAccessKeys\",\n    value: function () {\n      var _getAccessKeys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.connection.provider.query({\n                  request_type: 'view_access_key_list',\n                  account_id: this.accountId,\n                  finality: 'optimistic'\n                });\n\n              case 2:\n                response = _context18.sent;\n\n                if (!Array.isArray(response)) {\n                  _context18.next = 5;\n                  break;\n                }\n\n                return _context18.abrupt(\"return\", response);\n\n              case 5:\n                return _context18.abrupt(\"return\", response.keys);\n\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function getAccessKeys() {\n        return _getAccessKeys.apply(this, arguments);\n      }\n\n      return getAccessKeys;\n    }()\n    /**\n     * Returns a list of authorized apps\n     * @todo update the response value to return all the different keys, not just app keys.\n     */\n\n  }, {\n    key: \"getAccountDetails\",\n    value: function () {\n      var _getAccountDetails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n        var accessKeys, authorizedApps;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this.getAccessKeys();\n\n              case 2:\n                accessKeys = _context19.sent;\n                authorizedApps = accessKeys.filter(function (item) {\n                  return item.access_key.permission !== 'FullAccess';\n                }).map(function (item) {\n                  var perm = item.access_key.permission;\n                  return {\n                    contractId: perm.FunctionCall.receiver_id,\n                    amount: perm.FunctionCall.allowance,\n                    publicKey: item.public_key\n                  };\n                });\n                return _context19.abrupt(\"return\", {\n                  authorizedApps: authorizedApps\n                });\n\n              case 5:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function getAccountDetails() {\n        return _getAccountDetails.apply(this, arguments);\n      }\n\n      return getAccountDetails;\n    }()\n    /**\n     * Returns calculated account balance\n     */\n\n  }, {\n    key: \"getAccountBalance\",\n    value: function () {\n      var _getAccountBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n        var protocolConfig, state, costPerByte, stateStaked, staked, totalBalance, availableBalance;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this.connection.provider.experimental_protocolConfig({\n                  finality: 'final'\n                });\n\n              case 2:\n                protocolConfig = _context20.sent;\n                _context20.next = 5;\n                return this.state();\n\n              case 5:\n                state = _context20.sent;\n                costPerByte = new bn_js_1.default(protocolConfig.runtime_config.storage_amount_per_byte);\n                stateStaked = new bn_js_1.default(state.storage_usage).mul(costPerByte);\n                staked = new bn_js_1.default(state.locked);\n                totalBalance = new bn_js_1.default(state.amount).add(staked);\n                availableBalance = totalBalance.sub(bn_js_1.default.max(staked, stateStaked));\n                return _context20.abrupt(\"return\", {\n                  total: totalBalance.toString(),\n                  stateStaked: stateStaked.toString(),\n                  staked: staked.toString(),\n                  available: availableBalance.toString()\n                });\n\n              case 12:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function getAccountBalance() {\n        return _getAccountBalance.apply(this, arguments);\n      }\n\n      return getAccountBalance;\n    }()\n  }]);\n\n  return Account;\n}();\n\nexports.Account = Account;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Account","bn_js_1","require","depd_1","transaction_1","providers_1","borsh_1","key_pair_1","errors_1","rpc_errors_1","constants_1","exponential_backoff_1","TX_NONCE_RETRY_NUMBER","TX_NONCE_RETRY_WAIT","TX_NONCE_RETRY_WAIT_BACKOFF","parseJsonFromRawResponse","response","JSON","parse","Buffer","from","toString","bytesJsonStringify","input","stringify","connection","accountId","accessKeyByPublicKeyCache","deprecate","default","Promise","resolve","provider","query","request_type","account_id","finality","contractId","results","process","env","result","console","log","receiptIds","length","join","printLogs","logs","failure","warn","prefix","receiverId","actions","findAccessKey","accessKeyInfo","TypedError","networkId","signer","accessKey","block","blockHash","header","hash","nonce","signTransaction","baseDecode","signAndSendTransactionV1","signAndSendTransactionV2","txHash","signedTx","publicKey","transaction","sendTransaction","type","logWarning","baseEncode","context","ErrorContext","flatLogs","transaction_outcome","receipts_outcome","reduce","acc","it","outcome","status","Failure","concat","receipt_ids","parseRpcError","printLogsAndFailures","error_message","error_type","id","parseResultError","getPublicKey","cachedAccessKey","undefined","public_key","data","amount","fullAccessKey","signAndSendTransaction","createAccount","transfer","addKey","PublicKey","deployContract","contractAccount","newAccountId","beneficiaryId","deleteAccount","functionCallV1","functionCallV2","methodName","args","gas","validateArgs","functionCall","DEFAULT_FUNCTION_CALL_GAS","attachedDeposit","walletMeta","walletCallbackUrl","stringifyArg","stringifyJsonOrBytes","methodNames","Array","isArray","functionCallAccessKey","deleteKey","stake","isUint8Array","byteLength","PositionalArgsError","serializedArgs","method_name","args_base64","blockQuery","prefix_base64","values","map","key","keys","getAccessKeys","accessKeys","authorizedApps","filter","item","access_key","permission","perm","FunctionCall","receiver_id","allowance","experimental_protocolConfig","protocolConfig","state","costPerByte","runtime_config","storage_amount_per_byte","stateStaked","storage_usage","mul","staked","locked","totalBalance","add","availableBalance","sub","max","total","available"],"sources":["D:/Projects/verifiedprofilev2/node_modules/near-api-js/lib/account.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst depd_1 = __importDefault(require(\"depd\"));\nconst transaction_1 = require(\"./transaction\");\nconst providers_1 = require(\"./providers\");\nconst borsh_1 = require(\"borsh\");\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst errors_1 = require(\"./utils/errors\");\nconst rpc_errors_1 = require(\"./utils/rpc_errors\");\nconst constants_1 = require(\"./constants\");\nconst exponential_backoff_1 = __importDefault(require(\"./utils/exponential-backoff\"));\n// Default number of retries with different nonce before giving up on a transaction.\nconst TX_NONCE_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst TX_NONCE_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;\nfunction parseJsonFromRawResponse(response) {\n    return JSON.parse(Buffer.from(response).toString());\n}\nfunction bytesJsonStringify(input) {\n    return Buffer.from(JSON.stringify(input));\n}\n/**\n * This class provides common account related RPC calls including signing transactions with a {@link KeyPair}.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#account}\n * @hint Use {@link WalletConnection} in the browser to redirect to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for Account/key management using the {@link BrowserLocalStorageKeyStore}.\n * @see {@link https://nomicon.io/DataStructures/Account.html | Account Spec}\n */\nclass Account {\n    constructor(connection, accountId) {\n        /** @hidden */\n        this.accessKeyByPublicKeyCache = {};\n        this.connection = connection;\n        this.accountId = accountId;\n    }\n    /** @hidden */\n    get ready() {\n        const deprecate = depd_1.default('Account.ready()');\n        deprecate('not needed anymore, always ready');\n        return Promise.resolve();\n    }\n    async fetchState() {\n        const deprecate = depd_1.default('Account.fetchState()');\n        deprecate('use `Account.state()` instead');\n    }\n    /**\n     * Returns basic NEAR account information via the `view_account` RPC query method\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-account}\n     */\n    async state() {\n        return this.connection.provider.query({\n            request_type: 'view_account',\n            account_id: this.accountId,\n            finality: 'optimistic'\n        });\n    }\n    /** @hidden */\n    printLogsAndFailures(contractId, results) {\n        if (!process.env[\"NEAR_NO_LOGS\"]) {\n            for (const result of results) {\n                console.log(`Receipt${result.receiptIds.length > 1 ? 's' : ''}: ${result.receiptIds.join(', ')}`);\n                this.printLogs(contractId, result.logs, '\\t');\n                if (result.failure) {\n                    console.warn(`\\tFailure [${contractId}]: ${result.failure}`);\n                }\n            }\n        }\n    }\n    /** @hidden */\n    printLogs(contractId, logs, prefix = '') {\n        if (!process.env[\"NEAR_NO_LOGS\"]) {\n            for (const log of logs) {\n                console.log(`${prefix}Log [${contractId}]: ${log}`);\n            }\n        }\n    }\n    /**\n     * Create a signed transaction which can be broadcast to the network\n     * @param receiverId NEAR account receiving the transaction\n     * @param actions list of actions to perform as part of the transaction\n     * @see {@link JsonRpcProvider.sendTransaction}\n     */\n    async signTransaction(receiverId, actions) {\n        const accessKeyInfo = await this.findAccessKey(receiverId, actions);\n        if (!accessKeyInfo) {\n            throw new providers_1.TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair found in ${this.connection.signer}.`, 'KeyNotFound');\n        }\n        const { accessKey } = accessKeyInfo;\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockHash = block.header.hash;\n        const nonce = ++accessKey.nonce;\n        return await transaction_1.signTransaction(receiverId, nonce, actions, borsh_1.baseDecode(blockHash), this.connection.signer, this.accountId, this.connection.networkId);\n    }\n    signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            return this.signAndSendTransactionV1(args[0], args[1]);\n        }\n        else {\n            return this.signAndSendTransactionV2(args[0]);\n        }\n    }\n    signAndSendTransactionV1(receiverId, actions) {\n        const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n        deprecate('use `Account.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n        return this.signAndSendTransactionV2({ receiverId, actions });\n    }\n    async signAndSendTransactionV2({ receiverId, actions }) {\n        let txHash, signedTx;\n        // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)\n        const result = await exponential_backoff_1.default(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, async () => {\n            [txHash, signedTx] = await this.signTransaction(receiverId, actions);\n            const publicKey = signedTx.transaction.publicKey;\n            try {\n                return await this.connection.provider.sendTransaction(signedTx);\n            }\n            catch (error) {\n                if (error.type === 'InvalidNonce') {\n                    errors_1.logWarning(`Retrying transaction ${receiverId}:${borsh_1.baseEncode(txHash)} with new nonce.`);\n                    delete this.accessKeyByPublicKeyCache[publicKey.toString()];\n                    return null;\n                }\n                if (error.type === 'Expired') {\n                    errors_1.logWarning(`Retrying transaction ${receiverId}:${borsh_1.baseEncode(txHash)} due to expired block hash`);\n                    return null;\n                }\n                error.context = new providers_1.ErrorContext(borsh_1.baseEncode(txHash));\n                throw error;\n            }\n        });\n        if (!result) {\n            // TODO: This should have different code actually, as means \"transaction not submitted for sure\"\n            throw new providers_1.TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');\n        }\n        const flatLogs = [result.transaction_outcome, ...result.receipts_outcome].reduce((acc, it) => {\n            if (it.outcome.logs.length ||\n                (typeof it.outcome.status === 'object' && typeof it.outcome.status.Failure === 'object')) {\n                return acc.concat({\n                    'receiptIds': it.outcome.receipt_ids,\n                    'logs': it.outcome.logs,\n                    'failure': typeof it.outcome.status.Failure != 'undefined' ? rpc_errors_1.parseRpcError(it.outcome.status.Failure) : null\n                });\n            }\n            else\n                return acc;\n        }, []);\n        this.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);\n        if (typeof result.status === 'object' && typeof result.status.Failure === 'object') {\n            // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n            if (result.status.Failure.error_message && result.status.Failure.error_type) {\n                throw new providers_1.TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);\n            }\n            else {\n                throw rpc_errors_1.parseResultError(result);\n            }\n        }\n        // TODO: if Tx is Unknown or Started.\n        return result;\n    }\n    /**\n     * Finds the {@link AccessKeyView} associated with the accounts {@link PublicKey} stored in the {@link KeyStore}.\n     *\n     * @todo Find matching access key based on transaction (i.e. receiverId and actions)\n     *\n     * @param receiverId currently unused (see todo)\n     * @param actions currently unused (see todo)\n     * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`\n     */\n    async findAccessKey(receiverId, actions) {\n        // TODO: Find matching access key based on transaction (i.e. receiverId and actions)\n        const publicKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n        if (!publicKey) {\n            return null;\n        }\n        const cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];\n        if (cachedAccessKey !== undefined) {\n            return { publicKey, accessKey: cachedAccessKey };\n        }\n        try {\n            const accessKey = await this.connection.provider.query({\n                request_type: 'view_access_key',\n                account_id: this.accountId,\n                public_key: publicKey.toString(),\n                finality: 'optimistic'\n            });\n            // this function can be called multiple times and retrieve the same access key\n            // this checks to see if the access key was already retrieved and cached while\n            // the above network call was in flight. To keep nonce values in line, we return\n            // the cached access key.\n            if (this.accessKeyByPublicKeyCache[publicKey.toString()]) {\n                return { publicKey, accessKey: this.accessKeyByPublicKeyCache[publicKey.toString()] };\n            }\n            this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;\n            return { publicKey, accessKey };\n        }\n        catch (e) {\n            if (e.type == 'AccessKeyDoesNotExist') {\n                return null;\n            }\n            throw e;\n        }\n    }\n    /**\n     * Create a new account and deploy a contract to it\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param publicKey The public key to add to the created contract account\n     * @param data The compiled contract code\n     * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking\n     */\n    async createAndDeployContract(contractId, publicKey, data, amount) {\n        const accessKey = transaction_1.fullAccessKey();\n        await this.signAndSendTransaction({\n            receiverId: contractId,\n            actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey), transaction_1.deployContract(data)]\n        });\n        const contractAccount = new Account(this.connection, contractId);\n        return contractAccount;\n    }\n    /**\n     * @param receiverId NEAR account receiving Ⓝ\n     * @param amount Amount to send in yoctoⓃ\n     */\n    async sendMoney(receiverId, amount) {\n        return this.signAndSendTransaction({\n            receiverId,\n            actions: [transaction_1.transfer(amount)]\n        });\n    }\n    /**\n     * @param newAccountId NEAR account name to be created\n     * @param publicKey A public key created from the masterAccount\n     */\n    async createAccount(newAccountId, publicKey, amount) {\n        const accessKey = transaction_1.fullAccessKey();\n        return this.signAndSendTransaction({\n            receiverId: newAccountId,\n            actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n        });\n    }\n    /**\n     * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted\n     */\n    async deleteAccount(beneficiaryId) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.deleteAccount(beneficiaryId)]\n        });\n    }\n    /**\n     * @param data The compiled contract code\n     */\n    async deployContract(data) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.deployContract(data)]\n        });\n    }\n    async functionCall(...args) {\n        if (typeof args[0] === 'string') {\n            return this.functionCallV1(args[0], args[1], args[2], args[3], args[4]);\n        }\n        else {\n            return this.functionCallV2(args[0]);\n        }\n    }\n    functionCallV1(contractId, methodName, args, gas, amount) {\n        const deprecate = depd_1.default('Account.functionCall(contractId, methodName, args, gas, amount)');\n        deprecate('use `Account.functionCall(FunctionCallOptions)` instead');\n        args = args || {};\n        this.validateArgs(args);\n        return this.signAndSendTransaction({\n            receiverId: contractId,\n            actions: [transaction_1.functionCall(methodName, args, gas || constants_1.DEFAULT_FUNCTION_CALL_GAS, amount)]\n        });\n    }\n    functionCallV2({ contractId, methodName, args = {}, gas = constants_1.DEFAULT_FUNCTION_CALL_GAS, attachedDeposit, walletMeta, walletCallbackUrl, stringify }) {\n        this.validateArgs(args);\n        const stringifyArg = stringify === undefined ? transaction_1.stringifyJsonOrBytes : stringify;\n        return this.signAndSendTransaction({\n            receiverId: contractId,\n            actions: [transaction_1.functionCall(methodName, args, gas, attachedDeposit, stringifyArg)],\n            walletMeta,\n            walletCallbackUrl\n        });\n    }\n    /**\n     * @see {@link https://docs.near.org/docs/concepts/account#access-keys}\n     * @todo expand this API to support more options.\n     * @param publicKey A public key to be associated with the contract\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.\n     * @param amount Payment in yoctoⓃ that is sent to the contract during this function call\n     */\n    async addKey(publicKey, contractId, methodNames, amount) {\n        if (!methodNames) {\n            methodNames = [];\n        }\n        if (!Array.isArray(methodNames)) {\n            methodNames = [methodNames];\n        }\n        let accessKey;\n        if (!contractId) {\n            accessKey = transaction_1.fullAccessKey();\n        }\n        else {\n            accessKey = transaction_1.functionCallAccessKey(contractId, methodNames, amount);\n        }\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n        });\n    }\n    /**\n     * @param publicKey The public key to be deleted\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async deleteKey(publicKey) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.deleteKey(key_pair_1.PublicKey.from(publicKey))]\n        });\n    }\n    /**\n     * @see {@link https://docs.near.org/docs/validator/staking-overview}\n     *\n     * @param publicKey The public key for the account that's staking\n     * @param amount The account to stake in yoctoⓃ\n     */\n    async stake(publicKey, amount) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.stake(amount, key_pair_1.PublicKey.from(publicKey))]\n        });\n    }\n    /** @hidden */\n    validateArgs(args) {\n        const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n        if (isUint8Array) {\n            return;\n        }\n        if (Array.isArray(args) || typeof args !== 'object') {\n            throw new errors_1.PositionalArgsError();\n        }\n    }\n    /**\n     * Invoke a contract view function using the RPC API.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n     * @param args Any arguments to the view contract method, wrapped in JSON\n     * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.\n     * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.\n     * @returns {Promise<any>}\n     */\n    async viewFunction(contractId, methodName, args = {}, { parse = parseJsonFromRawResponse, stringify = bytesJsonStringify } = {}) {\n        this.validateArgs(args);\n        const serializedArgs = stringify(args).toString('base64');\n        const result = await this.connection.provider.query({\n            request_type: 'call_function',\n            account_id: contractId,\n            method_name: methodName,\n            args_base64: serializedArgs,\n            finality: 'optimistic'\n        });\n        if (result.logs) {\n            this.printLogs(contractId, result.logs);\n        }\n        return result.result && result.result.length > 0 && parse(Buffer.from(result.result));\n    }\n    /**\n     * Returns the state (key value pairs) of this account's contract based on the key prefix.\n     * Pass an empty string for prefix if you would like to return the entire state.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-contract-state}\n     *\n     * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.\n     * @param blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n     */\n    async viewState(prefix, blockQuery = { finality: 'optimistic' }) {\n        const { values } = await this.connection.provider.query({\n            request_type: 'view_state',\n            ...blockQuery,\n            account_id: this.accountId,\n            prefix_base64: Buffer.from(prefix).toString('base64')\n        });\n        return values.map(({ key, value }) => ({\n            key: Buffer.from(key, 'base64'),\n            value: Buffer.from(value, 'base64')\n        }));\n    }\n    /**\n     * Get all access keys for the account\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-access-key-list}\n     */\n    async getAccessKeys() {\n        const response = await this.connection.provider.query({\n            request_type: 'view_access_key_list',\n            account_id: this.accountId,\n            finality: 'optimistic'\n        });\n        // A breaking API change introduced extra information into the\n        // response, so it now returns an object with a `keys` field instead\n        // of an array: https://github.com/nearprotocol/nearcore/pull/1789\n        if (Array.isArray(response)) {\n            return response;\n        }\n        return response.keys;\n    }\n    /**\n     * Returns a list of authorized apps\n     * @todo update the response value to return all the different keys, not just app keys.\n     */\n    async getAccountDetails() {\n        // TODO: update the response value to return all the different keys, not just app keys.\n        // Also if we need this function, or getAccessKeys is good enough.\n        const accessKeys = await this.getAccessKeys();\n        const authorizedApps = accessKeys\n            .filter(item => item.access_key.permission !== 'FullAccess')\n            .map(item => {\n            const perm = item.access_key.permission;\n            return {\n                contractId: perm.FunctionCall.receiver_id,\n                amount: perm.FunctionCall.allowance,\n                publicKey: item.public_key,\n            };\n        });\n        return { authorizedApps };\n    }\n    /**\n     * Returns calculated account balance\n     */\n    async getAccountBalance() {\n        const protocolConfig = await this.connection.provider.experimental_protocolConfig({ finality: 'final' });\n        const state = await this.state();\n        const costPerByte = new bn_js_1.default(protocolConfig.runtime_config.storage_amount_per_byte);\n        const stateStaked = new bn_js_1.default(state.storage_usage).mul(costPerByte);\n        const staked = new bn_js_1.default(state.locked);\n        const totalBalance = new bn_js_1.default(state.amount).add(staked);\n        const availableBalance = totalBalance.sub(bn_js_1.default.max(staked, stateStaked));\n        return {\n            total: totalBalance.toString(),\n            stateStaked: stateStaked.toString(),\n            staked: staked.toString(),\n            available: availableBalance.toString()\n        };\n    }\n}\nexports.Account = Account;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}