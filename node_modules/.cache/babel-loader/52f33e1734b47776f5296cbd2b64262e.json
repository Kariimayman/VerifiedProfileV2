{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Connection = void 0;\n\nvar providers_1 = require(\"./providers\");\n\nvar signer_1 = require(\"./signer\");\n/**\n * @param config Contains connection info details\n * @returns {Provider}\n */\n\n\nfunction getProvider(config) {\n  switch (config.type) {\n    case undefined:\n      return config;\n\n    case 'JsonRpcProvider':\n      return new providers_1.JsonRpcProvider(config.args.url);\n\n    default:\n      throw new Error(\"Unknown provider type \".concat(config.type));\n  }\n}\n/**\n * @param config Contains connection info details\n * @returns {Signer}\n */\n\n\nfunction getSigner(config) {\n  switch (config.type) {\n    case undefined:\n      return config;\n\n    case 'InMemorySigner':\n      {\n        return new signer_1.InMemorySigner(config.keyStore);\n      }\n\n    default:\n      throw new Error(\"Unknown signer type \".concat(config.type));\n  }\n}\n/**\n * Connects an account to a given network via a given provider\n */\n\n\nvar Connection = /*#__PURE__*/function () {\n  function Connection(networkId, provider, signer) {\n    _classCallCheck(this, Connection);\n\n    this.networkId = networkId;\n    this.provider = provider;\n    this.signer = signer;\n  }\n  /**\n   * @param config Contains connection info details\n   */\n\n\n  _createClass(Connection, null, [{\n    key: \"fromConfig\",\n    value: function fromConfig(config) {\n      var provider = getProvider(config.provider);\n      var signer = getSigner(config.signer);\n      return new Connection(config.networkId, provider, signer);\n    }\n  }]);\n\n  return Connection;\n}();\n\nexports.Connection = Connection;","map":{"version":3,"names":["Object","defineProperty","exports","value","Connection","providers_1","require","signer_1","getProvider","config","type","undefined","JsonRpcProvider","args","url","Error","getSigner","InMemorySigner","keyStore","networkId","provider","signer"],"sources":["D:/Projects/verifiedprofilev2/node_modules/near-api-js/lib/connection.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Connection = void 0;\nconst providers_1 = require(\"./providers\");\nconst signer_1 = require(\"./signer\");\n/**\n * @param config Contains connection info details\n * @returns {Provider}\n */\nfunction getProvider(config) {\n    switch (config.type) {\n        case undefined:\n            return config;\n        case 'JsonRpcProvider': return new providers_1.JsonRpcProvider(config.args.url);\n        default: throw new Error(`Unknown provider type ${config.type}`);\n    }\n}\n/**\n * @param config Contains connection info details\n * @returns {Signer}\n */\nfunction getSigner(config) {\n    switch (config.type) {\n        case undefined:\n            return config;\n        case 'InMemorySigner': {\n            return new signer_1.InMemorySigner(config.keyStore);\n        }\n        default: throw new Error(`Unknown signer type ${config.type}`);\n    }\n}\n/**\n * Connects an account to a given network via a given provider\n */\nclass Connection {\n    constructor(networkId, provider, signer) {\n        this.networkId = networkId;\n        this.provider = provider;\n        this.signer = signer;\n    }\n    /**\n     * @param config Contains connection info details\n     */\n    static fromConfig(config) {\n        const provider = getProvider(config.provider);\n        const signer = getSigner(config.signer);\n        return new Connection(config.networkId, provider, signer);\n    }\n}\nexports.Connection = Connection;\n"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,IAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBC,MAArB,EAA6B;EACzB,QAAQA,MAAM,CAACC,IAAf;IACI,KAAKC,SAAL;MACI,OAAOF,MAAP;;IACJ,KAAK,iBAAL;MAAwB,OAAO,IAAIJ,WAAW,CAACO,eAAhB,CAAgCH,MAAM,CAACI,IAAP,CAAYC,GAA5C,CAAP;;IACxB;MAAS,MAAM,IAAIC,KAAJ,iCAAmCN,MAAM,CAACC,IAA1C,EAAN;EAJb;AAMH;AACD;AACA;AACA;AACA;;;AACA,SAASM,SAAT,CAAmBP,MAAnB,EAA2B;EACvB,QAAQA,MAAM,CAACC,IAAf;IACI,KAAKC,SAAL;MACI,OAAOF,MAAP;;IACJ,KAAK,gBAAL;MAAuB;QACnB,OAAO,IAAIF,QAAQ,CAACU,cAAb,CAA4BR,MAAM,CAACS,QAAnC,CAAP;MACH;;IACD;MAAS,MAAM,IAAIH,KAAJ,+BAAiCN,MAAM,CAACC,IAAxC,EAAN;EANb;AAQH;AACD;AACA;AACA;;;IACMN,U;EACF,oBAAYe,SAAZ,EAAuBC,QAAvB,EAAiCC,MAAjC,EAAyC;IAAA;;IACrC,KAAKF,SAAL,GAAiBA,SAAjB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,MAAL,GAAcA,MAAd;EACH;EACD;AACJ;AACA;;;;;WACI,oBAAkBZ,MAAlB,EAA0B;MACtB,IAAMW,QAAQ,GAAGZ,WAAW,CAACC,MAAM,CAACW,QAAR,CAA5B;MACA,IAAMC,MAAM,GAAGL,SAAS,CAACP,MAAM,CAACY,MAAR,CAAxB;MACA,OAAO,IAAIjB,UAAJ,CAAeK,MAAM,CAACU,SAAtB,EAAiCC,QAAjC,EAA2CC,MAA3C,CAAP;IACH;;;;;;AAELnB,OAAO,CAACE,UAAR,GAAqBA,UAArB"},"metadata":{},"sourceType":"script"}