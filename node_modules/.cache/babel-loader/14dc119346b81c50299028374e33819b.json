{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _createForOfIteratorHelper = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _defineProperty = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account2FA = exports.AccountMultisig = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar depd_1 = __importDefault(require(\"depd\"));\n\nvar account_1 = require(\"./account\");\n\nvar format_1 = require(\"./utils/format\");\n\nvar key_pair_1 = require(\"./utils/key_pair\");\n\nvar transaction_1 = require(\"./transaction\");\n\nvar web_1 = require(\"./utils/web\");\n\nexports.MULTISIG_STORAGE_KEY = '__multisigRequest';\nexports.MULTISIG_ALLOWANCE = new bn_js_1.default(format_1.parseNearAmount('1')); // TODO: Different gas value for different requests (can reduce gas usage dramatically)\n\nexports.MULTISIG_GAS = new bn_js_1.default('100000000000000');\nexports.MULTISIG_DEPOSIT = new bn_js_1.default('0');\nexports.MULTISIG_CHANGE_METHODS = ['add_request', 'add_request_and_confirm', 'delete_request', 'confirm'];\nexports.MULTISIG_CONFIRM_METHODS = ['confirm']; // in memory request cache for node w/o localStorage\n\nvar storageFallback = _defineProperty({}, exports.MULTISIG_STORAGE_KEY, null);\n\nvar AccountMultisig = /*#__PURE__*/function (_account_1$Account) {\n  _inherits(AccountMultisig, _account_1$Account);\n\n  var _super = _createSuper(AccountMultisig);\n\n  function AccountMultisig(connection, accountId, options) {\n    var _this;\n\n    _classCallCheck(this, AccountMultisig);\n\n    _this = _super.call(this, connection, accountId);\n    _this.storage = options.storage;\n    _this.onAddRequestResult = options.onAddRequestResult;\n    return _this;\n  }\n\n  _createClass(AccountMultisig, [{\n    key: \"signAndSendTransactionWithAccount\",\n    value: function () {\n      var _signAndSendTransactionWithAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(receiverId, actions) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", _get(_getPrototypeOf(AccountMultisig.prototype), \"signAndSendTransaction\", this).call(this, {\n                  receiverId: receiverId,\n                  actions: actions\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function signAndSendTransactionWithAccount(_x, _x2) {\n        return _signAndSendTransactionWithAccount.apply(this, arguments);\n      }\n\n      return signAndSendTransactionWithAccount;\n    }()\n  }, {\n    key: \"signAndSendTransaction\",\n    value: function signAndSendTransaction() {\n      if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n        return this._signAndSendTransaction({\n          receiverId: arguments.length <= 0 ? undefined : arguments[0],\n          actions: arguments.length <= 1 ? undefined : arguments[1]\n        });\n      }\n\n      return this._signAndSendTransaction(arguments.length <= 0 ? undefined : arguments[0]);\n    }\n  }, {\n    key: \"_signAndSendTransaction\",\n    value: function () {\n      var _signAndSendTransaction2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref) {\n        var receiverId, actions, accountId, args, result, status;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                receiverId = _ref.receiverId, actions = _ref.actions;\n                accountId = this.accountId;\n                args = Buffer.from(JSON.stringify({\n                  request: {\n                    receiver_id: receiverId,\n                    actions: convertActions(actions, accountId, receiverId)\n                  }\n                }));\n                _context2.prev = 3;\n                _context2.next = 6;\n                return _get(_getPrototypeOf(AccountMultisig.prototype), \"signAndSendTransaction\", this).call(this, {\n                  receiverId: accountId,\n                  actions: [transaction_1.functionCall('add_request_and_confirm', args, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n                });\n\n              case 6:\n                result = _context2.sent;\n                _context2.next = 18;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n\n                if (!_context2.t0.toString().includes('Account has too many active requests. Confirm or delete some')) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                _context2.next = 14;\n                return this.deleteUnconfirmedRequests();\n\n              case 14:\n                _context2.next = 16;\n                return this.signAndSendTransaction(receiverId, actions);\n\n              case 16:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 17:\n                throw _context2.t0;\n\n              case 18:\n                if (result.status) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                throw new Error('Request failed');\n\n              case 20:\n                status = _objectSpread({}, result.status);\n\n                if (!(!status.SuccessValue || typeof status.SuccessValue !== 'string')) {\n                  _context2.next = 23;\n                  break;\n                }\n\n                throw new Error('Request failed');\n\n              case 23:\n                this.setRequest({\n                  accountId: accountId,\n                  actions: actions,\n                  requestId: parseInt(Buffer.from(status.SuccessValue, 'base64').toString('ascii'), 10)\n                });\n\n                if (!this.onAddRequestResult) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                _context2.next = 27;\n                return this.onAddRequestResult(result);\n\n              case 27:\n                // NOTE there is no await on purpose to avoid blocking for 2fa\n                this.deleteUnconfirmedRequests();\n                return _context2.abrupt(\"return\", result);\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9]]);\n      }));\n\n      function _signAndSendTransaction(_x3) {\n        return _signAndSendTransaction2.apply(this, arguments);\n      }\n\n      return _signAndSendTransaction;\n    }()\n  }, {\n    key: \"deleteUnconfirmedRequests\",\n    value: function () {\n      var _deleteUnconfirmedRequests = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var request_ids, _this$getRequest, requestId, _iterator, _step, requestIdToDelete;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getRequestIds();\n\n              case 2:\n                request_ids = _context3.sent;\n                _this$getRequest = this.getRequest(), requestId = _this$getRequest.requestId;\n                _iterator = _createForOfIteratorHelper(request_ids);\n                _context3.prev = 5;\n\n                _iterator.s();\n\n              case 7:\n                if ((_step = _iterator.n()).done) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                requestIdToDelete = _step.value;\n\n                if (!(requestIdToDelete == requestId)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                return _context3.abrupt(\"continue\", 19);\n\n              case 11:\n                _context3.prev = 11;\n                _context3.next = 14;\n                return _get(_getPrototypeOf(AccountMultisig.prototype), \"signAndSendTransaction\", this).call(this, {\n                  receiverId: this.accountId,\n                  actions: [transaction_1.functionCall('delete_request', {\n                    request_id: requestIdToDelete\n                  }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n                });\n\n              case 14:\n                _context3.next = 19;\n                break;\n\n              case 16:\n                _context3.prev = 16;\n                _context3.t0 = _context3[\"catch\"](11);\n                console.warn('Attempt to delete an earlier request before 15 minutes failed. Will try again.');\n\n              case 19:\n                _context3.next = 7;\n                break;\n\n              case 21:\n                _context3.next = 26;\n                break;\n\n              case 23:\n                _context3.prev = 23;\n                _context3.t1 = _context3[\"catch\"](5);\n\n                _iterator.e(_context3.t1);\n\n              case 26:\n                _context3.prev = 26;\n\n                _iterator.f();\n\n                return _context3.finish(26);\n\n              case 29:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 23, 26, 29], [11, 16]]);\n      }));\n\n      function deleteUnconfirmedRequests() {\n        return _deleteUnconfirmedRequests.apply(this, arguments);\n      }\n\n      return deleteUnconfirmedRequests;\n    }() // helpers\n\n  }, {\n    key: \"getRequestIds\",\n    value: function () {\n      var _getRequestIds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.viewFunction(this.accountId, 'list_request_ids'));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getRequestIds() {\n        return _getRequestIds.apply(this, arguments);\n      }\n\n      return getRequestIds;\n    }()\n  }, {\n    key: \"getRequest\",\n    value: function getRequest() {\n      if (this.storage) {\n        return JSON.parse(this.storage.getItem(exports.MULTISIG_STORAGE_KEY) || '{}');\n      }\n\n      return storageFallback[exports.MULTISIG_STORAGE_KEY];\n    }\n  }, {\n    key: \"setRequest\",\n    value: function setRequest(data) {\n      if (this.storage) {\n        return this.storage.setItem(exports.MULTISIG_STORAGE_KEY, JSON.stringify(data));\n      }\n\n      storageFallback[exports.MULTISIG_STORAGE_KEY] = data;\n    }\n  }]);\n\n  return AccountMultisig;\n}(account_1.Account);\n\nexports.AccountMultisig = AccountMultisig;\n\nvar Account2FA = /*#__PURE__*/function (_AccountMultisig) {\n  _inherits(Account2FA, _AccountMultisig);\n\n  var _super2 = _createSuper(Account2FA);\n\n  function Account2FA(connection, accountId, options) {\n    var _this2;\n\n    _classCallCheck(this, Account2FA);\n\n    _this2 = _super2.call(this, connection, accountId, options);\n    _this2.helperUrl = 'https://helper.testnet.near.org';\n    _this2.helperUrl = options.helperUrl || _this2.helperUrl;\n    _this2.storage = options.storage;\n    _this2.sendCode = options.sendCode || _this2.sendCodeDefault;\n    _this2.getCode = options.getCode || _this2.getCodeDefault;\n    _this2.verifyCode = options.verifyCode || _this2.verifyCodeDefault;\n    _this2.onConfirmResult = options.onConfirmResult;\n    return _this2;\n  }\n\n  _createClass(Account2FA, [{\n    key: \"signAndSendTransaction\",\n    value: function () {\n      var _signAndSendTransaction3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var deprecate,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(typeof (_args5.length <= 0 ? undefined : _args5[0]) === 'string')) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n                deprecate('use `Account2FA.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n                return _context5.abrupt(\"return\", this.__signAndSendTransaction({\n                  receiverId: _args5.length <= 0 ? undefined : _args5[0],\n                  actions: _args5.length <= 1 ? undefined : _args5[1]\n                }));\n\n              case 6:\n                return _context5.abrupt(\"return\", this.__signAndSendTransaction(_args5.length <= 0 ? undefined : _args5[0]));\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function signAndSendTransaction() {\n        return _signAndSendTransaction3.apply(this, arguments);\n      }\n\n      return signAndSendTransaction;\n    }()\n  }, {\n    key: \"__signAndSendTransaction\",\n    value: function () {\n      var _signAndSendTransaction4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref2) {\n        var receiverId, actions, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                receiverId = _ref2.receiverId, actions = _ref2.actions;\n                _context6.next = 3;\n                return _get(_getPrototypeOf(Account2FA.prototype), \"signAndSendTransaction\", this).call(this, {\n                  receiverId: receiverId,\n                  actions: actions\n                });\n\n              case 3:\n                _context6.next = 5;\n                return this.sendCode();\n\n              case 5:\n                _context6.next = 7;\n                return this.promptAndVerify();\n\n              case 7:\n                result = _context6.sent;\n\n                if (!this.onConfirmResult) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                _context6.next = 11;\n                return this.onConfirmResult(result);\n\n              case 11:\n                return _context6.abrupt(\"return\", result);\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function __signAndSendTransaction(_x4) {\n        return _signAndSendTransaction4.apply(this, arguments);\n      }\n\n      return __signAndSendTransaction;\n    }() // default helpers for CH deployments of multisig\n\n  }, {\n    key: \"deployMultisig\",\n    value: function () {\n      var _deployMultisig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(contractBytes) {\n        var accountId, seedOrLedgerKey, fak2lak, confirmOnlyKey, newArgs, actions;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                accountId = this.accountId;\n                _context7.next = 3;\n                return this.getRecoveryMethods();\n\n              case 3:\n                seedOrLedgerKey = _context7.sent.data.filter(function (_ref3) {\n                  var kind = _ref3.kind,\n                      publicKey = _ref3.publicKey;\n                  return (kind === 'phrase' || kind === 'ledger') && publicKey !== null;\n                }).map(function (rm) {\n                  return rm.publicKey;\n                });\n                _context7.next = 6;\n                return this.getAccessKeys();\n\n              case 6:\n                fak2lak = _context7.sent.filter(function (_ref4) {\n                  var public_key = _ref4.public_key,\n                      permission = _ref4.access_key.permission;\n                  return permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key);\n                }).map(function (ak) {\n                  return ak.public_key;\n                }).map(toPK);\n                _context7.t0 = toPK;\n                _context7.next = 10;\n                return this.postSignedJson('/2fa/getAccessKey', {\n                  accountId: accountId\n                });\n\n              case 10:\n                _context7.t1 = _context7.sent.publicKey;\n                confirmOnlyKey = (0, _context7.t0)(_context7.t1);\n                newArgs = Buffer.from(JSON.stringify({\n                  'num_confirmations': 2\n                }));\n                actions = [].concat(_toConsumableArray(fak2lak.map(function (pk) {\n                  return transaction_1.deleteKey(pk);\n                })), _toConsumableArray(fak2lak.map(function (pk) {\n                  return transaction_1.addKey(pk, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CHANGE_METHODS, null));\n                })), [transaction_1.addKey(confirmOnlyKey, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CONFIRM_METHODS, null)), transaction_1.deployContract(contractBytes)]);\n                _context7.next = 16;\n                return this.state();\n\n              case 16:\n                _context7.t2 = _context7.sent.code_hash;\n\n                if (!(_context7.t2 === '11111111111111111111111111111111')) {\n                  _context7.next = 19;\n                  break;\n                }\n\n                actions.push(transaction_1.functionCall('new', newArgs, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT));\n\n              case 19:\n                console.log('deploying multisig contract for', accountId);\n                _context7.next = 22;\n                return _get(_getPrototypeOf(Account2FA.prototype), \"signAndSendTransactionWithAccount\", this).call(this, accountId, actions);\n\n              case 22:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 23:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function deployMultisig(_x5) {\n        return _deployMultisig.apply(this, arguments);\n      }\n\n      return deployMultisig;\n    }()\n  }, {\n    key: \"disable\",\n    value: function () {\n      var _disable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(contractBytes) {\n        var accountId, accessKeys, lak2fak, confirmOnlyKey, actions;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                accountId = this.accountId;\n                _context8.next = 3;\n                return this.getAccessKeys();\n\n              case 3:\n                accessKeys = _context8.sent;\n                lak2fak = accessKeys.filter(function (_ref5) {\n                  var access_key = _ref5.access_key;\n                  return access_key.permission !== 'FullAccess';\n                }).filter(function (_ref6) {\n                  var access_key = _ref6.access_key;\n                  var perm = access_key.permission.FunctionCall;\n                  return perm.receiver_id === accountId && perm.method_names.length === 4 && perm.method_names.includes('add_request_and_confirm');\n                });\n                _context8.t0 = key_pair_1.PublicKey;\n                _context8.next = 8;\n                return this.postSignedJson('/2fa/getAccessKey', {\n                  accountId: accountId\n                });\n\n              case 8:\n                _context8.t1 = _context8.sent.publicKey;\n                confirmOnlyKey = _context8.t0.from.call(_context8.t0, _context8.t1);\n                actions = [transaction_1.deleteKey(confirmOnlyKey)].concat(_toConsumableArray(lak2fak.map(function (_ref7) {\n                  var public_key = _ref7.public_key;\n                  return transaction_1.deleteKey(key_pair_1.PublicKey.from(public_key));\n                })), _toConsumableArray(lak2fak.map(function (_ref8) {\n                  var public_key = _ref8.public_key;\n                  return transaction_1.addKey(key_pair_1.PublicKey.from(public_key), null);\n                })), [transaction_1.deployContract(contractBytes)]);\n                console.log('disabling 2fa for', accountId);\n                _context8.next = 14;\n                return this.signAndSendTransaction({\n                  receiverId: accountId,\n                  actions: actions\n                });\n\n              case 14:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 15:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function disable(_x6) {\n        return _disable.apply(this, arguments);\n      }\n\n      return disable;\n    }()\n  }, {\n    key: \"sendCodeDefault\",\n    value: function () {\n      var _sendCodeDefault = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var accountId, _this$getRequest2, requestId, method;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                accountId = this.accountId;\n                _this$getRequest2 = this.getRequest(), requestId = _this$getRequest2.requestId;\n                _context9.next = 4;\n                return this.get2faMethod();\n\n              case 4:\n                method = _context9.sent;\n                _context9.next = 7;\n                return this.postSignedJson('/2fa/send', {\n                  accountId: accountId,\n                  method: method,\n                  requestId: requestId\n                });\n\n              case 7:\n                return _context9.abrupt(\"return\", requestId);\n\n              case 8:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function sendCodeDefault() {\n        return _sendCodeDefault.apply(this, arguments);\n      }\n\n      return sendCodeDefault;\n    }()\n  }, {\n    key: \"getCodeDefault\",\n    value: function () {\n      var _getCodeDefault = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(method) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      function getCodeDefault(_x7) {\n        return _getCodeDefault.apply(this, arguments);\n      }\n\n      return getCodeDefault;\n    }()\n  }, {\n    key: \"promptAndVerify\",\n    value: function () {\n      var _promptAndVerify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var method, securityCode, result;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.get2faMethod();\n\n              case 2:\n                method = _context11.sent;\n                _context11.next = 5;\n                return this.getCode(method);\n\n              case 5:\n                securityCode = _context11.sent;\n                _context11.prev = 6;\n                _context11.next = 9;\n                return this.verifyCode(securityCode);\n\n              case 9:\n                result = _context11.sent;\n                return _context11.abrupt(\"return\", result);\n\n              case 13:\n                _context11.prev = 13;\n                _context11.t0 = _context11[\"catch\"](6);\n                console.warn('Error validating security code:', _context11.t0);\n\n                if (!(_context11.t0.toString().includes('invalid 2fa code provided') || _context11.t0.toString().includes('2fa code not valid'))) {\n                  _context11.next = 20;\n                  break;\n                }\n\n                _context11.next = 19;\n                return this.promptAndVerify();\n\n              case 19:\n                return _context11.abrupt(\"return\", _context11.sent);\n\n              case 20:\n                throw _context11.t0;\n\n              case 21:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[6, 13]]);\n      }));\n\n      function promptAndVerify() {\n        return _promptAndVerify.apply(this, arguments);\n      }\n\n      return promptAndVerify;\n    }()\n  }, {\n    key: \"verifyCodeDefault\",\n    value: function () {\n      var _verifyCodeDefault = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(securityCode) {\n        var accountId, request, requestId;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                accountId = this.accountId;\n                request = this.getRequest();\n\n                if (request) {\n                  _context12.next = 4;\n                  break;\n                }\n\n                throw new Error('no request pending');\n\n              case 4:\n                requestId = request.requestId;\n                _context12.next = 7;\n                return this.postSignedJson('/2fa/verify', {\n                  accountId: accountId,\n                  securityCode: securityCode,\n                  requestId: requestId\n                });\n\n              case 7:\n                return _context12.abrupt(\"return\", _context12.sent);\n\n              case 8:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function verifyCodeDefault(_x8) {\n        return _verifyCodeDefault.apply(this, arguments);\n      }\n\n      return verifyCodeDefault;\n    }()\n  }, {\n    key: \"getRecoveryMethods\",\n    value: function () {\n      var _getRecoveryMethods = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var accountId;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                accountId = this.accountId;\n                _context13.t0 = accountId;\n                _context13.next = 4;\n                return this.postSignedJson('/account/recoveryMethods', {\n                  accountId: accountId\n                });\n\n              case 4:\n                _context13.t1 = _context13.sent;\n                return _context13.abrupt(\"return\", {\n                  accountId: _context13.t0,\n                  data: _context13.t1\n                });\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getRecoveryMethods() {\n        return _getRecoveryMethods.apply(this, arguments);\n      }\n\n      return getRecoveryMethods;\n    }()\n  }, {\n    key: \"get2faMethod\",\n    value: function () {\n      var _get2faMethod = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var _yield$this$getRecove, data, _data, kind, detail;\n\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.getRecoveryMethods();\n\n              case 2:\n                _yield$this$getRecove = _context14.sent;\n                data = _yield$this$getRecove.data;\n\n                if (data && data.length) {\n                  data = data.find(function (m) {\n                    return m.kind.indexOf('2fa-') === 0;\n                  });\n                }\n\n                if (data) {\n                  _context14.next = 7;\n                  break;\n                }\n\n                return _context14.abrupt(\"return\", null);\n\n              case 7:\n                _data = data, kind = _data.kind, detail = _data.detail;\n                return _context14.abrupt(\"return\", {\n                  kind: kind,\n                  detail: detail\n                });\n\n              case 9:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function get2faMethod() {\n        return _get2faMethod.apply(this, arguments);\n      }\n\n      return get2faMethod;\n    }()\n  }, {\n    key: \"signatureFor\",\n    value: function () {\n      var _signatureFor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var accountId, block, blockNumber, signed, blockNumberSignature;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                accountId = this.accountId;\n                _context15.next = 3;\n                return this.connection.provider.block({\n                  finality: 'final'\n                });\n\n              case 3:\n                block = _context15.sent;\n                blockNumber = block.header.height.toString();\n                _context15.next = 7;\n                return this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);\n\n              case 7:\n                signed = _context15.sent;\n                blockNumberSignature = Buffer.from(signed.signature).toString('base64');\n                return _context15.abrupt(\"return\", {\n                  blockNumber: blockNumber,\n                  blockNumberSignature: blockNumberSignature\n                });\n\n              case 10:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function signatureFor() {\n        return _signatureFor.apply(this, arguments);\n      }\n\n      return signatureFor;\n    }()\n  }, {\n    key: \"postSignedJson\",\n    value: function () {\n      var _postSignedJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(path, body) {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.t0 = web_1;\n                _context16.t1 = this.helperUrl + path;\n                _context16.t2 = JSON;\n                _context16.t3 = _objectSpread;\n                _context16.t4 = _objectSpread({}, body);\n                _context16.next = 7;\n                return this.signatureFor();\n\n              case 7:\n                _context16.t5 = _context16.sent;\n                _context16.t6 = (0, _context16.t3)(_context16.t4, _context16.t5);\n                _context16.t7 = _context16.t2.stringify.call(_context16.t2, _context16.t6);\n                _context16.next = 12;\n                return _context16.t0.fetchJson.call(_context16.t0, _context16.t1, _context16.t7);\n\n              case 12:\n                return _context16.abrupt(\"return\", _context16.sent);\n\n              case 13:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function postSignedJson(_x9, _x10) {\n        return _postSignedJson.apply(this, arguments);\n      }\n\n      return postSignedJson;\n    }()\n  }]);\n\n  return Account2FA;\n}(AccountMultisig);\n\nexports.Account2FA = Account2FA; // helpers\n\nvar toPK = function toPK(pk) {\n  return key_pair_1.PublicKey.from(pk);\n};\n\nvar convertPKForContract = function convertPKForContract(pk) {\n  return pk.toString().replace('ed25519:', '');\n};\n\nvar convertActions = function convertActions(actions, accountId, receiverId) {\n  return actions.map(function (a) {\n    var type = a.enum;\n    var _a$type = a[type],\n        gas = _a$type.gas,\n        publicKey = _a$type.publicKey,\n        methodName = _a$type.methodName,\n        args = _a$type.args,\n        deposit = _a$type.deposit,\n        accessKey = _a$type.accessKey,\n        code = _a$type.code;\n    var action = {\n      type: type[0].toUpperCase() + type.substr(1),\n      gas: gas && gas.toString() || undefined,\n      public_key: publicKey && convertPKForContract(publicKey) || undefined,\n      method_name: methodName,\n      args: args && Buffer.from(args).toString('base64') || undefined,\n      code: code && Buffer.from(code).toString('base64') || undefined,\n      amount: deposit && deposit.toString() || undefined,\n      deposit: deposit && deposit.toString() || '0',\n      permission: undefined\n    };\n\n    if (accessKey) {\n      if (receiverId === accountId && accessKey.permission.enum !== 'fullAccess') {\n        action.permission = {\n          receiver_id: accountId,\n          allowance: exports.MULTISIG_ALLOWANCE.toString(),\n          method_names: exports.MULTISIG_CHANGE_METHODS\n        };\n      }\n\n      if (accessKey.permission.enum === 'functionCall') {\n        var _accessKey$permission = accessKey.permission.functionCall,\n            receiver_id = _accessKey$permission.receiverId,\n            method_names = _accessKey$permission.methodNames,\n            allowance = _accessKey$permission.allowance;\n        action.permission = {\n          receiver_id: receiver_id,\n          allowance: allowance && allowance.toString() || undefined,\n          method_names: method_names\n        };\n      }\n    }\n\n    return action;\n  });\n};","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Account2FA","AccountMultisig","MULTISIG_CONFIRM_METHODS","MULTISIG_CHANGE_METHODS","MULTISIG_DEPOSIT","MULTISIG_GAS","MULTISIG_ALLOWANCE","MULTISIG_STORAGE_KEY","bn_js_1","require","depd_1","account_1","format_1","key_pair_1","transaction_1","web_1","default","parseNearAmount","storageFallback","connection","accountId","options","storage","onAddRequestResult","receiverId","actions","_signAndSendTransaction","args","Buffer","from","JSON","stringify","request","receiver_id","convertActions","functionCall","result","toString","includes","deleteUnconfirmedRequests","signAndSendTransaction","status","Error","SuccessValue","setRequest","requestId","parseInt","getRequestIds","request_ids","getRequest","requestIdToDelete","request_id","console","warn","viewFunction","parse","getItem","data","setItem","Account","helperUrl","sendCode","sendCodeDefault","getCode","getCodeDefault","verifyCode","verifyCodeDefault","onConfirmResult","deprecate","__signAndSendTransaction","promptAndVerify","contractBytes","getRecoveryMethods","seedOrLedgerKey","filter","kind","publicKey","map","rm","getAccessKeys","fak2lak","public_key","permission","access_key","ak","toPK","postSignedJson","confirmOnlyKey","newArgs","pk","deleteKey","addKey","functionCallAccessKey","deployContract","state","code_hash","push","log","accessKeys","lak2fak","perm","FunctionCall","method_names","length","PublicKey","get2faMethod","method","securityCode","find","m","indexOf","detail","provider","block","finality","blockNumber","header","height","signer","signMessage","networkId","signed","blockNumberSignature","signature","path","body","signatureFor","fetchJson","convertPKForContract","replace","a","type","enum","gas","methodName","deposit","accessKey","code","action","toUpperCase","substr","undefined","method_name","amount","allowance","methodNames"],"sources":["D:/Projects/verifiedprofilev2/node_modules/near-api-js/lib/account_multisig.js"],"sourcesContent":["'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account2FA = exports.AccountMultisig = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst depd_1 = __importDefault(require(\"depd\"));\nconst account_1 = require(\"./account\");\nconst format_1 = require(\"./utils/format\");\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst transaction_1 = require(\"./transaction\");\nconst web_1 = require(\"./utils/web\");\nexports.MULTISIG_STORAGE_KEY = '__multisigRequest';\nexports.MULTISIG_ALLOWANCE = new bn_js_1.default(format_1.parseNearAmount('1'));\n// TODO: Different gas value for different requests (can reduce gas usage dramatically)\nexports.MULTISIG_GAS = new bn_js_1.default('100000000000000');\nexports.MULTISIG_DEPOSIT = new bn_js_1.default('0');\nexports.MULTISIG_CHANGE_METHODS = ['add_request', 'add_request_and_confirm', 'delete_request', 'confirm'];\nexports.MULTISIG_CONFIRM_METHODS = ['confirm'];\n// in memory request cache for node w/o localStorage\nconst storageFallback = {\n    [exports.MULTISIG_STORAGE_KEY]: null\n};\nclass AccountMultisig extends account_1.Account {\n    constructor(connection, accountId, options) {\n        super(connection, accountId);\n        this.storage = options.storage;\n        this.onAddRequestResult = options.onAddRequestResult;\n    }\n    async signAndSendTransactionWithAccount(receiverId, actions) {\n        return super.signAndSendTransaction({ receiverId, actions });\n    }\n    signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            return this._signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        return this._signAndSendTransaction(args[0]);\n    }\n    async _signAndSendTransaction({ receiverId, actions }) {\n        const { accountId } = this;\n        const args = Buffer.from(JSON.stringify({\n            request: {\n                receiver_id: receiverId,\n                actions: convertActions(actions, accountId, receiverId)\n            }\n        }));\n        let result;\n        try {\n            result = await super.signAndSendTransaction({\n                receiverId: accountId,\n                actions: [\n                    transaction_1.functionCall('add_request_and_confirm', args, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)\n                ]\n            });\n        }\n        catch (e) {\n            if (e.toString().includes('Account has too many active requests. Confirm or delete some')) {\n                await this.deleteUnconfirmedRequests();\n                return await this.signAndSendTransaction(receiverId, actions);\n            }\n            throw e;\n        }\n        // TODO: Are following even needed? Seems like it throws on error already\n        if (!result.status) {\n            throw new Error('Request failed');\n        }\n        const status = { ...result.status };\n        if (!status.SuccessValue || typeof status.SuccessValue !== 'string') {\n            throw new Error('Request failed');\n        }\n        this.setRequest({\n            accountId,\n            actions,\n            requestId: parseInt(Buffer.from(status.SuccessValue, 'base64').toString('ascii'), 10)\n        });\n        if (this.onAddRequestResult) {\n            await this.onAddRequestResult(result);\n        }\n        // NOTE there is no await on purpose to avoid blocking for 2fa\n        this.deleteUnconfirmedRequests();\n        return result;\n    }\n    async deleteUnconfirmedRequests() {\n        // TODO: Delete in batch, don't delete unexpired\n        // TODO: Delete in batch, don't delete unexpired (can reduce gas usage dramatically)\n        const request_ids = await this.getRequestIds();\n        const { requestId } = this.getRequest();\n        for (const requestIdToDelete of request_ids) {\n            if (requestIdToDelete == requestId) {\n                continue;\n            }\n            try {\n                await super.signAndSendTransaction({\n                    receiverId: this.accountId,\n                    actions: [transaction_1.functionCall('delete_request', { request_id: requestIdToDelete }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n                });\n            }\n            catch (e) {\n                console.warn('Attempt to delete an earlier request before 15 minutes failed. Will try again.');\n            }\n        }\n    }\n    // helpers\n    async getRequestIds() {\n        // TODO: Read requests from state to allow filtering by expiration time\n        // TODO: https://github.com/near/core-contracts/blob/305d1db4f4f2cf5ce4c1ef3479f7544957381f11/multisig/src/lib.rs#L84\n        return this.viewFunction(this.accountId, 'list_request_ids');\n    }\n    getRequest() {\n        if (this.storage) {\n            return JSON.parse(this.storage.getItem(exports.MULTISIG_STORAGE_KEY) || '{}');\n        }\n        return storageFallback[exports.MULTISIG_STORAGE_KEY];\n    }\n    setRequest(data) {\n        if (this.storage) {\n            return this.storage.setItem(exports.MULTISIG_STORAGE_KEY, JSON.stringify(data));\n        }\n        storageFallback[exports.MULTISIG_STORAGE_KEY] = data;\n    }\n}\nexports.AccountMultisig = AccountMultisig;\nclass Account2FA extends AccountMultisig {\n    constructor(connection, accountId, options) {\n        super(connection, accountId, options);\n        this.helperUrl = 'https://helper.testnet.near.org';\n        this.helperUrl = options.helperUrl || this.helperUrl;\n        this.storage = options.storage;\n        this.sendCode = options.sendCode || this.sendCodeDefault;\n        this.getCode = options.getCode || this.getCodeDefault;\n        this.verifyCode = options.verifyCode || this.verifyCodeDefault;\n        this.onConfirmResult = options.onConfirmResult;\n    }\n    async signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n            deprecate('use `Account2FA.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n            return this.__signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        else {\n            return this.__signAndSendTransaction(args[0]);\n        }\n    }\n    async __signAndSendTransaction({ receiverId, actions }) {\n        await super.signAndSendTransaction({ receiverId, actions });\n        // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?\n        await this.sendCode();\n        const result = await this.promptAndVerify();\n        if (this.onConfirmResult) {\n            await this.onConfirmResult(result);\n        }\n        return result;\n    }\n    // default helpers for CH deployments of multisig\n    async deployMultisig(contractBytes) {\n        const { accountId } = this;\n        const seedOrLedgerKey = (await this.getRecoveryMethods()).data\n            .filter(({ kind, publicKey }) => (kind === 'phrase' || kind === 'ledger') && publicKey !== null)\n            .map((rm) => rm.publicKey);\n        const fak2lak = (await this.getAccessKeys())\n            .filter(({ public_key, access_key: { permission } }) => permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key))\n            .map((ak) => ak.public_key)\n            .map(toPK);\n        const confirmOnlyKey = toPK((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n        const newArgs = Buffer.from(JSON.stringify({ 'num_confirmations': 2 }));\n        const actions = [\n            ...fak2lak.map((pk) => transaction_1.deleteKey(pk)),\n            ...fak2lak.map((pk) => transaction_1.addKey(pk, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CHANGE_METHODS, null))),\n            transaction_1.addKey(confirmOnlyKey, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CONFIRM_METHODS, null)),\n            transaction_1.deployContract(contractBytes),\n        ];\n        if ((await this.state()).code_hash === '11111111111111111111111111111111') {\n            actions.push(transaction_1.functionCall('new', newArgs, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT));\n        }\n        console.log('deploying multisig contract for', accountId);\n        return await super.signAndSendTransactionWithAccount(accountId, actions);\n    }\n    async disable(contractBytes) {\n        const { accountId } = this;\n        const accessKeys = await this.getAccessKeys();\n        const lak2fak = accessKeys\n            .filter(({ access_key }) => access_key.permission !== 'FullAccess')\n            .filter(({ access_key }) => {\n            const perm = access_key.permission.FunctionCall;\n            return perm.receiver_id === accountId &&\n                perm.method_names.length === 4 &&\n                perm.method_names.includes('add_request_and_confirm');\n        });\n        const confirmOnlyKey = key_pair_1.PublicKey.from((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n        const actions = [\n            transaction_1.deleteKey(confirmOnlyKey),\n            ...lak2fak.map(({ public_key }) => transaction_1.deleteKey(key_pair_1.PublicKey.from(public_key))),\n            ...lak2fak.map(({ public_key }) => transaction_1.addKey(key_pair_1.PublicKey.from(public_key), null)),\n            transaction_1.deployContract(contractBytes),\n        ];\n        console.log('disabling 2fa for', accountId);\n        return await this.signAndSendTransaction({\n            receiverId: accountId,\n            actions\n        });\n    }\n    async sendCodeDefault() {\n        const { accountId } = this;\n        const { requestId } = this.getRequest();\n        const method = await this.get2faMethod();\n        await this.postSignedJson('/2fa/send', {\n            accountId,\n            method,\n            requestId,\n        });\n        return requestId;\n    }\n    async getCodeDefault(method) {\n        throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n    }\n    async promptAndVerify() {\n        const method = await this.get2faMethod();\n        const securityCode = await this.getCode(method);\n        try {\n            const result = await this.verifyCode(securityCode);\n            // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)\n            return result;\n        }\n        catch (e) {\n            console.warn('Error validating security code:', e);\n            if (e.toString().includes('invalid 2fa code provided') || e.toString().includes('2fa code not valid')) {\n                return await this.promptAndVerify();\n            }\n            throw e;\n        }\n    }\n    async verifyCodeDefault(securityCode) {\n        const { accountId } = this;\n        const request = this.getRequest();\n        if (!request) {\n            throw new Error('no request pending');\n        }\n        const { requestId } = request;\n        return await this.postSignedJson('/2fa/verify', {\n            accountId,\n            securityCode,\n            requestId\n        });\n    }\n    async getRecoveryMethods() {\n        const { accountId } = this;\n        return {\n            accountId,\n            data: await this.postSignedJson('/account/recoveryMethods', { accountId })\n        };\n    }\n    async get2faMethod() {\n        let { data } = await this.getRecoveryMethods();\n        if (data && data.length) {\n            data = data.find((m) => m.kind.indexOf('2fa-') === 0);\n        }\n        if (!data)\n            return null;\n        const { kind, detail } = data;\n        return { kind, detail };\n    }\n    async signatureFor() {\n        const { accountId } = this;\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockNumber = block.header.height.toString();\n        const signed = await this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);\n        const blockNumberSignature = Buffer.from(signed.signature).toString('base64');\n        return { blockNumber, blockNumberSignature };\n    }\n    async postSignedJson(path, body) {\n        return await web_1.fetchJson(this.helperUrl + path, JSON.stringify({\n            ...body,\n            ...(await this.signatureFor())\n        }));\n    }\n}\nexports.Account2FA = Account2FA;\n// helpers\nconst toPK = (pk) => key_pair_1.PublicKey.from(pk);\nconst convertPKForContract = (pk) => pk.toString().replace('ed25519:', '');\nconst convertActions = (actions, accountId, receiverId) => actions.map((a) => {\n    const type = a.enum;\n    const { gas, publicKey, methodName, args, deposit, accessKey, code } = a[type];\n    const action = {\n        type: type[0].toUpperCase() + type.substr(1),\n        gas: (gas && gas.toString()) || undefined,\n        public_key: (publicKey && convertPKForContract(publicKey)) || undefined,\n        method_name: methodName,\n        args: (args && Buffer.from(args).toString('base64')) || undefined,\n        code: (code && Buffer.from(code).toString('base64')) || undefined,\n        amount: (deposit && deposit.toString()) || undefined,\n        deposit: (deposit && deposit.toString()) || '0',\n        permission: undefined,\n    };\n    if (accessKey) {\n        if (receiverId === accountId && accessKey.permission.enum !== 'fullAccess') {\n            action.permission = {\n                receiver_id: accountId,\n                allowance: exports.MULTISIG_ALLOWANCE.toString(),\n                method_names: exports.MULTISIG_CHANGE_METHODS,\n            };\n        }\n        if (accessKey.permission.enum === 'functionCall') {\n            const { receiverId: receiver_id, methodNames: method_names, allowance } = accessKey.permission.functionCall;\n            action.permission = {\n                receiver_id,\n                allowance: (allowance && allowance.toString()) || undefined,\n                method_names\n            };\n        }\n    }\n    return action;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}