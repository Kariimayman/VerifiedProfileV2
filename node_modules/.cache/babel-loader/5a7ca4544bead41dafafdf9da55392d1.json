{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createClass = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InMemorySigner = exports.Signer = void 0;\n\nvar js_sha256_1 = __importDefault(require(\"js-sha256\"));\n\nvar key_pair_1 = require(\"./utils/key_pair\");\n\nvar in_memory_key_store_1 = require(\"./key_stores/in_memory_key_store\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\n\n\nvar Signer = function Signer() {\n  _classCallCheck(this, Signer);\n};\n\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\n\nvar InMemorySigner = /*#__PURE__*/function (_Signer) {\n  _inherits(InMemorySigner, _Signer);\n\n  var _super = _createSuper(InMemorySigner);\n\n  function InMemorySigner(keyStore) {\n    var _this;\n\n    _classCallCheck(this, InMemorySigner);\n\n    _this = _super.call(this);\n    _this.keyStore = keyStore;\n    return _this;\n  }\n  /**\n   * Creates a single account Signer instance with account, network and keyPair provided.\n   *\n   * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).\n   *\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account to assign the key pair to\n   * @param keyPair The keyPair to use for signing\n   */\n\n\n  _createClass(InMemorySigner, [{\n    key: \"createKey\",\n    value:\n    /**\n     * Creates a public key for the account given\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>}\n     */\n    function () {\n      var _createKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(accountId, networkId) {\n        var keyPair;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n                _context.next = 3;\n                return this.keyStore.setKey(networkId, accountId, keyPair);\n\n              case 3:\n                return _context.abrupt(\"return\", keyPair.getPublicKey());\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createKey(_x, _x2) {\n        return _createKey.apply(this, arguments);\n      }\n\n      return createKey;\n    }()\n    /**\n     * Gets the existing public key for a given account\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>} Returns the public key or null if not found\n     */\n\n  }, {\n    key: \"getPublicKey\",\n    value: function () {\n      var _getPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(accountId, networkId) {\n        var keyPair;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.keyStore.getKey(networkId, accountId);\n\n              case 2:\n                keyPair = _context2.sent;\n\n                if (!(keyPair === null)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", null);\n\n              case 5:\n                return _context2.abrupt(\"return\", keyPair.getPublicKey());\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getPublicKey(_x3, _x4) {\n        return _getPublicKey.apply(this, arguments);\n      }\n\n      return getPublicKey;\n    }()\n    /**\n     * @param message A message to be signed, typically a serialized transaction\n     * @param accountId the NEAR account signing the message\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<Signature>}\n     */\n\n  }, {\n    key: \"signMessage\",\n    value: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(message, accountId, networkId) {\n        var hash, keyPair;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n\n                if (accountId) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw new Error('InMemorySigner requires provided account id');\n\n              case 3:\n                _context3.next = 5;\n                return this.keyStore.getKey(networkId, accountId);\n\n              case 5:\n                keyPair = _context3.sent;\n\n                if (!(keyPair === null)) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Key for \".concat(accountId, \" not found in \").concat(networkId));\n\n              case 8:\n                return _context3.abrupt(\"return\", keyPair.sign(hash));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function signMessage(_x5, _x6, _x7) {\n        return _signMessage.apply(this, arguments);\n      }\n\n      return signMessage;\n    }()\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"InMemorySigner(\".concat(this.keyStore, \")\");\n    }\n  }], [{\n    key: \"fromKeyPair\",\n    value: function () {\n      var _fromKeyPair = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(networkId, accountId, keyPair) {\n        var keyStore;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                keyStore = new in_memory_key_store_1.InMemoryKeyStore();\n                _context4.next = 3;\n                return keyStore.setKey(networkId, accountId, keyPair);\n\n              case 3:\n                return _context4.abrupt(\"return\", new InMemorySigner(keyStore));\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function fromKeyPair(_x8, _x9, _x10) {\n        return _fromKeyPair.apply(this, arguments);\n      }\n\n      return fromKeyPair;\n    }()\n  }]);\n\n  return InMemorySigner;\n}(Signer);\n\nexports.InMemorySigner = InMemorySigner;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","InMemorySigner","Signer","js_sha256_1","require","key_pair_1","in_memory_key_store_1","keyStore","accountId","networkId","keyPair","KeyPair","fromRandom","setKey","getPublicKey","getKey","message","hash","Uint8Array","default","sha256","array","Error","sign","InMemoryKeyStore"],"sources":["D:/Projects/verifiedprofilev2/node_modules/near-api-js/lib/signer.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InMemorySigner = exports.Signer = void 0;\nconst js_sha256_1 = __importDefault(require(\"js-sha256\"));\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst in_memory_key_store_1 = require(\"./key_stores/in_memory_key_store\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\nclass Signer {\n}\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\nclass InMemorySigner extends Signer {\n    constructor(keyStore) {\n        super();\n        this.keyStore = keyStore;\n    }\n    /**\n     * Creates a single account Signer instance with account, network and keyPair provided.\n     *\n     * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).\n     *\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account to assign the key pair to\n     * @param keyPair The keyPair to use for signing\n     */\n    static async fromKeyPair(networkId, accountId, keyPair) {\n        const keyStore = new in_memory_key_store_1.InMemoryKeyStore();\n        await keyStore.setKey(networkId, accountId, keyPair);\n        return new InMemorySigner(keyStore);\n    }\n    /**\n     * Creates a public key for the account given\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>}\n     */\n    async createKey(accountId, networkId) {\n        const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n        await this.keyStore.setKey(networkId, accountId, keyPair);\n        return keyPair.getPublicKey();\n    }\n    /**\n     * Gets the existing public key for a given account\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>} Returns the public key or null if not found\n     */\n    async getPublicKey(accountId, networkId) {\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            return null;\n        }\n        return keyPair.getPublicKey();\n    }\n    /**\n     * @param message A message to be signed, typically a serialized transaction\n     * @param accountId the NEAR account signing the message\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<Signature>}\n     */\n    async signMessage(message, accountId, networkId) {\n        const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n        if (!accountId) {\n            throw new Error('InMemorySigner requires provided account id');\n        }\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            throw new Error(`Key for ${accountId} not found in ${networkId}`);\n        }\n        return keyPair.sign(hash);\n    }\n    toString() {\n        return `InMemorySigner(${this.keyStore})`;\n    }\n}\nexports.InMemorySigner = InMemorySigner;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}