{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeyPairEd25519 = exports.KeyPair = exports.PublicKey = exports.KeyType = void 0;\n\nvar tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\n\nvar serialize_1 = require(\"./serialize\");\n\nvar enums_1 = require(\"./enums\");\n/** All supported key types */\n\n\nvar KeyType;\n\n(function (KeyType) {\n  KeyType[KeyType[\"ED25519\"] = 0] = \"ED25519\";\n})(KeyType = exports.KeyType || (exports.KeyType = {}));\n\nfunction key_type_to_str(keyType) {\n  switch (keyType) {\n    case KeyType.ED25519:\n      return 'ed25519';\n\n    default:\n      throw new Error(\"Unknown key type \".concat(keyType));\n  }\n}\n\nfunction str_to_key_type(keyType) {\n  switch (keyType.toLowerCase()) {\n    case 'ed25519':\n      return KeyType.ED25519;\n\n    default:\n      throw new Error(\"Unknown key type \".concat(keyType));\n  }\n}\n/**\n * PublicKey representation that has type and bytes of the key.\n */\n\n\nvar PublicKey = /*#__PURE__*/function (_enums_1$Assignable) {\n  _inherits(PublicKey, _enums_1$Assignable);\n\n  var _super = _createSuper(PublicKey);\n\n  function PublicKey() {\n    _classCallCheck(this, PublicKey);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PublicKey, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(key_type_to_str(this.keyType), \":\").concat(serialize_1.base_encode(this.data));\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (typeof value === 'string') {\n        return PublicKey.fromString(value);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(encodedKey) {\n      var parts = encodedKey.split(':');\n\n      if (parts.length === 1) {\n        return new PublicKey({\n          keyType: KeyType.ED25519,\n          data: serialize_1.base_decode(parts[0])\n        });\n      } else if (parts.length === 2) {\n        return new PublicKey({\n          keyType: str_to_key_type(parts[0]),\n          data: serialize_1.base_decode(parts[1])\n        });\n      } else {\n        throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n      }\n    }\n  }]);\n\n  return PublicKey;\n}(enums_1.Assignable);\n\nexports.PublicKey = PublicKey;\n\nvar KeyPair = /*#__PURE__*/function () {\n  function KeyPair() {\n    _classCallCheck(this, KeyPair);\n  }\n\n  _createClass(KeyPair, null, [{\n    key: \"fromRandom\",\n    value:\n    /**\n     * @param curve Name of elliptical curve, case-insensitive\n     * @returns Random KeyPair based on the curve\n     */\n    function fromRandom(curve) {\n      switch (curve.toUpperCase()) {\n        case 'ED25519':\n          return KeyPairEd25519.fromRandom();\n\n        default:\n          throw new Error(\"Unknown curve \".concat(curve));\n      }\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(encodedKey) {\n      var parts = encodedKey.split(':');\n\n      if (parts.length === 1) {\n        return new KeyPairEd25519(parts[0]);\n      } else if (parts.length === 2) {\n        switch (parts[0].toUpperCase()) {\n          case 'ED25519':\n            return new KeyPairEd25519(parts[1]);\n\n          default:\n            throw new Error(\"Unknown curve: \".concat(parts[0]));\n        }\n      } else {\n        throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n      }\n    }\n  }]);\n\n  return KeyPair;\n}();\n\nexports.KeyPair = KeyPair;\n/**\n * This class provides key pair functionality for Ed25519 curve:\n * generating key pairs, encoding key pairs, signing and verifying.\n */\n\nvar KeyPairEd25519 = /*#__PURE__*/function (_KeyPair) {\n  _inherits(KeyPairEd25519, _KeyPair);\n\n  var _super2 = _createSuper(KeyPairEd25519);\n\n  /**\n   * Construct an instance of key pair given a secret key.\n   * It's generally assumed that these are encoded in base58.\n   * @param {string} secretKey\n   */\n  function KeyPairEd25519(secretKey) {\n    var _this;\n\n    _classCallCheck(this, KeyPairEd25519);\n\n    _this = _super2.call(this);\n    var keyPair = tweetnacl_1.default.sign.keyPair.fromSecretKey(serialize_1.base_decode(secretKey));\n    _this.publicKey = new PublicKey({\n      keyType: KeyType.ED25519,\n      data: keyPair.publicKey\n    });\n    _this.secretKey = secretKey;\n    return _this;\n  }\n  /**\n   * Generate a new random keypair.\n   * @example\n   * const keyRandom = KeyPair.fromRandom();\n   * keyRandom.publicKey\n   * // returns [PUBLIC_KEY]\n   *\n   * keyRandom.secretKey\n   * // returns [SECRET_KEY]\n   */\n\n\n  _createClass(KeyPairEd25519, [{\n    key: \"sign\",\n    value: function sign(message) {\n      var signature = tweetnacl_1.default.sign.detached(message, serialize_1.base_decode(this.secretKey));\n      return {\n        signature: signature,\n        publicKey: this.publicKey\n      };\n    }\n  }, {\n    key: \"verify\",\n    value: function verify(message, signature) {\n      return tweetnacl_1.default.sign.detached.verify(message, signature, this.publicKey.data);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"ed25519:\".concat(this.secretKey);\n    }\n  }, {\n    key: \"getPublicKey\",\n    value: function getPublicKey() {\n      return this.publicKey;\n    }\n  }], [{\n    key: \"fromRandom\",\n    value: function fromRandom() {\n      var newKeyPair = tweetnacl_1.default.sign.keyPair();\n      return new KeyPairEd25519(serialize_1.base_encode(newKeyPair.secretKey));\n    }\n  }]);\n\n  return KeyPairEd25519;\n}(KeyPair);\n\nexports.KeyPairEd25519 = KeyPairEd25519;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","KeyPairEd25519","KeyPair","PublicKey","KeyType","tweetnacl_1","require","serialize_1","enums_1","key_type_to_str","keyType","ED25519","Error","str_to_key_type","toLowerCase","base_encode","data","fromString","encodedKey","parts","split","length","base_decode","Assignable","curve","toUpperCase","fromRandom","secretKey","keyPair","default","sign","fromSecretKey","publicKey","message","signature","detached","verify","newKeyPair"],"sources":["D:/Projects/verifiedprofilev2/node_modules/near-api-js/lib/utils/key_pair.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyPairEd25519 = exports.KeyPair = exports.PublicKey = exports.KeyType = void 0;\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nconst serialize_1 = require(\"./serialize\");\nconst enums_1 = require(\"./enums\");\n/** All supported key types */\nvar KeyType;\n(function (KeyType) {\n    KeyType[KeyType[\"ED25519\"] = 0] = \"ED25519\";\n})(KeyType = exports.KeyType || (exports.KeyType = {}));\nfunction key_type_to_str(keyType) {\n    switch (keyType) {\n        case KeyType.ED25519: return 'ed25519';\n        default: throw new Error(`Unknown key type ${keyType}`);\n    }\n}\nfunction str_to_key_type(keyType) {\n    switch (keyType.toLowerCase()) {\n        case 'ed25519': return KeyType.ED25519;\n        default: throw new Error(`Unknown key type ${keyType}`);\n    }\n}\n/**\n * PublicKey representation that has type and bytes of the key.\n */\nclass PublicKey extends enums_1.Assignable {\n    static from(value) {\n        if (typeof value === 'string') {\n            return PublicKey.fromString(value);\n        }\n        return value;\n    }\n    static fromString(encodedKey) {\n        const parts = encodedKey.split(':');\n        if (parts.length === 1) {\n            return new PublicKey({ keyType: KeyType.ED25519, data: serialize_1.base_decode(parts[0]) });\n        }\n        else if (parts.length === 2) {\n            return new PublicKey({ keyType: str_to_key_type(parts[0]), data: serialize_1.base_decode(parts[1]) });\n        }\n        else {\n            throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n        }\n    }\n    toString() {\n        return `${key_type_to_str(this.keyType)}:${serialize_1.base_encode(this.data)}`;\n    }\n}\nexports.PublicKey = PublicKey;\nclass KeyPair {\n    /**\n     * @param curve Name of elliptical curve, case-insensitive\n     * @returns Random KeyPair based on the curve\n     */\n    static fromRandom(curve) {\n        switch (curve.toUpperCase()) {\n            case 'ED25519': return KeyPairEd25519.fromRandom();\n            default: throw new Error(`Unknown curve ${curve}`);\n        }\n    }\n    static fromString(encodedKey) {\n        const parts = encodedKey.split(':');\n        if (parts.length === 1) {\n            return new KeyPairEd25519(parts[0]);\n        }\n        else if (parts.length === 2) {\n            switch (parts[0].toUpperCase()) {\n                case 'ED25519': return new KeyPairEd25519(parts[1]);\n                default: throw new Error(`Unknown curve: ${parts[0]}`);\n            }\n        }\n        else {\n            throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n        }\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * This class provides key pair functionality for Ed25519 curve:\n * generating key pairs, encoding key pairs, signing and verifying.\n */\nclass KeyPairEd25519 extends KeyPair {\n    /**\n     * Construct an instance of key pair given a secret key.\n     * It's generally assumed that these are encoded in base58.\n     * @param {string} secretKey\n     */\n    constructor(secretKey) {\n        super();\n        const keyPair = tweetnacl_1.default.sign.keyPair.fromSecretKey(serialize_1.base_decode(secretKey));\n        this.publicKey = new PublicKey({ keyType: KeyType.ED25519, data: keyPair.publicKey });\n        this.secretKey = secretKey;\n    }\n    /**\n     * Generate a new random keypair.\n     * @example\n     * const keyRandom = KeyPair.fromRandom();\n     * keyRandom.publicKey\n     * // returns [PUBLIC_KEY]\n     *\n     * keyRandom.secretKey\n     * // returns [SECRET_KEY]\n     */\n    static fromRandom() {\n        const newKeyPair = tweetnacl_1.default.sign.keyPair();\n        return new KeyPairEd25519(serialize_1.base_encode(newKeyPair.secretKey));\n    }\n    sign(message) {\n        const signature = tweetnacl_1.default.sign.detached(message, serialize_1.base_decode(this.secretKey));\n        return { signature, publicKey: this.publicKey };\n    }\n    verify(message, signature) {\n        return tweetnacl_1.default.sign.detached.verify(message, signature, this.publicKey.data);\n    }\n    toString() {\n        return `ed25519:${this.secretKey}`;\n    }\n    getPublicKey() {\n        return this.publicKey;\n    }\n}\nexports.KeyPairEd25519 = KeyPairEd25519;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}