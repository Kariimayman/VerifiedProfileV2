{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowserLocalStorageKeyStore = void 0;\n\nvar keystore_1 = require(\"./keystore\");\n\nvar key_pair_1 = require(\"../utils/key_pair\");\n\nvar LOCAL_STORAGE_KEY_PREFIX = 'near-api-js:keystore:';\n/**\n * This class is used to store keys in the browsers local storage.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores } from 'near-api-js';\n *\n * const keyStore = new keyStores.BrowserLocalStorageKeyStore();\n * const config = {\n *   keyStore, // instance of BrowserLocalStorageKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\n\nvar BrowserLocalStorageKeyStore = /*#__PURE__*/function (_keystore_1$KeyStore) {\n  _inherits(BrowserLocalStorageKeyStore, _keystore_1$KeyStore);\n\n  var _super = _createSuper(BrowserLocalStorageKeyStore);\n\n  /**\n   * @param localStorage defaults to window.localStorage\n   * @param prefix defaults to `near-api-js:keystore:`\n   */\n  function BrowserLocalStorageKeyStore() {\n    var _this;\n\n    var localStorage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.localStorage;\n    var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LOCAL_STORAGE_KEY_PREFIX;\n\n    _classCallCheck(this, BrowserLocalStorageKeyStore);\n\n    _this = _super.call(this);\n    _this.localStorage = localStorage;\n    _this.prefix = prefix;\n    return _this;\n  }\n  /**\n   * Stores a {@link KeyPair} in local storage.\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n\n\n  _createClass(BrowserLocalStorageKeyStore, [{\n    key: \"setKey\",\n    value: function () {\n      var _setKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(networkId, accountId, keyPair) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.localStorage.setItem(this.storageKeyForSecretKey(networkId, accountId), keyPair.toString());\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setKey(_x, _x2, _x3) {\n        return _setKey.apply(this, arguments);\n      }\n\n      return setKey;\n    }()\n    /**\n     * Gets a {@link KeyPair} from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n\n  }, {\n    key: \"getKey\",\n    value: function () {\n      var _getKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(networkId, accountId) {\n        var value;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                value = this.localStorage.getItem(this.storageKeyForSecretKey(networkId, accountId));\n\n                if (value) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", null);\n\n              case 3:\n                return _context2.abrupt(\"return\", key_pair_1.KeyPair.fromString(value));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getKey(_x4, _x5) {\n        return _getKey.apply(this, arguments);\n      }\n\n      return getKey;\n    }()\n    /**\n     * Removes a {@link KeyPair} from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n\n  }, {\n    key: \"removeKey\",\n    value: function () {\n      var _removeKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(networkId, accountId) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.localStorage.removeItem(this.storageKeyForSecretKey(networkId, accountId));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function removeKey(_x6, _x7) {\n        return _removeKey.apply(this, arguments);\n      }\n\n      return removeKey;\n    }()\n    /**\n     * Removes all items that start with `prefix` from local storage\n     */\n\n  }, {\n    key: \"clear\",\n    value: function () {\n      var _clear = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _iterator, _step, key;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(this.storageKeys());\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    key = _step.value;\n\n                    if (key.startsWith(this.prefix)) {\n                      this.localStorage.removeItem(key);\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function clear() {\n        return _clear.apply(this, arguments);\n      }\n\n      return clear;\n    }()\n    /**\n     * Get the network(s) from local storage\n     * @returns {Promise<string[]>}\n     */\n\n  }, {\n    key: \"getNetworks\",\n    value: function () {\n      var _getNetworks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var result, _iterator2, _step2, key, parts;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                result = new Set();\n                _iterator2 = _createForOfIteratorHelper(this.storageKeys());\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    key = _step2.value;\n\n                    if (key.startsWith(this.prefix)) {\n                      parts = key.substring(this.prefix.length).split(':');\n                      result.add(parts[1]);\n                    }\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                return _context5.abrupt(\"return\", Array.from(result.values()));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getNetworks() {\n        return _getNetworks.apply(this, arguments);\n      }\n\n      return getNetworks;\n    }()\n    /**\n     * Gets the account(s) from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n\n  }, {\n    key: \"getAccounts\",\n    value: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(networkId) {\n        var result, _iterator3, _step3, key, parts;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                result = new Array();\n                _iterator3 = _createForOfIteratorHelper(this.storageKeys());\n\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    key = _step3.value;\n\n                    if (key.startsWith(this.prefix)) {\n                      parts = key.substring(this.prefix.length).split(':');\n\n                      if (parts[1] === networkId) {\n                        result.push(parts[0]);\n                      }\n                    }\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n\n                return _context6.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getAccounts(_x8) {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }()\n    /**\n     * @hidden\n     * Helper function to retrieve a local storage key\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the storage keythat's sought\n     * @returns {string} An example might be: `near-api-js:keystore:near-friend:default`\n     */\n\n  }, {\n    key: \"storageKeyForSecretKey\",\n    value: function storageKeyForSecretKey(networkId, accountId) {\n      return \"\".concat(this.prefix).concat(accountId, \":\").concat(networkId);\n    }\n    /** @hidden */\n\n  }, {\n    key: \"storageKeys\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function storageKeys() {\n      var i;\n      return _regeneratorRuntime.wrap(function storageKeys$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              i = 0;\n\n            case 1:\n              if (!(i < this.localStorage.length)) {\n                _context7.next = 7;\n                break;\n              }\n\n              _context7.next = 4;\n              return this.localStorage.key(i);\n\n            case 4:\n              i++;\n              _context7.next = 1;\n              break;\n\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, storageKeys, this);\n    })\n  }]);\n\n  return BrowserLocalStorageKeyStore;\n}(keystore_1.KeyStore);\n\nexports.BrowserLocalStorageKeyStore = BrowserLocalStorageKeyStore;","map":{"version":3,"names":["Object","defineProperty","exports","value","BrowserLocalStorageKeyStore","keystore_1","require","key_pair_1","LOCAL_STORAGE_KEY_PREFIX","localStorage","window","prefix","networkId","accountId","keyPair","setItem","storageKeyForSecretKey","toString","getItem","KeyPair","fromString","removeItem","storageKeys","key","startsWith","result","Set","parts","substring","length","split","add","Array","from","values","push","i","KeyStore"],"sources":["D:/Projects/verifiedprofilev2/node_modules/near-api-js/lib/key_stores/browser_local_storage_key_store.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BrowserLocalStorageKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nconst key_pair_1 = require(\"../utils/key_pair\");\nconst LOCAL_STORAGE_KEY_PREFIX = 'near-api-js:keystore:';\n/**\n * This class is used to store keys in the browsers local storage.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores } from 'near-api-js';\n *\n * const keyStore = new keyStores.BrowserLocalStorageKeyStore();\n * const config = {\n *   keyStore, // instance of BrowserLocalStorageKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\nclass BrowserLocalStorageKeyStore extends keystore_1.KeyStore {\n    /**\n     * @param localStorage defaults to window.localStorage\n     * @param prefix defaults to `near-api-js:keystore:`\n     */\n    constructor(localStorage = window.localStorage, prefix = LOCAL_STORAGE_KEY_PREFIX) {\n        super();\n        this.localStorage = localStorage;\n        this.prefix = prefix;\n    }\n    /**\n     * Stores a {@link KeyPair} in local storage.\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    async setKey(networkId, accountId, keyPair) {\n        this.localStorage.setItem(this.storageKeyForSecretKey(networkId, accountId), keyPair.toString());\n    }\n    /**\n     * Gets a {@link KeyPair} from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    async getKey(networkId, accountId) {\n        const value = this.localStorage.getItem(this.storageKeyForSecretKey(networkId, accountId));\n        if (!value) {\n            return null;\n        }\n        return key_pair_1.KeyPair.fromString(value);\n    }\n    /**\n     * Removes a {@link KeyPair} from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    async removeKey(networkId, accountId) {\n        this.localStorage.removeItem(this.storageKeyForSecretKey(networkId, accountId));\n    }\n    /**\n     * Removes all items that start with `prefix` from local storage\n     */\n    async clear() {\n        for (const key of this.storageKeys()) {\n            if (key.startsWith(this.prefix)) {\n                this.localStorage.removeItem(key);\n            }\n        }\n    }\n    /**\n     * Get the network(s) from local storage\n     * @returns {Promise<string[]>}\n     */\n    async getNetworks() {\n        const result = new Set();\n        for (const key of this.storageKeys()) {\n            if (key.startsWith(this.prefix)) {\n                const parts = key.substring(this.prefix.length).split(':');\n                result.add(parts[1]);\n            }\n        }\n        return Array.from(result.values());\n    }\n    /**\n     * Gets the account(s) from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    async getAccounts(networkId) {\n        const result = new Array();\n        for (const key of this.storageKeys()) {\n            if (key.startsWith(this.prefix)) {\n                const parts = key.substring(this.prefix.length).split(':');\n                if (parts[1] === networkId) {\n                    result.push(parts[0]);\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * @hidden\n     * Helper function to retrieve a local storage key\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the storage keythat's sought\n     * @returns {string} An example might be: `near-api-js:keystore:near-friend:default`\n     */\n    storageKeyForSecretKey(networkId, accountId) {\n        return `${this.prefix}${accountId}:${networkId}`;\n    }\n    /** @hidden */\n    *storageKeys() {\n        for (let i = 0; i < this.localStorage.length; i++) {\n            yield this.localStorage.key(i);\n        }\n    }\n}\nexports.BrowserLocalStorageKeyStore = BrowserLocalStorageKeyStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}