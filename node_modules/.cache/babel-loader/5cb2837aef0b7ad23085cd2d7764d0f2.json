{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;\n/**\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the NEAR RPC API.\n * @see {@link providers/provider} for a list of request and response types\n */\n\nvar depd_1 = __importDefault(require(\"depd\"));\n\nvar provider_1 = require(\"./provider\");\n\nvar web_1 = require(\"../utils/web\");\n\nvar errors_1 = require(\"../utils/errors\");\n\nObject.defineProperty(exports, \"TypedError\", {\n  enumerable: true,\n  get: function get() {\n    return errors_1.TypedError;\n  }\n});\nObject.defineProperty(exports, \"ErrorContext\", {\n  enumerable: true,\n  get: function get() {\n    return errors_1.ErrorContext;\n  }\n});\n\nvar borsh_1 = require(\"borsh\");\n\nvar exponential_backoff_1 = __importDefault(require(\"../utils/exponential-backoff\"));\n\nvar rpc_errors_1 = require(\"../utils/rpc_errors\"); // Default number of retries before giving up on a request.\n\n\nvar REQUEST_RETRY_NUMBER = 12; // Default wait until next retry in millis.\n\nvar REQUEST_RETRY_WAIT = 500; // Exponential back off for waiting to retry.\n\nvar REQUEST_RETRY_WAIT_BACKOFF = 1.5; /// Keep ids unique across all connections.\n\nvar _nextId = 123;\n/**\n * Client class to interact with the NEAR RPC API.\n * @see {@link https://github.com/near/nearcore/tree/master/chain/jsonrpc}\n */\n\nvar JsonRpcProvider = /*#__PURE__*/function (_provider_1$Provider) {\n  _inherits(JsonRpcProvider, _provider_1$Provider);\n\n  var _super = _createSuper(JsonRpcProvider);\n\n  /**\n   * @param url RPC API endpoint URL\n   */\n  function JsonRpcProvider(url) {\n    var _this;\n\n    _classCallCheck(this, JsonRpcProvider);\n\n    _this = _super.call(this);\n    _this.connection = {\n      url: url\n    };\n    return _this;\n  }\n  /**\n   * Gets the RPC's status\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#general-validator-status}\n   */\n\n\n  _createClass(JsonRpcProvider, [{\n    key: \"status\",\n    value: function () {\n      var _status = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.sendJsonRpc('status', []));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function status() {\n        return _status.apply(this, arguments);\n      }\n\n      return status;\n    }()\n    /**\n     * Sends a signed transaction to the RPC and waits until transaction is fully complete\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await}\n     *\n     * @param signedTransaction The signed transaction being sent\n     */\n\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(signedTransaction) {\n        var bytes;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                bytes = signedTransaction.encode();\n                return _context2.abrupt(\"return\", this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function sendTransaction(_x) {\n        return _sendTransaction.apply(this, arguments);\n      }\n\n      return sendTransaction;\n    }()\n    /**\n     * Sends a signed transaction to the RPC and immediately returns transaction hash\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n\n  }, {\n    key: \"sendTransactionAsync\",\n    value: function () {\n      var _sendTransactionAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(signedTransaction) {\n        var bytes;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                bytes = signedTransaction.encode();\n                return _context3.abrupt(\"return\", this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function sendTransactionAsync(_x2) {\n        return _sendTransactionAsync.apply(this, arguments);\n      }\n\n      return sendTransactionAsync;\n    }()\n    /**\n     * Gets a transaction's status from the RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#transaction-status}\n     *\n     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n     * @param accountId The NEAR account that signed the transaction\n     */\n\n  }, {\n    key: \"txStatus\",\n    value: function () {\n      var _txStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(txHash, accountId) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(typeof txHash === 'string')) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", this.txStatusString(txHash, accountId));\n\n              case 4:\n                return _context4.abrupt(\"return\", this.txStatusUint8Array(txHash, accountId));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function txStatus(_x3, _x4) {\n        return _txStatus.apply(this, arguments);\n      }\n\n      return txStatus;\n    }()\n  }, {\n    key: \"txStatusUint8Array\",\n    value: function () {\n      var _txStatusUint8Array = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(txHash, accountId) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.sendJsonRpc('tx', [borsh_1.baseEncode(txHash), accountId]));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function txStatusUint8Array(_x5, _x6) {\n        return _txStatusUint8Array.apply(this, arguments);\n      }\n\n      return txStatusUint8Array;\n    }()\n  }, {\n    key: \"txStatusString\",\n    value: function () {\n      var _txStatusString = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(txHash, accountId) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.sendJsonRpc('tx', [txHash, accountId]));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function txStatusString(_x7, _x8) {\n        return _txStatusString.apply(this, arguments);\n      }\n\n      return txStatusString;\n    }()\n    /**\n     * Gets a transaction's status from the RPC with receipts\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n\n  }, {\n    key: \"txStatusReceipts\",\n    value: function () {\n      var _txStatusReceipts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(txHash, accountId) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_tx_status', [borsh_1.baseEncode(txHash), accountId]));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function txStatusReceipts(_x9, _x10) {\n        return _txStatusReceipts.apply(this, arguments);\n      }\n\n      return txStatusReceipts;\n    }()\n    /**\n     * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)\n     * Query the RPC by passing an {@link RpcQueryRequest}\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts}\n     *\n     * @typeParam T the shape of the returned query response\n     */\n\n  }, {\n    key: \"query\",\n    value: function () {\n      var _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var result,\n            _len,\n            args,\n            _key,\n            path,\n            data,\n            _args8 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                for (_len = _args8.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = _args8[_key];\n                }\n\n                if (!(args.length === 1)) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                _context8.next = 4;\n                return this.sendJsonRpc('query', args[0]);\n\n              case 4:\n                result = _context8.sent;\n                _context8.next = 11;\n                break;\n\n              case 7:\n                path = args[0], data = args[1];\n                _context8.next = 10;\n                return this.sendJsonRpc('query', [path, data]);\n\n              case 10:\n                result = _context8.sent;\n\n              case 11:\n                if (!(result && result.error)) {\n                  _context8.next = 13;\n                  break;\n                }\n\n                throw new errors_1.TypedError(\"Querying \".concat(args, \" failed: \").concat(result.error, \".\\n\").concat(JSON.stringify(result, null, 2)), rpc_errors_1.getErrorTypeFromErrorMessage(result.error));\n\n              case 13:\n                return _context8.abrupt(\"return\", result);\n\n              case 14:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function query() {\n        return _query.apply(this, arguments);\n      }\n\n      return query;\n    }()\n    /**\n     * Query for block info from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see {@link https://docs.near.org/docs/interaction/rpc#block}\n     *\n     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n     */\n\n  }, {\n    key: \"block\",\n    value: function () {\n      var _block = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(blockQuery) {\n        var finality, blockId, deprecate;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n\n                if (typeof blockQuery !== 'object') {\n                  deprecate = depd_1.default('JsonRpcProvider.block(blockId)');\n                  deprecate('use `block({ blockId })` or `block({ finality })` instead');\n                  blockId = blockQuery;\n                }\n\n                return _context9.abrupt(\"return\", this.sendJsonRpc('block', {\n                  block_id: blockId,\n                  finality: finality\n                }));\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function block(_x11) {\n        return _block.apply(this, arguments);\n      }\n\n      return block;\n    }()\n    /**\n     * Query changes in block from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#block-details)\n     */\n\n  }, {\n    key: \"blockChanges\",\n    value: function () {\n      var _blockChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(blockQuery) {\n        var finality, blockId;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n                return _context10.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_changes_in_block', {\n                  block_id: blockId,\n                  finality: finality\n                }));\n\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function blockChanges(_x12) {\n        return _blockChanges.apply(this, arguments);\n      }\n\n      return blockChanges;\n    }()\n    /**\n     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * @see {@link https://docs.near.org/docs/interaction/rpc#chunk}\n     *\n     * @param chunkId Hash of a chunk ID or shard ID\n     */\n\n  }, {\n    key: \"chunk\",\n    value: function () {\n      var _chunk = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(chunkId) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this.sendJsonRpc('chunk', [chunkId]));\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function chunk(_x13) {\n        return _chunk.apply(this, arguments);\n      }\n\n      return chunk;\n    }()\n    /**\n     * Query validators of the epoch defined by the given block id.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n\n  }, {\n    key: \"validators\",\n    value: function () {\n      var _validators = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(blockId) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", this.sendJsonRpc('validators', [blockId]));\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function validators(_x14) {\n        return _validators.apply(this, arguments);\n      }\n\n      return validators;\n    }()\n    /**\n     * @deprecated\n     * Gets the genesis config from RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#genesis-config}\n     */\n\n  }, {\n    key: \"experimental_genesisConfig\",\n    value: function () {\n      var _experimental_genesisConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var deprecate;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                deprecate = depd_1.default('JsonRpcProvider.experimental_protocolConfig()');\n                deprecate('use `experimental_protocolConfig({ sync_checkpoint: \\'genesis\\' })` to fetch the up-to-date or genesis protocol config explicitly');\n                _context13.next = 4;\n                return this.sendJsonRpc('EXPERIMENTAL_protocol_config', {\n                  sync_checkpoint: 'genesis'\n                });\n\n              case 4:\n                return _context13.abrupt(\"return\", _context13.sent);\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function experimental_genesisConfig() {\n        return _experimental_genesisConfig.apply(this, arguments);\n      }\n\n      return experimental_genesisConfig;\n    }()\n    /**\n     * Gets the protocol config at a block from RPC\n     * @see {@link }\n     *\n     * @param blockReference specifies the block to get the protocol config for\n     */\n\n  }, {\n    key: \"experimental_protocolConfig\",\n    value: function () {\n      var _experimental_protocolConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(blockReference) {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.sendJsonRpc('EXPERIMENTAL_protocol_config', blockReference);\n\n              case 2:\n                return _context14.abrupt(\"return\", _context14.sent);\n\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function experimental_protocolConfig(_x15) {\n        return _experimental_protocolConfig.apply(this, arguments);\n      }\n\n      return experimental_protocolConfig;\n    }()\n    /**\n     * @deprecated Use {@link lightClientProof} instead\n     */\n\n  }, {\n    key: \"experimental_lightClientProof\",\n    value: function () {\n      var _experimental_lightClientProof = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(request) {\n        var deprecate;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                deprecate = depd_1.default('JsonRpcProvider.experimental_lightClientProof(request)');\n                deprecate('use `lightClientProof` instead');\n                _context15.next = 4;\n                return this.lightClientProof(request);\n\n              case 4:\n                return _context15.abrupt(\"return\", _context15.sent);\n\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function experimental_lightClientProof(_x16) {\n        return _experimental_lightClientProof.apply(this, arguments);\n      }\n\n      return experimental_lightClientProof;\n    }()\n    /**\n     * Gets a light client execution proof for verifying execution outcomes\n     * @see {@link https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof}\n     */\n\n  }, {\n    key: \"lightClientProof\",\n    value: function () {\n      var _lightClientProof = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(request) {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n\n              case 2:\n                return _context16.abrupt(\"return\", _context16.sent);\n\n              case 3:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function lightClientProof(_x17) {\n        return _lightClientProof.apply(this, arguments);\n      }\n\n      return lightClientProof;\n    }()\n    /**\n     * Gets access key changes for a given array of accountIds\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n     * @returns {Promise<ChangeResult>}\n     */\n\n  }, {\n    key: \"accessKeyChanges\",\n    value: function () {\n      var _accessKeyChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(accountIdArray, blockQuery) {\n        var finality, blockId;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n                return _context17.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_changes', {\n                  changes_type: 'all_access_key_changes',\n                  account_ids: accountIdArray,\n                  block_id: blockId,\n                  finality: finality\n                }));\n\n              case 3:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function accessKeyChanges(_x18, _x19) {\n        return _accessKeyChanges.apply(this, arguments);\n      }\n\n      return accessKeyChanges;\n    }()\n    /**\n     * Gets single access key changes for a given array of access keys\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n     * @returns {Promise<ChangeResult>}\n     */\n\n  }, {\n    key: \"singleAccessKeyChanges\",\n    value: function () {\n      var _singleAccessKeyChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(accessKeyArray, blockQuery) {\n        var finality, blockId;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n                return _context18.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_changes', {\n                  changes_type: 'single_access_key_changes',\n                  keys: accessKeyArray,\n                  block_id: blockId,\n                  finality: finality\n                }));\n\n              case 3:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function singleAccessKeyChanges(_x20, _x21) {\n        return _singleAccessKeyChanges.apply(this, arguments);\n      }\n\n      return singleAccessKeyChanges;\n    }()\n    /**\n     * Gets account changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n\n  }, {\n    key: \"accountChanges\",\n    value: function () {\n      var _accountChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(accountIdArray, blockQuery) {\n        var finality, blockId;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n                return _context19.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_changes', {\n                  changes_type: 'account_changes',\n                  account_ids: accountIdArray,\n                  block_id: blockId,\n                  finality: finality\n                }));\n\n              case 3:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function accountChanges(_x22, _x23) {\n        return _accountChanges.apply(this, arguments);\n      }\n\n      return accountChanges;\n    }()\n    /**\n     * Gets contract state changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: If you pass a keyPrefix it must be base64 encoded\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n\n  }, {\n    key: \"contractStateChanges\",\n    value: function () {\n      var _contractStateChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(accountIdArray, blockQuery) {\n        var keyPrefix,\n            finality,\n            blockId,\n            _args20 = arguments;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                keyPrefix = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : '';\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n                return _context20.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_changes', {\n                  changes_type: 'data_changes',\n                  account_ids: accountIdArray,\n                  key_prefix_base64: keyPrefix,\n                  block_id: blockId,\n                  finality: finality\n                }));\n\n              case 4:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function contractStateChanges(_x24, _x25) {\n        return _contractStateChanges.apply(this, arguments);\n      }\n\n      return contractStateChanges;\n    }()\n    /**\n     * Gets contract code changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: Change is returned in a base64 encoded WASM file\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n\n  }, {\n    key: \"contractCodeChanges\",\n    value: function () {\n      var _contractCodeChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(accountIdArray, blockQuery) {\n        var finality, blockId;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n                return _context21.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_changes', {\n                  changes_type: 'contract_code_changes',\n                  account_ids: accountIdArray,\n                  block_id: blockId,\n                  finality: finality\n                }));\n\n              case 3:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function contractCodeChanges(_x26, _x27) {\n        return _contractCodeChanges.apply(this, arguments);\n      }\n\n      return contractCodeChanges;\n    }()\n    /**\n     * Returns gas price for a specific block_height or block_hash.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#gas-price}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n\n  }, {\n    key: \"gasPrice\",\n    value: function () {\n      var _gasPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(blockId) {\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.sendJsonRpc('gas_price', [blockId]);\n\n              case 2:\n                return _context22.abrupt(\"return\", _context22.sent);\n\n              case 3:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function gasPrice(_x28) {\n        return _gasPrice.apply(this, arguments);\n      }\n\n      return gasPrice;\n    }()\n    /**\n     * Directly call the RPC specifying the method and params\n     *\n     * @param method RPC method\n     * @param params Parameters to the method\n     */\n\n  }, {\n    key: \"sendJsonRpc\",\n    value: function () {\n      var _sendJsonRpc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(method, params) {\n        var _this2 = this;\n\n        var response, result;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return exponential_backoff_1.default(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n                  var request, _response, errorMessage;\n\n                  return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n                    while (1) {\n                      switch (_context23.prev = _context23.next) {\n                        case 0:\n                          _context23.prev = 0;\n                          request = {\n                            method: method,\n                            params: params,\n                            id: _nextId++,\n                            jsonrpc: '2.0'\n                          };\n                          _context23.next = 4;\n                          return web_1.fetchJson(_this2.connection, JSON.stringify(request));\n\n                        case 4:\n                          _response = _context23.sent;\n\n                          if (!_response.error) {\n                            _context23.next = 16;\n                            break;\n                          }\n\n                          if (!(typeof _response.error.data === 'object')) {\n                            _context23.next = 12;\n                            break;\n                          }\n\n                          if (!(typeof _response.error.data.error_message === 'string' && typeof _response.error.data.error_type === 'string')) {\n                            _context23.next = 9;\n                            break;\n                          }\n\n                          throw new errors_1.TypedError(_response.error.data.error_message, _response.error.data.error_type);\n\n                        case 9:\n                          throw rpc_errors_1.parseRpcError(_response.error.data);\n\n                        case 12:\n                          errorMessage = \"[\".concat(_response.error.code, \"] \").concat(_response.error.message, \": \").concat(_response.error.data); // NOTE: All this hackery is happening because structured errors not implemented\n                          // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n\n                          if (!(_response.error.data === 'Timeout' || errorMessage.includes('Timeout error') || errorMessage.includes('query has timed out'))) {\n                            _context23.next = 15;\n                            break;\n                          }\n\n                          throw new errors_1.TypedError(errorMessage, 'TimeoutError');\n\n                        case 15:\n                          throw new errors_1.TypedError(errorMessage, rpc_errors_1.getErrorTypeFromErrorMessage(_response.error.data));\n\n                        case 16:\n                          return _context23.abrupt(\"return\", _response);\n\n                        case 19:\n                          _context23.prev = 19;\n                          _context23.t0 = _context23[\"catch\"](0);\n\n                          if (!(_context23.t0.type === 'TimeoutError')) {\n                            _context23.next = 24;\n                            break;\n                          }\n\n                          console.warn(\"Retrying request to \".concat(method, \" as it has timed out\"), params);\n                          return _context23.abrupt(\"return\", null);\n\n                        case 24:\n                          throw _context23.t0;\n\n                        case 25:\n                        case \"end\":\n                          return _context23.stop();\n                      }\n                    }\n                  }, _callee23, null, [[0, 19]]);\n                })));\n\n              case 2:\n                response = _context24.sent;\n                result = response.result; // From jsonrpc spec:\n                // result\n                //   This member is REQUIRED on success.\n                //   This member MUST NOT exist if there was an error invoking the method.\n\n                if (!(typeof result === 'undefined')) {\n                  _context24.next = 6;\n                  break;\n                }\n\n                throw new errors_1.TypedError(\"Exceeded \".concat(REQUEST_RETRY_NUMBER, \" attempts for request to \").concat(method, \".\"), 'RetriesExceeded');\n\n              case 6:\n                return _context24.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24);\n      }));\n\n      function sendJsonRpc(_x29, _x30) {\n        return _sendJsonRpc.apply(this, arguments);\n      }\n\n      return sendJsonRpc;\n    }()\n  }]);\n\n  return JsonRpcProvider;\n}(provider_1.Provider);\n\nexports.JsonRpcProvider = JsonRpcProvider;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","JsonRpcProvider","ErrorContext","TypedError","depd_1","require","provider_1","web_1","errors_1","enumerable","get","borsh_1","exponential_backoff_1","rpc_errors_1","REQUEST_RETRY_NUMBER","REQUEST_RETRY_WAIT","REQUEST_RETRY_WAIT_BACKOFF","_nextId","url","connection","sendJsonRpc","signedTransaction","bytes","encode","Buffer","from","toString","txHash","accountId","txStatusString","txStatusUint8Array","baseEncode","args","length","result","path","data","error","JSON","stringify","getErrorTypeFromErrorMessage","blockQuery","finality","blockId","deprecate","default","block_id","chunkId","sync_checkpoint","blockReference","request","lightClientProof","accountIdArray","changes_type","account_ids","accessKeyArray","keys","keyPrefix","key_prefix_base64","method","params","id","jsonrpc","fetchJson","response","error_message","error_type","parseRpcError","errorMessage","code","message","includes","type","console","warn","Provider"],"sources":["D:/Projects/verifiedprofilev2/node_modules/near-api-js/lib/providers/json-rpc-provider.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;\n/**\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the NEAR RPC API.\n * @see {@link providers/provider} for a list of request and response types\n */\nconst depd_1 = __importDefault(require(\"depd\"));\nconst provider_1 = require(\"./provider\");\nconst web_1 = require(\"../utils/web\");\nconst errors_1 = require(\"../utils/errors\");\nObject.defineProperty(exports, \"TypedError\", { enumerable: true, get: function () { return errors_1.TypedError; } });\nObject.defineProperty(exports, \"ErrorContext\", { enumerable: true, get: function () { return errors_1.ErrorContext; } });\nconst borsh_1 = require(\"borsh\");\nconst exponential_backoff_1 = __importDefault(require(\"../utils/exponential-backoff\"));\nconst rpc_errors_1 = require(\"../utils/rpc_errors\");\n// Default number of retries before giving up on a request.\nconst REQUEST_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst REQUEST_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5;\n/// Keep ids unique across all connections.\nlet _nextId = 123;\n/**\n * Client class to interact with the NEAR RPC API.\n * @see {@link https://github.com/near/nearcore/tree/master/chain/jsonrpc}\n */\nclass JsonRpcProvider extends provider_1.Provider {\n    /**\n     * @param url RPC API endpoint URL\n     */\n    constructor(url) {\n        super();\n        this.connection = { url };\n    }\n    /**\n     * Gets the RPC's status\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#general-validator-status}\n     */\n    async status() {\n        return this.sendJsonRpc('status', []);\n    }\n    /**\n     * Sends a signed transaction to the RPC and waits until transaction is fully complete\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await}\n     *\n     * @param signedTransaction The signed transaction being sent\n     */\n    async sendTransaction(signedTransaction) {\n        const bytes = signedTransaction.encode();\n        return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]);\n    }\n    /**\n     * Sends a signed transaction to the RPC and immediately returns transaction hash\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async sendTransactionAsync(signedTransaction) {\n        const bytes = signedTransaction.encode();\n        return this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]);\n    }\n    /**\n     * Gets a transaction's status from the RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#transaction-status}\n     *\n     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n     * @param accountId The NEAR account that signed the transaction\n     */\n    async txStatus(txHash, accountId) {\n        if (typeof txHash === 'string') {\n            return this.txStatusString(txHash, accountId);\n        }\n        else {\n            return this.txStatusUint8Array(txHash, accountId);\n        }\n    }\n    async txStatusUint8Array(txHash, accountId) {\n        return this.sendJsonRpc('tx', [borsh_1.baseEncode(txHash), accountId]);\n    }\n    async txStatusString(txHash, accountId) {\n        return this.sendJsonRpc('tx', [txHash, accountId]);\n    }\n    /**\n     * Gets a transaction's status from the RPC with receipts\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async txStatusReceipts(txHash, accountId) {\n        return this.sendJsonRpc('EXPERIMENTAL_tx_status', [borsh_1.baseEncode(txHash), accountId]);\n    }\n    /**\n     * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)\n     * Query the RPC by passing an {@link RpcQueryRequest}\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts}\n     *\n     * @typeParam T the shape of the returned query response\n     */\n    async query(...args) {\n        let result;\n        if (args.length === 1) {\n            result = await this.sendJsonRpc('query', args[0]);\n        }\n        else {\n            const [path, data] = args;\n            result = await this.sendJsonRpc('query', [path, data]);\n        }\n        if (result && result.error) {\n            throw new errors_1.TypedError(`Querying ${args} failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`, rpc_errors_1.getErrorTypeFromErrorMessage(result.error));\n        }\n        return result;\n    }\n    /**\n     * Query for block info from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see {@link https://docs.near.org/docs/interaction/rpc#block}\n     *\n     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n     */\n    async block(blockQuery) {\n        const { finality } = blockQuery;\n        let { blockId } = blockQuery;\n        if (typeof blockQuery !== 'object') {\n            const deprecate = depd_1.default('JsonRpcProvider.block(blockId)');\n            deprecate('use `block({ blockId })` or `block({ finality })` instead');\n            blockId = blockQuery;\n        }\n        return this.sendJsonRpc('block', { block_id: blockId, finality });\n    }\n    /**\n     * Query changes in block from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#block-details)\n     */\n    async blockChanges(blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', { block_id: blockId, finality });\n    }\n    /**\n     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * @see {@link https://docs.near.org/docs/interaction/rpc#chunk}\n     *\n     * @param chunkId Hash of a chunk ID or shard ID\n     */\n    async chunk(chunkId) {\n        return this.sendJsonRpc('chunk', [chunkId]);\n    }\n    /**\n     * Query validators of the epoch defined by the given block id.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async validators(blockId) {\n        return this.sendJsonRpc('validators', [blockId]);\n    }\n    /**\n     * @deprecated\n     * Gets the genesis config from RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#genesis-config}\n     */\n    async experimental_genesisConfig() {\n        const deprecate = depd_1.default('JsonRpcProvider.experimental_protocolConfig()');\n        deprecate('use `experimental_protocolConfig({ sync_checkpoint: \\'genesis\\' })` to fetch the up-to-date or genesis protocol config explicitly');\n        return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', { sync_checkpoint: 'genesis' });\n    }\n    /**\n     * Gets the protocol config at a block from RPC\n     * @see {@link }\n     *\n     * @param blockReference specifies the block to get the protocol config for\n     */\n    async experimental_protocolConfig(blockReference) {\n        return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', blockReference);\n    }\n    /**\n     * @deprecated Use {@link lightClientProof} instead\n     */\n    async experimental_lightClientProof(request) {\n        const deprecate = depd_1.default('JsonRpcProvider.experimental_lightClientProof(request)');\n        deprecate('use `lightClientProof` instead');\n        return await this.lightClientProof(request);\n    }\n    /**\n     * Gets a light client execution proof for verifying execution outcomes\n     * @see {@link https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof}\n     */\n    async lightClientProof(request) {\n        return await this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n    }\n    /**\n     * Gets access key changes for a given array of accountIds\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accessKeyChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'all_access_key_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets single access key changes for a given array of access keys\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n     * @returns {Promise<ChangeResult>}\n     */\n    async singleAccessKeyChanges(accessKeyArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'single_access_key_changes',\n            keys: accessKeyArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets account changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accountChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'account_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets contract state changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: If you pass a keyPrefix it must be base64 encoded\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'data_changes',\n            account_ids: accountIdArray,\n            key_prefix_base64: keyPrefix,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets contract code changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: Change is returned in a base64 encoded WASM file\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractCodeChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'contract_code_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Returns gas price for a specific block_height or block_hash.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#gas-price}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async gasPrice(blockId) {\n        return await this.sendJsonRpc('gas_price', [blockId]);\n    }\n    /**\n     * Directly call the RPC specifying the method and params\n     *\n     * @param method RPC method\n     * @param params Parameters to the method\n     */\n    async sendJsonRpc(method, params) {\n        const response = await exponential_backoff_1.default(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, async () => {\n            try {\n                const request = {\n                    method,\n                    params,\n                    id: (_nextId++),\n                    jsonrpc: '2.0'\n                };\n                const response = await web_1.fetchJson(this.connection, JSON.stringify(request));\n                if (response.error) {\n                    if (typeof response.error.data === 'object') {\n                        if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n                            // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                            throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n                        }\n                        throw rpc_errors_1.parseRpcError(response.error.data);\n                    }\n                    else {\n                        const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;\n                        // NOTE: All this hackery is happening because structured errors not implemented\n                        // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n                        if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error')\n                            || errorMessage.includes('query has timed out')) {\n                            throw new errors_1.TypedError(errorMessage, 'TimeoutError');\n                        }\n                        throw new errors_1.TypedError(errorMessage, rpc_errors_1.getErrorTypeFromErrorMessage(response.error.data));\n                    }\n                }\n                // Success when response.error is not exist\n                return response;\n            }\n            catch (error) {\n                if (error.type === 'TimeoutError') {\n                    console.warn(`Retrying request to ${method} as it has timed out`, params);\n                    return null;\n                }\n                throw error;\n            }\n        });\n        const { result } = response;\n        // From jsonrpc spec:\n        // result\n        //   This member is REQUIRED on success.\n        //   This member MUST NOT exist if there was an error invoking the method.\n        if (typeof result === 'undefined') {\n            throw new errors_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, 'RetriesExceeded');\n        }\n        return result;\n    }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}