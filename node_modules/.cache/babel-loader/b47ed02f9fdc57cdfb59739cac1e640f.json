{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _slicedToArray = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _get = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _regeneratorRuntime = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Projects/verifiedprofilev2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectedWalletAccount = exports.WalletAccount = exports.WalletConnection = void 0;\n/**\n * The classes in this module are used in conjunction with the {@link BrowserLocalStorageKeyStore}. This module exposes two classes:\n * * {@link WalletConnection} which redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.\n * * {@link ConnectedWalletAccount} is an {@link Account} implementation that uses {@link WalletConnection} to get keys\n *\n * @module walletAccount\n */\n\nvar depd_1 = __importDefault(require(\"depd\"));\n\nvar account_1 = require(\"./account\");\n\nvar transaction_1 = require(\"./transaction\");\n\nvar utils_1 = require(\"./utils\");\n\nvar borsh_1 = require(\"borsh\");\n\nvar borsh_2 = require(\"borsh\");\n\nvar LOGIN_WALLET_URL_SUFFIX = '/login/';\nvar MULTISIG_HAS_METHOD = 'add_request_and_confirm';\nvar LOCAL_STORAGE_KEY_SUFFIX = '_wallet_auth_key';\nvar PENDING_ACCESS_KEY_PREFIX = 'pending_key'; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)\n\n/**\n * This class is used in conjunction with the {@link BrowserLocalStorageKeyStore}.\n * It redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#wallet}\n * @example\n * ```js\n * // create new WalletConnection instance\n * const wallet = new WalletConnection(near, 'my-app');\n *\n * // If not signed in redirect to the NEAR wallet to sign in\n * // keys will be stored in the BrowserLocalStorageKeyStore\n * if(!wallet.isSingnedIn()) return wallet.requestSignIn()\n * ```\n */\n\nvar WalletConnection = /*#__PURE__*/function () {\n  function WalletConnection(near, appKeyPrefix) {\n    _classCallCheck(this, WalletConnection);\n\n    this._near = near;\n    var authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;\n    var authData = JSON.parse(window.localStorage.getItem(authDataKey));\n    this._networkId = near.config.networkId;\n    this._walletBaseUrl = near.config.walletUrl;\n    appKeyPrefix = appKeyPrefix || near.config.contractName || 'default';\n    this._keyStore = near.connection.signer.keyStore;\n    this._authData = authData || {\n      allKeys: []\n    };\n    this._authDataKey = authDataKey;\n\n    if (!this.isSignedIn()) {\n      this._completeSignInWithAccessKey();\n    }\n  }\n  /**\n   * Returns true, if this WalletAccount is authorized with the wallet.\n   * @example\n   * ```js\n   * const wallet = new WalletConnection(near, 'my-app');\n   * wallet.isSignedIn();\n   * ```\n   */\n\n\n  _createClass(WalletConnection, [{\n    key: \"isSignedIn\",\n    value: function isSignedIn() {\n      return !!this._authData.accountId;\n    }\n    /**\n     * Returns authorized Account ID.\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * wallet.getAccountId();\n     * ```\n     */\n\n  }, {\n    key: \"getAccountId\",\n    value: function getAccountId() {\n      return this._authData.accountId || '';\n    }\n    /**\n     * Redirects current page to the wallet authentication page.\n     * @param options An optional options object\n     * @param options.contractId The NEAR account where the contract is deployed\n     * @param options.successUrl URL to redirect upon success. Default: current url\n     * @param options.failureUrl URL to redirect upon failure. Default: current url\n     *\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * // redirects to the NEAR Wallet\n     * wallet.requestSignIn({ contractId: 'account-with-deploy-contract.near' });\n     * ```\n     */\n\n  }, {\n    key: \"requestSignIn\",\n    value: function () {\n      var _requestSignIn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var contractIdOrOptions,\n            title,\n            successUrl,\n            failureUrl,\n            options,\n            deprecate,\n            currentUrl,\n            newUrl,\n            contractAccount,\n            accessKey,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                contractIdOrOptions = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                title = _args.length > 1 ? _args[1] : undefined;\n                successUrl = _args.length > 2 ? _args[2] : undefined;\n                failureUrl = _args.length > 3 ? _args[3] : undefined;\n\n                if (typeof contractIdOrOptions === 'string') {\n                  deprecate = depd_1.default('requestSignIn(contractId, title)');\n                  deprecate('`title` ignored; use `requestSignIn({ contractId, methodNames, successUrl, failureUrl })` instead');\n                  options = {\n                    contractId: contractIdOrOptions,\n                    successUrl: successUrl,\n                    failureUrl: failureUrl\n                  };\n                } else {\n                  options = contractIdOrOptions;\n                }\n\n                currentUrl = new URL(window.location.href);\n                newUrl = new URL(this._walletBaseUrl + LOGIN_WALLET_URL_SUFFIX);\n                newUrl.searchParams.set('success_url', options.successUrl || currentUrl.href);\n                newUrl.searchParams.set('failure_url', options.failureUrl || currentUrl.href);\n\n                if (!options.contractId) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.next = 12;\n                return this._near.account(options.contractId);\n\n              case 12:\n                contractAccount = _context.sent;\n                _context.next = 15;\n                return contractAccount.state();\n\n              case 15:\n                newUrl.searchParams.set('contract_id', options.contractId);\n                accessKey = utils_1.KeyPair.fromRandom('ed25519');\n                newUrl.searchParams.set('public_key', accessKey.getPublicKey().toString());\n                _context.next = 20;\n                return this._keyStore.setKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + accessKey.getPublicKey(), accessKey);\n\n              case 20:\n                if (options.methodNames) {\n                  options.methodNames.forEach(function (methodName) {\n                    newUrl.searchParams.append('methodNames', methodName);\n                  });\n                }\n\n                window.location.assign(newUrl.toString());\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function requestSignIn() {\n        return _requestSignIn.apply(this, arguments);\n      }\n\n      return requestSignIn;\n    }()\n  }, {\n    key: \"requestSignTransactions\",\n    value: function () {\n      var _requestSignTransactions2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var deprecate,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!Array.isArray(_args2.length <= 0 ? undefined : _args2[0])) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                deprecate = depd_1.default('WalletConnection.requestSignTransactions(transactions, callbackUrl, meta)');\n                deprecate('use `WalletConnection.requestSignTransactions(RequestSignTransactionsOptions)` instead');\n                return _context2.abrupt(\"return\", this._requestSignTransactions({\n                  transactions: _args2.length <= 0 ? undefined : _args2[0],\n                  callbackUrl: _args2.length <= 1 ? undefined : _args2[1],\n                  meta: _args2.length <= 2 ? undefined : _args2[2]\n                }));\n\n              case 4:\n                return _context2.abrupt(\"return\", this._requestSignTransactions(_args2.length <= 0 ? undefined : _args2[0]));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function requestSignTransactions() {\n        return _requestSignTransactions2.apply(this, arguments);\n      }\n\n      return requestSignTransactions;\n    }()\n  }, {\n    key: \"_requestSignTransactions\",\n    value: function () {\n      var _requestSignTransactions3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref) {\n        var transactions, meta, callbackUrl, currentUrl, newUrl;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                transactions = _ref.transactions, meta = _ref.meta, callbackUrl = _ref.callbackUrl;\n                currentUrl = new URL(window.location.href);\n                newUrl = new URL('sign', this._walletBaseUrl);\n                newUrl.searchParams.set('transactions', transactions.map(function (transaction) {\n                  return borsh_2.serialize(transaction_1.SCHEMA, transaction);\n                }).map(function (serialized) {\n                  return Buffer.from(serialized).toString('base64');\n                }).join(','));\n                newUrl.searchParams.set('callbackUrl', callbackUrl || currentUrl.href);\n                if (meta) newUrl.searchParams.set('meta', meta);\n                window.location.assign(newUrl.toString());\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _requestSignTransactions(_x) {\n        return _requestSignTransactions3.apply(this, arguments);\n      }\n\n      return _requestSignTransactions;\n    }()\n    /**\n     * @hidden\n     * Complete sign in for a given account id and public key. To be invoked by the app when getting a callback from the wallet.\n     */\n\n  }, {\n    key: \"_completeSignInWithAccessKey\",\n    value: function () {\n      var _completeSignInWithAccessKey2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var currentUrl, publicKey, allKeys, accountId;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                currentUrl = new URL(window.location.href);\n                publicKey = currentUrl.searchParams.get('public_key') || '';\n                allKeys = (currentUrl.searchParams.get('all_keys') || '').split(',');\n                accountId = currentUrl.searchParams.get('account_id') || ''; // TODO: Handle errors during login\n\n                if (!accountId) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                this._authData = {\n                  accountId: accountId,\n                  allKeys: allKeys\n                };\n                window.localStorage.setItem(this._authDataKey, JSON.stringify(this._authData));\n\n                if (!publicKey) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                _context4.next = 10;\n                return this._moveKeyFromTempToPermanent(accountId, publicKey);\n\n              case 10:\n                currentUrl.searchParams.delete('public_key');\n                currentUrl.searchParams.delete('all_keys');\n                currentUrl.searchParams.delete('account_id');\n                window.history.replaceState({}, document.title, currentUrl.toString());\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _completeSignInWithAccessKey() {\n        return _completeSignInWithAccessKey2.apply(this, arguments);\n      }\n\n      return _completeSignInWithAccessKey;\n    }()\n    /**\n     * @hidden\n     * @param accountId The NEAR account owning the given public key\n     * @param publicKey The public key being set to the key store\n     */\n\n  }, {\n    key: \"_moveKeyFromTempToPermanent\",\n    value: function () {\n      var _moveKeyFromTempToPermanent2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(accountId, publicKey) {\n        var keyPair;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._keyStore.getKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n\n              case 2:\n                keyPair = _context5.sent;\n                _context5.next = 5;\n                return this._keyStore.setKey(this._networkId, accountId, keyPair);\n\n              case 5:\n                _context5.next = 7;\n                return this._keyStore.removeKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _moveKeyFromTempToPermanent(_x2, _x3) {\n        return _moveKeyFromTempToPermanent2.apply(this, arguments);\n      }\n\n      return _moveKeyFromTempToPermanent;\n    }()\n    /**\n     * Sign out from the current account\n     * @example\n     * walletAccount.signOut();\n     */\n\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      this._authData = {};\n      window.localStorage.removeItem(this._authDataKey);\n    }\n    /**\n     * Returns the current connected wallet account\n     */\n\n  }, {\n    key: \"account\",\n    value: function account() {\n      if (!this._connectedAccount) {\n        this._connectedAccount = new ConnectedWalletAccount(this, this._near.connection, this._authData.accountId);\n      }\n\n      return this._connectedAccount;\n    }\n  }]);\n\n  return WalletConnection;\n}();\n\nexports.WalletConnection = WalletConnection;\nexports.WalletAccount = WalletConnection;\n/**\n * {@link Account} implementation which redirects to wallet using {@link WalletConnection} when no local key is available.\n */\n\nvar ConnectedWalletAccount = /*#__PURE__*/function (_account_1$Account) {\n  _inherits(ConnectedWalletAccount, _account_1$Account);\n\n  var _super = _createSuper(ConnectedWalletAccount);\n\n  function ConnectedWalletAccount(walletConnection, connection, accountId) {\n    var _this;\n\n    _classCallCheck(this, ConnectedWalletAccount);\n\n    _this = _super.call(this, connection, accountId);\n    _this.walletConnection = walletConnection;\n    return _this;\n  } // Overriding Account methods\n\n  /**\n   * Sign a transaction by redirecting to the NEAR Wallet\n   * @see {@link WalletConnection.requestSignTransactions}\n   */\n\n\n  _createClass(ConnectedWalletAccount, [{\n    key: \"signAndSendTransaction\",\n    value: function signAndSendTransaction() {\n      if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n        return this._signAndSendTransaction({\n          receiverId: arguments.length <= 0 ? undefined : arguments[0],\n          actions: arguments.length <= 1 ? undefined : arguments[1]\n        });\n      }\n\n      return this._signAndSendTransaction(arguments.length <= 0 ? undefined : arguments[0]);\n    }\n  }, {\n    key: \"_signAndSendTransaction\",\n    value: function () {\n      var _signAndSendTransaction2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref2) {\n        var receiverId, actions, walletMeta, _ref2$walletCallbackU, walletCallbackUrl, localKey, accessKey, block, blockHash, publicKey, nonce, transaction;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                receiverId = _ref2.receiverId, actions = _ref2.actions, walletMeta = _ref2.walletMeta, _ref2$walletCallbackU = _ref2.walletCallbackUrl, walletCallbackUrl = _ref2$walletCallbackU === void 0 ? window.location.href : _ref2$walletCallbackU;\n                _context6.next = 3;\n                return this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n\n              case 3:\n                localKey = _context6.sent;\n                _context6.next = 6;\n                return this.accessKeyForTransaction(receiverId, actions, localKey);\n\n              case 6:\n                accessKey = _context6.sent;\n\n                if (accessKey) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                throw new Error(\"Cannot find matching key for transaction sent to \".concat(receiverId));\n\n              case 9:\n                if (!(localKey && localKey.toString() === accessKey.public_key)) {\n                  _context6.next = 25;\n                  break;\n                }\n\n                _context6.prev = 10;\n                _context6.next = 13;\n                return _get(_getPrototypeOf(ConnectedWalletAccount.prototype), \"signAndSendTransaction\", this).call(this, {\n                  receiverId: receiverId,\n                  actions: actions\n                });\n\n              case 13:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 16:\n                _context6.prev = 16;\n                _context6.t0 = _context6[\"catch\"](10);\n\n                if (!(_context6.t0.type === 'NotEnoughAllowance')) {\n                  _context6.next = 24;\n                  break;\n                }\n\n                _context6.next = 21;\n                return this.accessKeyForTransaction(receiverId, actions);\n\n              case 21:\n                accessKey = _context6.sent;\n                _context6.next = 25;\n                break;\n\n              case 24:\n                throw _context6.t0;\n\n              case 25:\n                _context6.next = 27;\n                return this.connection.provider.block({\n                  finality: 'final'\n                });\n\n              case 27:\n                block = _context6.sent;\n                blockHash = borsh_1.baseDecode(block.header.hash);\n                publicKey = utils_1.PublicKey.from(accessKey.public_key); // TODO: Cache & listen for nonce updates for given access key\n\n                nonce = accessKey.access_key.nonce + 1;\n                transaction = transaction_1.createTransaction(this.accountId, publicKey, receiverId, nonce, actions, blockHash);\n                _context6.next = 34;\n                return this.walletConnection.requestSignTransactions({\n                  transactions: [transaction],\n                  meta: walletMeta,\n                  callbackUrl: walletCallbackUrl\n                });\n\n              case 34:\n                return _context6.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  setTimeout(function () {\n                    reject(new Error('Failed to redirect to sign transaction'));\n                  }, 1000);\n                }));\n\n              case 35:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[10, 16]]);\n      }));\n\n      function _signAndSendTransaction(_x4) {\n        return _signAndSendTransaction2.apply(this, arguments);\n      }\n\n      return _signAndSendTransaction;\n    }()\n    /**\n     * Check if given access key allows the function call or method attempted in transaction\n     * @param accessKey Array of {access_key: AccessKey, public_key: PublicKey} items\n     * @param receiverId The NEAR account attempting to have access\n     * @param actions The action(s) needed to be checked for access\n     */\n\n  }, {\n    key: \"accessKeyMatchesTransaction\",\n    value: function () {\n      var _accessKeyMatchesTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(accessKey, receiverId, actions) {\n        var permission, _permission$FunctionC, allowedReceiverId, allowedMethods, _actions, functionCall;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                permission = accessKey.access_key.permission;\n\n                if (!(permission === 'FullAccess')) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", true);\n\n              case 3:\n                if (!permission.FunctionCall) {\n                  _context7.next = 12;\n                  break;\n                }\n\n                _permission$FunctionC = permission.FunctionCall, allowedReceiverId = _permission$FunctionC.receiver_id, allowedMethods = _permission$FunctionC.method_names;\n                /********************************\n                Accept multisig access keys and let wallets attempt to signAndSendTransaction\n                If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153\n                ********************************/\n\n                if (!(allowedReceiverId === this.accountId && allowedMethods.includes(MULTISIG_HAS_METHOD))) {\n                  _context7.next = 7;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", true);\n\n              case 7:\n                if (!(allowedReceiverId === receiverId)) {\n                  _context7.next = 12;\n                  break;\n                }\n\n                if (!(actions.length !== 1)) {\n                  _context7.next = 10;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", false);\n\n              case 10:\n                _actions = _slicedToArray(actions, 1), functionCall = _actions[0].functionCall;\n                return _context7.abrupt(\"return\", functionCall && (!functionCall.deposit || functionCall.deposit.toString() === '0') && ( // TODO: Should support charging amount smaller than allowance?\n                allowedMethods.length === 0 || allowedMethods.includes(functionCall.methodName)));\n\n              case 12:\n                return _context7.abrupt(\"return\", false);\n\n              case 13:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function accessKeyMatchesTransaction(_x5, _x6, _x7) {\n        return _accessKeyMatchesTransaction.apply(this, arguments);\n      }\n\n      return accessKeyMatchesTransaction;\n    }()\n    /**\n     * Helper function returning the access key (if it exists) to the receiver that grants the designated permission\n     * @param receiverId The NEAR account seeking the access key for a transaction\n     * @param actions The action(s) sought to gain access to\n     * @param localKey A local public key provided to check for access\n     * @returns Promise<any>\n     */\n\n  }, {\n    key: \"accessKeyForTransaction\",\n    value: function () {\n      var _accessKeyForTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(receiverId, actions, localKey) {\n        var accessKeys, accessKey, walletKeys, _iterator, _step, _accessKey;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.getAccessKeys();\n\n              case 2:\n                accessKeys = _context8.sent;\n\n                if (!localKey) {\n                  _context8.next = 12;\n                  break;\n                }\n\n                accessKey = accessKeys.find(function (key) {\n                  return key.public_key.toString() === localKey.toString();\n                });\n                _context8.t0 = accessKey;\n\n                if (!_context8.t0) {\n                  _context8.next = 10;\n                  break;\n                }\n\n                _context8.next = 9;\n                return this.accessKeyMatchesTransaction(accessKey, receiverId, actions);\n\n              case 9:\n                _context8.t0 = _context8.sent;\n\n              case 10:\n                if (!_context8.t0) {\n                  _context8.next = 12;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", accessKey);\n\n              case 12:\n                walletKeys = this.walletConnection._authData.allKeys;\n                _iterator = _createForOfIteratorHelper(accessKeys);\n                _context8.prev = 14;\n\n                _iterator.s();\n\n              case 16:\n                if ((_step = _iterator.n()).done) {\n                  _context8.next = 27;\n                  break;\n                }\n\n                _accessKey = _step.value;\n                _context8.t1 = walletKeys.indexOf(_accessKey.public_key) !== -1;\n\n                if (!_context8.t1) {\n                  _context8.next = 23;\n                  break;\n                }\n\n                _context8.next = 22;\n                return this.accessKeyMatchesTransaction(_accessKey, receiverId, actions);\n\n              case 22:\n                _context8.t1 = _context8.sent;\n\n              case 23:\n                if (!_context8.t1) {\n                  _context8.next = 25;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", _accessKey);\n\n              case 25:\n                _context8.next = 16;\n                break;\n\n              case 27:\n                _context8.next = 32;\n                break;\n\n              case 29:\n                _context8.prev = 29;\n                _context8.t2 = _context8[\"catch\"](14);\n\n                _iterator.e(_context8.t2);\n\n              case 32:\n                _context8.prev = 32;\n\n                _iterator.f();\n\n                return _context8.finish(32);\n\n              case 35:\n                return _context8.abrupt(\"return\", null);\n\n              case 36:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[14, 29, 32, 35]]);\n      }));\n\n      function accessKeyForTransaction(_x8, _x9, _x10) {\n        return _accessKeyForTransaction.apply(this, arguments);\n      }\n\n      return accessKeyForTransaction;\n    }()\n  }]);\n\n  return ConnectedWalletAccount;\n}(account_1.Account);\n\nexports.ConnectedWalletAccount = ConnectedWalletAccount;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","ConnectedWalletAccount","WalletAccount","WalletConnection","depd_1","require","account_1","transaction_1","utils_1","borsh_1","borsh_2","LOGIN_WALLET_URL_SUFFIX","MULTISIG_HAS_METHOD","LOCAL_STORAGE_KEY_SUFFIX","PENDING_ACCESS_KEY_PREFIX","near","appKeyPrefix","_near","authDataKey","authData","JSON","parse","window","localStorage","getItem","_networkId","config","networkId","_walletBaseUrl","walletUrl","contractName","_keyStore","connection","signer","keyStore","_authData","allKeys","_authDataKey","isSignedIn","_completeSignInWithAccessKey","accountId","contractIdOrOptions","title","successUrl","failureUrl","deprecate","default","options","contractId","currentUrl","URL","location","href","newUrl","searchParams","set","account","contractAccount","state","accessKey","KeyPair","fromRandom","getPublicKey","toString","setKey","methodNames","forEach","methodName","append","assign","Array","isArray","_requestSignTransactions","transactions","callbackUrl","meta","map","transaction","serialize","SCHEMA","serialized","Buffer","from","join","publicKey","get","split","setItem","stringify","_moveKeyFromTempToPermanent","delete","history","replaceState","document","getKey","keyPair","removeKey","removeItem","_connectedAccount","walletConnection","_signAndSendTransaction","receiverId","actions","walletMeta","walletCallbackUrl","localKey","accessKeyForTransaction","Error","public_key","type","provider","block","finality","blockHash","baseDecode","header","hash","PublicKey","nonce","access_key","createTransaction","requestSignTransactions","Promise","resolve","reject","setTimeout","permission","FunctionCall","allowedReceiverId","receiver_id","allowedMethods","method_names","includes","length","functionCall","deposit","getAccessKeys","accessKeys","find","key","accessKeyMatchesTransaction","walletKeys","indexOf","Account"],"sources":["D:/Projects/verifiedprofilev2/node_modules/near-api-js/lib/wallet-account.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectedWalletAccount = exports.WalletAccount = exports.WalletConnection = void 0;\n/**\n * The classes in this module are used in conjunction with the {@link BrowserLocalStorageKeyStore}. This module exposes two classes:\n * * {@link WalletConnection} which redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.\n * * {@link ConnectedWalletAccount} is an {@link Account} implementation that uses {@link WalletConnection} to get keys\n *\n * @module walletAccount\n */\nconst depd_1 = __importDefault(require(\"depd\"));\nconst account_1 = require(\"./account\");\nconst transaction_1 = require(\"./transaction\");\nconst utils_1 = require(\"./utils\");\nconst borsh_1 = require(\"borsh\");\nconst borsh_2 = require(\"borsh\");\nconst LOGIN_WALLET_URL_SUFFIX = '/login/';\nconst MULTISIG_HAS_METHOD = 'add_request_and_confirm';\nconst LOCAL_STORAGE_KEY_SUFFIX = '_wallet_auth_key';\nconst PENDING_ACCESS_KEY_PREFIX = 'pending_key'; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)\n/**\n * This class is used in conjunction with the {@link BrowserLocalStorageKeyStore}.\n * It redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#wallet}\n * @example\n * ```js\n * // create new WalletConnection instance\n * const wallet = new WalletConnection(near, 'my-app');\n *\n * // If not signed in redirect to the NEAR wallet to sign in\n * // keys will be stored in the BrowserLocalStorageKeyStore\n * if(!wallet.isSingnedIn()) return wallet.requestSignIn()\n * ```\n */\nclass WalletConnection {\n    constructor(near, appKeyPrefix) {\n        this._near = near;\n        const authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;\n        const authData = JSON.parse(window.localStorage.getItem(authDataKey));\n        this._networkId = near.config.networkId;\n        this._walletBaseUrl = near.config.walletUrl;\n        appKeyPrefix = appKeyPrefix || near.config.contractName || 'default';\n        this._keyStore = near.connection.signer.keyStore;\n        this._authData = authData || { allKeys: [] };\n        this._authDataKey = authDataKey;\n        if (!this.isSignedIn()) {\n            this._completeSignInWithAccessKey();\n        }\n    }\n    /**\n     * Returns true, if this WalletAccount is authorized with the wallet.\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * wallet.isSignedIn();\n     * ```\n     */\n    isSignedIn() {\n        return !!this._authData.accountId;\n    }\n    /**\n     * Returns authorized Account ID.\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * wallet.getAccountId();\n     * ```\n     */\n    getAccountId() {\n        return this._authData.accountId || '';\n    }\n    /**\n     * Redirects current page to the wallet authentication page.\n     * @param options An optional options object\n     * @param options.contractId The NEAR account where the contract is deployed\n     * @param options.successUrl URL to redirect upon success. Default: current url\n     * @param options.failureUrl URL to redirect upon failure. Default: current url\n     *\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * // redirects to the NEAR Wallet\n     * wallet.requestSignIn({ contractId: 'account-with-deploy-contract.near' });\n     * ```\n     */\n    async requestSignIn(contractIdOrOptions = {}, title, successUrl, failureUrl) {\n        let options;\n        if (typeof contractIdOrOptions === 'string') {\n            const deprecate = depd_1.default('requestSignIn(contractId, title)');\n            deprecate('`title` ignored; use `requestSignIn({ contractId, methodNames, successUrl, failureUrl })` instead');\n            options = { contractId: contractIdOrOptions, successUrl, failureUrl };\n        }\n        else {\n            options = contractIdOrOptions;\n        }\n        const currentUrl = new URL(window.location.href);\n        const newUrl = new URL(this._walletBaseUrl + LOGIN_WALLET_URL_SUFFIX);\n        newUrl.searchParams.set('success_url', options.successUrl || currentUrl.href);\n        newUrl.searchParams.set('failure_url', options.failureUrl || currentUrl.href);\n        if (options.contractId) {\n            /* Throws exception if contract account does not exist */\n            const contractAccount = await this._near.account(options.contractId);\n            await contractAccount.state();\n            newUrl.searchParams.set('contract_id', options.contractId);\n            const accessKey = utils_1.KeyPair.fromRandom('ed25519');\n            newUrl.searchParams.set('public_key', accessKey.getPublicKey().toString());\n            await this._keyStore.setKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + accessKey.getPublicKey(), accessKey);\n        }\n        if (options.methodNames) {\n            options.methodNames.forEach(methodName => {\n                newUrl.searchParams.append('methodNames', methodName);\n            });\n        }\n        window.location.assign(newUrl.toString());\n    }\n    async requestSignTransactions(...args) {\n        if (Array.isArray(args[0])) {\n            const deprecate = depd_1.default('WalletConnection.requestSignTransactions(transactions, callbackUrl, meta)');\n            deprecate('use `WalletConnection.requestSignTransactions(RequestSignTransactionsOptions)` instead');\n            return this._requestSignTransactions({\n                transactions: args[0],\n                callbackUrl: args[1],\n                meta: args[2]\n            });\n        }\n        return this._requestSignTransactions(args[0]);\n    }\n    async _requestSignTransactions({ transactions, meta, callbackUrl }) {\n        const currentUrl = new URL(window.location.href);\n        const newUrl = new URL('sign', this._walletBaseUrl);\n        newUrl.searchParams.set('transactions', transactions\n            .map(transaction => borsh_2.serialize(transaction_1.SCHEMA, transaction))\n            .map(serialized => Buffer.from(serialized).toString('base64'))\n            .join(','));\n        newUrl.searchParams.set('callbackUrl', callbackUrl || currentUrl.href);\n        if (meta)\n            newUrl.searchParams.set('meta', meta);\n        window.location.assign(newUrl.toString());\n    }\n    /**\n     * @hidden\n     * Complete sign in for a given account id and public key. To be invoked by the app when getting a callback from the wallet.\n     */\n    async _completeSignInWithAccessKey() {\n        const currentUrl = new URL(window.location.href);\n        const publicKey = currentUrl.searchParams.get('public_key') || '';\n        const allKeys = (currentUrl.searchParams.get('all_keys') || '').split(',');\n        const accountId = currentUrl.searchParams.get('account_id') || '';\n        // TODO: Handle errors during login\n        if (accountId) {\n            this._authData = {\n                accountId,\n                allKeys\n            };\n            window.localStorage.setItem(this._authDataKey, JSON.stringify(this._authData));\n            if (publicKey) {\n                await this._moveKeyFromTempToPermanent(accountId, publicKey);\n            }\n        }\n        currentUrl.searchParams.delete('public_key');\n        currentUrl.searchParams.delete('all_keys');\n        currentUrl.searchParams.delete('account_id');\n        window.history.replaceState({}, document.title, currentUrl.toString());\n    }\n    /**\n     * @hidden\n     * @param accountId The NEAR account owning the given public key\n     * @param publicKey The public key being set to the key store\n     */\n    async _moveKeyFromTempToPermanent(accountId, publicKey) {\n        const keyPair = await this._keyStore.getKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n        await this._keyStore.setKey(this._networkId, accountId, keyPair);\n        await this._keyStore.removeKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n    }\n    /**\n     * Sign out from the current account\n     * @example\n     * walletAccount.signOut();\n     */\n    signOut() {\n        this._authData = {};\n        window.localStorage.removeItem(this._authDataKey);\n    }\n    /**\n     * Returns the current connected wallet account\n     */\n    account() {\n        if (!this._connectedAccount) {\n            this._connectedAccount = new ConnectedWalletAccount(this, this._near.connection, this._authData.accountId);\n        }\n        return this._connectedAccount;\n    }\n}\nexports.WalletConnection = WalletConnection;\nexports.WalletAccount = WalletConnection;\n/**\n * {@link Account} implementation which redirects to wallet using {@link WalletConnection} when no local key is available.\n */\nclass ConnectedWalletAccount extends account_1.Account {\n    constructor(walletConnection, connection, accountId) {\n        super(connection, accountId);\n        this.walletConnection = walletConnection;\n    }\n    // Overriding Account methods\n    /**\n     * Sign a transaction by redirecting to the NEAR Wallet\n     * @see {@link WalletConnection.requestSignTransactions}\n     */\n    signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            return this._signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        return this._signAndSendTransaction(args[0]);\n    }\n    async _signAndSendTransaction({ receiverId, actions, walletMeta, walletCallbackUrl = window.location.href }) {\n        const localKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n        let accessKey = await this.accessKeyForTransaction(receiverId, actions, localKey);\n        if (!accessKey) {\n            throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);\n        }\n        if (localKey && localKey.toString() === accessKey.public_key) {\n            try {\n                return await super.signAndSendTransaction({ receiverId, actions });\n            }\n            catch (e) {\n                if (e.type === 'NotEnoughAllowance') {\n                    accessKey = await this.accessKeyForTransaction(receiverId, actions);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockHash = borsh_1.baseDecode(block.header.hash);\n        const publicKey = utils_1.PublicKey.from(accessKey.public_key);\n        // TODO: Cache & listen for nonce updates for given access key\n        const nonce = accessKey.access_key.nonce + 1;\n        const transaction = transaction_1.createTransaction(this.accountId, publicKey, receiverId, nonce, actions, blockHash);\n        await this.walletConnection.requestSignTransactions({\n            transactions: [transaction],\n            meta: walletMeta,\n            callbackUrl: walletCallbackUrl\n        });\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                reject(new Error('Failed to redirect to sign transaction'));\n            }, 1000);\n        });\n        // TODO: Aggregate multiple transaction request with \"debounce\".\n        // TODO: Introduce TrasactionQueue which also can be used to watch for status?\n    }\n    /**\n     * Check if given access key allows the function call or method attempted in transaction\n     * @param accessKey Array of {access_key: AccessKey, public_key: PublicKey} items\n     * @param receiverId The NEAR account attempting to have access\n     * @param actions The action(s) needed to be checked for access\n     */\n    async accessKeyMatchesTransaction(accessKey, receiverId, actions) {\n        const { access_key: { permission } } = accessKey;\n        if (permission === 'FullAccess') {\n            return true;\n        }\n        if (permission.FunctionCall) {\n            const { receiver_id: allowedReceiverId, method_names: allowedMethods } = permission.FunctionCall;\n            /********************************\n            Accept multisig access keys and let wallets attempt to signAndSendTransaction\n            If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153\n            ********************************/\n            if (allowedReceiverId === this.accountId && allowedMethods.includes(MULTISIG_HAS_METHOD)) {\n                return true;\n            }\n            if (allowedReceiverId === receiverId) {\n                if (actions.length !== 1) {\n                    return false;\n                }\n                const [{ functionCall }] = actions;\n                return functionCall &&\n                    (!functionCall.deposit || functionCall.deposit.toString() === '0') && // TODO: Should support charging amount smaller than allowance?\n                    (allowedMethods.length === 0 || allowedMethods.includes(functionCall.methodName));\n                // TODO: Handle cases when allowance doesn't have enough to pay for gas\n            }\n        }\n        // TODO: Support other permissions than FunctionCall\n        return false;\n    }\n    /**\n     * Helper function returning the access key (if it exists) to the receiver that grants the designated permission\n     * @param receiverId The NEAR account seeking the access key for a transaction\n     * @param actions The action(s) sought to gain access to\n     * @param localKey A local public key provided to check for access\n     * @returns Promise<any>\n     */\n    async accessKeyForTransaction(receiverId, actions, localKey) {\n        const accessKeys = await this.getAccessKeys();\n        if (localKey) {\n            const accessKey = accessKeys.find(key => key.public_key.toString() === localKey.toString());\n            if (accessKey && await this.accessKeyMatchesTransaction(accessKey, receiverId, actions)) {\n                return accessKey;\n            }\n        }\n        const walletKeys = this.walletConnection._authData.allKeys;\n        for (const accessKey of accessKeys) {\n            if (walletKeys.indexOf(accessKey.public_key) !== -1 && await this.accessKeyMatchesTransaction(accessKey, receiverId, actions)) {\n                return accessKey;\n            }\n        }\n        return null;\n    }\n}\nexports.ConnectedWalletAccount = ConnectedWalletAccount;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}